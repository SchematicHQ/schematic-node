// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as core from "../../../../core/index.js";
import * as environments from "../../../../environments.js";
import * as errors from "../../../../errors/index.js";
import * as Schematic from "../../../index.js";

export declare namespace Plangroups {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class Plangroups {
    protected readonly _options: Plangroups.Options;

    constructor(_options: Plangroups.Options = {}) {
        this._options = _options;
    }

    /**
     * @param {Plangroups.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Schematic.UnauthorizedError}
     * @throws {@link Schematic.ForbiddenError}
     * @throws {@link Schematic.NotFoundError}
     * @throws {@link Schematic.InternalServerError}
     *
     * @example
     *     await client.plangroups.getPlanGroup()
     */
    public getPlanGroup(
        requestOptions?: Plangroups.RequestOptions,
    ): core.HttpResponsePromise<Schematic.GetPlanGroupResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getPlanGroup(requestOptions));
    }

    private async __getPlanGroup(
        requestOptions?: Plangroups.RequestOptions,
    ): Promise<core.WithRawResponse<Schematic.GetPlanGroupResponse>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SchematicEnvironment.Default,
                "plan-groups",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Schematic.GetPlanGroupResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Schematic.UnauthorizedError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Schematic.ForbiddenError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Schematic.NotFoundError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Schematic.InternalServerError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.SchematicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SchematicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SchematicTimeoutError("Timeout exceeded when calling GET /plan-groups.");
            case "unknown":
                throw new errors.SchematicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Schematic.CreatePlanGroupRequestBody} request
     * @param {Plangroups.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Schematic.BadRequestError}
     * @throws {@link Schematic.UnauthorizedError}
     * @throws {@link Schematic.ForbiddenError}
     * @throws {@link Schematic.NotFoundError}
     * @throws {@link Schematic.InternalServerError}
     *
     * @example
     *     await client.plangroups.createPlanGroup({
     *         add_on_ids: ["add_on_ids"],
     *         checkout_collect_address: true,
     *         checkout_collect_email: true,
     *         checkout_collect_phone: true,
     *         enable_tax_collection: true,
     *         ordered_add_ons: [{
     *                 plan_id: "plan_id"
     *             }],
     *         ordered_bundle_list: [{
     *                 bundleId: "bundleId"
     *             }],
     *         ordered_plans: [{
     *                 plan_id: "plan_id"
     *             }],
     *         prevent_downgrades_when_over_limit: true,
     *         show_credits: true,
     *         show_period_toggle: true,
     *         show_zero_price_as_free: true,
     *         sync_customer_billing_details_for_tax: true
     *     })
     */
    public createPlanGroup(
        request: Schematic.CreatePlanGroupRequestBody,
        requestOptions?: Plangroups.RequestOptions,
    ): core.HttpResponsePromise<Schematic.CreatePlanGroupResponse> {
        return core.HttpResponsePromise.fromPromise(this.__createPlanGroup(request, requestOptions));
    }

    private async __createPlanGroup(
        request: Schematic.CreatePlanGroupRequestBody,
        requestOptions?: Plangroups.RequestOptions,
    ): Promise<core.WithRawResponse<Schematic.CreatePlanGroupResponse>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SchematicEnvironment.Default,
                "plan-groups",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Schematic.CreatePlanGroupResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Schematic.BadRequestError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 401:
                    throw new Schematic.UnauthorizedError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Schematic.ForbiddenError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Schematic.NotFoundError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Schematic.InternalServerError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.SchematicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SchematicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SchematicTimeoutError("Timeout exceeded when calling POST /plan-groups.");
            case "unknown":
                throw new errors.SchematicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} planGroupId - plan_group_id
     * @param {Schematic.UpdatePlanGroupRequestBody} request
     * @param {Plangroups.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Schematic.BadRequestError}
     * @throws {@link Schematic.UnauthorizedError}
     * @throws {@link Schematic.ForbiddenError}
     * @throws {@link Schematic.NotFoundError}
     * @throws {@link Schematic.InternalServerError}
     *
     * @example
     *     await client.plangroups.updatePlanGroup("plan_group_id", {
     *         add_on_ids: ["add_on_ids"],
     *         checkout_collect_address: true,
     *         checkout_collect_email: true,
     *         checkout_collect_phone: true,
     *         enable_tax_collection: true,
     *         ordered_add_ons: [{
     *                 plan_id: "plan_id"
     *             }],
     *         ordered_bundle_list: [{
     *                 bundleId: "bundleId"
     *             }],
     *         ordered_plans: [{
     *                 plan_id: "plan_id"
     *             }],
     *         prevent_downgrades_when_over_limit: true,
     *         show_credits: true,
     *         show_period_toggle: true,
     *         show_zero_price_as_free: true,
     *         sync_customer_billing_details_for_tax: true
     *     })
     */
    public updatePlanGroup(
        planGroupId: string,
        request: Schematic.UpdatePlanGroupRequestBody,
        requestOptions?: Plangroups.RequestOptions,
    ): core.HttpResponsePromise<Schematic.UpdatePlanGroupResponse> {
        return core.HttpResponsePromise.fromPromise(this.__updatePlanGroup(planGroupId, request, requestOptions));
    }

    private async __updatePlanGroup(
        planGroupId: string,
        request: Schematic.UpdatePlanGroupRequestBody,
        requestOptions?: Plangroups.RequestOptions,
    ): Promise<core.WithRawResponse<Schematic.UpdatePlanGroupResponse>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SchematicEnvironment.Default,
                `plan-groups/${core.url.encodePathParam(planGroupId)}`,
            ),
            method: "PUT",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Schematic.UpdatePlanGroupResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Schematic.BadRequestError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 401:
                    throw new Schematic.UnauthorizedError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Schematic.ForbiddenError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Schematic.NotFoundError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Schematic.InternalServerError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.SchematicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SchematicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SchematicTimeoutError(
                    "Timeout exceeded when calling PUT /plan-groups/{plan_group_id}.",
                );
            case "unknown":
                throw new errors.SchematicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders(): Promise<Record<string, string | undefined>> {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "X-Schematic-Api-Key": apiKeyValue };
    }
}
