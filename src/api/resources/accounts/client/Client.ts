/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Schematic from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Accounts {
    export interface Options {
        environment?: core.Supplier<environments.SchematicEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Accounts {
    protected readonly _options: Accounts.Options;

    constructor(_options: Accounts.Options) {
        this._options = _options;
    }

    /**
     * @param {Schematic.ListApiKeysRequest} request
     * @param {Accounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Schematic.BadRequestError}
     * @throws {@link Schematic.UnauthorizedError}
     * @throws {@link Schematic.ForbiddenError}
     * @throws {@link Schematic.NotFoundError}
     * @throws {@link Schematic.InternalServerError}
     *
     * @example
     *     await client.accounts.listApiKeys({
     *         require_environment: true
     *     })
     */
    public listApiKeys(
        request: Schematic.ListApiKeysRequest,
        requestOptions?: Accounts.RequestOptions,
    ): core.HttpResponsePromise<Schematic.ListApiKeysResponse> {
        return core.HttpResponsePromise.fromPromise(this.__listApiKeys(request, requestOptions));
    }

    private async __listApiKeys(
        request: Schematic.ListApiKeysRequest,
        requestOptions?: Accounts.RequestOptions,
    ): Promise<core.WithRawResponse<Schematic.ListApiKeysResponse>> {
        const { environment_id: environmentId, require_environment: requireEnvironment, limit, offset } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (environmentId != null) {
            _queryParams["environment_id"] = environmentId;
        }

        _queryParams["require_environment"] = requireEnvironment.toString();
        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (offset != null) {
            _queryParams["offset"] = offset.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SchematicEnvironment.Default,
                "api-keys",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Schematic.ListApiKeysResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Schematic.BadRequestError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 401:
                    throw new Schematic.UnauthorizedError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Schematic.ForbiddenError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Schematic.NotFoundError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Schematic.InternalServerError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.SchematicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SchematicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SchematicTimeoutError("Timeout exceeded when calling GET /api-keys.");
            case "unknown":
                throw new errors.SchematicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Schematic.CreateApiKeyRequestBody} request
     * @param {Accounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Schematic.BadRequestError}
     * @throws {@link Schematic.UnauthorizedError}
     * @throws {@link Schematic.ForbiddenError}
     * @throws {@link Schematic.NotFoundError}
     * @throws {@link Schematic.InternalServerError}
     *
     * @example
     *     await client.accounts.createApiKey({
     *         name: "name"
     *     })
     */
    public createApiKey(
        request: Schematic.CreateApiKeyRequestBody,
        requestOptions?: Accounts.RequestOptions,
    ): core.HttpResponsePromise<Schematic.CreateApiKeyResponse> {
        return core.HttpResponsePromise.fromPromise(this.__createApiKey(request, requestOptions));
    }

    private async __createApiKey(
        request: Schematic.CreateApiKeyRequestBody,
        requestOptions?: Accounts.RequestOptions,
    ): Promise<core.WithRawResponse<Schematic.CreateApiKeyResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SchematicEnvironment.Default,
                "api-keys",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Schematic.CreateApiKeyResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Schematic.BadRequestError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 401:
                    throw new Schematic.UnauthorizedError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Schematic.ForbiddenError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Schematic.NotFoundError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Schematic.InternalServerError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.SchematicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SchematicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SchematicTimeoutError("Timeout exceeded when calling POST /api-keys.");
            case "unknown":
                throw new errors.SchematicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} apiKeyId - api_key_id
     * @param {Accounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Schematic.UnauthorizedError}
     * @throws {@link Schematic.ForbiddenError}
     * @throws {@link Schematic.NotFoundError}
     * @throws {@link Schematic.InternalServerError}
     *
     * @example
     *     await client.accounts.getApiKey("api_key_id")
     */
    public getApiKey(
        apiKeyId: string,
        requestOptions?: Accounts.RequestOptions,
    ): core.HttpResponsePromise<Schematic.GetApiKeyResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getApiKey(apiKeyId, requestOptions));
    }

    private async __getApiKey(
        apiKeyId: string,
        requestOptions?: Accounts.RequestOptions,
    ): Promise<core.WithRawResponse<Schematic.GetApiKeyResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SchematicEnvironment.Default,
                `api-keys/${encodeURIComponent(apiKeyId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Schematic.GetApiKeyResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Schematic.UnauthorizedError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Schematic.ForbiddenError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Schematic.NotFoundError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Schematic.InternalServerError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.SchematicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SchematicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SchematicTimeoutError("Timeout exceeded when calling GET /api-keys/{api_key_id}.");
            case "unknown":
                throw new errors.SchematicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} apiKeyId - api_key_id
     * @param {Schematic.UpdateApiKeyRequestBody} request
     * @param {Accounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Schematic.BadRequestError}
     * @throws {@link Schematic.UnauthorizedError}
     * @throws {@link Schematic.ForbiddenError}
     * @throws {@link Schematic.NotFoundError}
     * @throws {@link Schematic.InternalServerError}
     *
     * @example
     *     await client.accounts.updateApiKey("api_key_id")
     */
    public updateApiKey(
        apiKeyId: string,
        request: Schematic.UpdateApiKeyRequestBody = {},
        requestOptions?: Accounts.RequestOptions,
    ): core.HttpResponsePromise<Schematic.UpdateApiKeyResponse> {
        return core.HttpResponsePromise.fromPromise(this.__updateApiKey(apiKeyId, request, requestOptions));
    }

    private async __updateApiKey(
        apiKeyId: string,
        request: Schematic.UpdateApiKeyRequestBody = {},
        requestOptions?: Accounts.RequestOptions,
    ): Promise<core.WithRawResponse<Schematic.UpdateApiKeyResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SchematicEnvironment.Default,
                `api-keys/${encodeURIComponent(apiKeyId)}`,
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Schematic.UpdateApiKeyResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Schematic.BadRequestError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 401:
                    throw new Schematic.UnauthorizedError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Schematic.ForbiddenError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Schematic.NotFoundError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Schematic.InternalServerError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.SchematicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SchematicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SchematicTimeoutError("Timeout exceeded when calling PUT /api-keys/{api_key_id}.");
            case "unknown":
                throw new errors.SchematicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} apiKeyId - api_key_id
     * @param {Accounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Schematic.BadRequestError}
     * @throws {@link Schematic.UnauthorizedError}
     * @throws {@link Schematic.ForbiddenError}
     * @throws {@link Schematic.NotFoundError}
     * @throws {@link Schematic.InternalServerError}
     *
     * @example
     *     await client.accounts.deleteApiKey("api_key_id")
     */
    public deleteApiKey(
        apiKeyId: string,
        requestOptions?: Accounts.RequestOptions,
    ): core.HttpResponsePromise<Schematic.DeleteApiKeyResponse> {
        return core.HttpResponsePromise.fromPromise(this.__deleteApiKey(apiKeyId, requestOptions));
    }

    private async __deleteApiKey(
        apiKeyId: string,
        requestOptions?: Accounts.RequestOptions,
    ): Promise<core.WithRawResponse<Schematic.DeleteApiKeyResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SchematicEnvironment.Default,
                `api-keys/${encodeURIComponent(apiKeyId)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Schematic.DeleteApiKeyResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Schematic.BadRequestError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 401:
                    throw new Schematic.UnauthorizedError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Schematic.ForbiddenError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Schematic.NotFoundError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Schematic.InternalServerError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.SchematicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SchematicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SchematicTimeoutError("Timeout exceeded when calling DELETE /api-keys/{api_key_id}.");
            case "unknown":
                throw new errors.SchematicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Schematic.CountApiKeysRequest} request
     * @param {Accounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Schematic.BadRequestError}
     * @throws {@link Schematic.UnauthorizedError}
     * @throws {@link Schematic.ForbiddenError}
     * @throws {@link Schematic.NotFoundError}
     * @throws {@link Schematic.InternalServerError}
     *
     * @example
     *     await client.accounts.countApiKeys({
     *         require_environment: true
     *     })
     */
    public countApiKeys(
        request: Schematic.CountApiKeysRequest,
        requestOptions?: Accounts.RequestOptions,
    ): core.HttpResponsePromise<Schematic.CountApiKeysResponse> {
        return core.HttpResponsePromise.fromPromise(this.__countApiKeys(request, requestOptions));
    }

    private async __countApiKeys(
        request: Schematic.CountApiKeysRequest,
        requestOptions?: Accounts.RequestOptions,
    ): Promise<core.WithRawResponse<Schematic.CountApiKeysResponse>> {
        const { environment_id: environmentId, require_environment: requireEnvironment, limit, offset } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (environmentId != null) {
            _queryParams["environment_id"] = environmentId;
        }

        _queryParams["require_environment"] = requireEnvironment.toString();
        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (offset != null) {
            _queryParams["offset"] = offset.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SchematicEnvironment.Default,
                "api-keys/count",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Schematic.CountApiKeysResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Schematic.BadRequestError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 401:
                    throw new Schematic.UnauthorizedError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Schematic.ForbiddenError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Schematic.NotFoundError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Schematic.InternalServerError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.SchematicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SchematicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SchematicTimeoutError("Timeout exceeded when calling GET /api-keys/count.");
            case "unknown":
                throw new errors.SchematicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Schematic.ListApiRequestsRequest} request
     * @param {Accounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Schematic.BadRequestError}
     * @throws {@link Schematic.UnauthorizedError}
     * @throws {@link Schematic.ForbiddenError}
     * @throws {@link Schematic.NotFoundError}
     * @throws {@link Schematic.InternalServerError}
     *
     * @example
     *     await client.accounts.listApiRequests()
     */
    public listApiRequests(
        request: Schematic.ListApiRequestsRequest = {},
        requestOptions?: Accounts.RequestOptions,
    ): core.HttpResponsePromise<Schematic.ListApiRequestsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__listApiRequests(request, requestOptions));
    }

    private async __listApiRequests(
        request: Schematic.ListApiRequestsRequest = {},
        requestOptions?: Accounts.RequestOptions,
    ): Promise<core.WithRawResponse<Schematic.ListApiRequestsResponse>> {
        const { q, request_type: requestType, environment_id: environmentId, limit, offset } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (q != null) {
            _queryParams["q"] = q;
        }

        if (requestType != null) {
            _queryParams["request_type"] = requestType;
        }

        if (environmentId != null) {
            _queryParams["environment_id"] = environmentId;
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (offset != null) {
            _queryParams["offset"] = offset.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SchematicEnvironment.Default,
                "api-requests",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Schematic.ListApiRequestsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Schematic.BadRequestError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 401:
                    throw new Schematic.UnauthorizedError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Schematic.ForbiddenError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Schematic.NotFoundError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Schematic.InternalServerError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.SchematicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SchematicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SchematicTimeoutError("Timeout exceeded when calling GET /api-requests.");
            case "unknown":
                throw new errors.SchematicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} apiRequestId - api_request_id
     * @param {Accounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Schematic.UnauthorizedError}
     * @throws {@link Schematic.ForbiddenError}
     * @throws {@link Schematic.NotFoundError}
     * @throws {@link Schematic.InternalServerError}
     *
     * @example
     *     await client.accounts.getApiRequest("api_request_id")
     */
    public getApiRequest(
        apiRequestId: string,
        requestOptions?: Accounts.RequestOptions,
    ): core.HttpResponsePromise<Schematic.GetApiRequestResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getApiRequest(apiRequestId, requestOptions));
    }

    private async __getApiRequest(
        apiRequestId: string,
        requestOptions?: Accounts.RequestOptions,
    ): Promise<core.WithRawResponse<Schematic.GetApiRequestResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SchematicEnvironment.Default,
                `api-requests/${encodeURIComponent(apiRequestId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Schematic.GetApiRequestResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Schematic.UnauthorizedError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Schematic.ForbiddenError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Schematic.NotFoundError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Schematic.InternalServerError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.SchematicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SchematicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SchematicTimeoutError(
                    "Timeout exceeded when calling GET /api-requests/{api_request_id}.",
                );
            case "unknown":
                throw new errors.SchematicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Schematic.CountApiRequestsRequest} request
     * @param {Accounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Schematic.BadRequestError}
     * @throws {@link Schematic.UnauthorizedError}
     * @throws {@link Schematic.ForbiddenError}
     * @throws {@link Schematic.NotFoundError}
     * @throws {@link Schematic.InternalServerError}
     *
     * @example
     *     await client.accounts.countApiRequests()
     */
    public countApiRequests(
        request: Schematic.CountApiRequestsRequest = {},
        requestOptions?: Accounts.RequestOptions,
    ): core.HttpResponsePromise<Schematic.CountApiRequestsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__countApiRequests(request, requestOptions));
    }

    private async __countApiRequests(
        request: Schematic.CountApiRequestsRequest = {},
        requestOptions?: Accounts.RequestOptions,
    ): Promise<core.WithRawResponse<Schematic.CountApiRequestsResponse>> {
        const { q, request_type: requestType, environment_id: environmentId, limit, offset } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (q != null) {
            _queryParams["q"] = q;
        }

        if (requestType != null) {
            _queryParams["request_type"] = requestType;
        }

        if (environmentId != null) {
            _queryParams["environment_id"] = environmentId;
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (offset != null) {
            _queryParams["offset"] = offset.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SchematicEnvironment.Default,
                "api-requests/count",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Schematic.CountApiRequestsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Schematic.BadRequestError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 401:
                    throw new Schematic.UnauthorizedError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Schematic.ForbiddenError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Schematic.NotFoundError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Schematic.InternalServerError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.SchematicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SchematicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SchematicTimeoutError("Timeout exceeded when calling GET /api-requests/count.");
            case "unknown":
                throw new errors.SchematicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Schematic.ListEnvironmentsRequest} request
     * @param {Accounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Schematic.BadRequestError}
     * @throws {@link Schematic.UnauthorizedError}
     * @throws {@link Schematic.ForbiddenError}
     * @throws {@link Schematic.NotFoundError}
     * @throws {@link Schematic.InternalServerError}
     *
     * @example
     *     await client.accounts.listEnvironments()
     */
    public listEnvironments(
        request: Schematic.ListEnvironmentsRequest = {},
        requestOptions?: Accounts.RequestOptions,
    ): core.HttpResponsePromise<Schematic.ListEnvironmentsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__listEnvironments(request, requestOptions));
    }

    private async __listEnvironments(
        request: Schematic.ListEnvironmentsRequest = {},
        requestOptions?: Accounts.RequestOptions,
    ): Promise<core.WithRawResponse<Schematic.ListEnvironmentsResponse>> {
        const { ids, limit, offset } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (ids != null) {
            if (Array.isArray(ids)) {
                _queryParams["ids"] = ids.map((item) => item);
            } else {
                _queryParams["ids"] = ids;
            }
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (offset != null) {
            _queryParams["offset"] = offset.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SchematicEnvironment.Default,
                "environments",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Schematic.ListEnvironmentsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Schematic.BadRequestError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 401:
                    throw new Schematic.UnauthorizedError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Schematic.ForbiddenError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Schematic.NotFoundError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Schematic.InternalServerError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.SchematicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SchematicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SchematicTimeoutError("Timeout exceeded when calling GET /environments.");
            case "unknown":
                throw new errors.SchematicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Schematic.CreateEnvironmentRequestBody} request
     * @param {Accounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Schematic.BadRequestError}
     * @throws {@link Schematic.UnauthorizedError}
     * @throws {@link Schematic.ForbiddenError}
     * @throws {@link Schematic.NotFoundError}
     * @throws {@link Schematic.InternalServerError}
     *
     * @example
     *     await client.accounts.createEnvironment({
     *         environment_type: "development",
     *         name: "name"
     *     })
     */
    public createEnvironment(
        request: Schematic.CreateEnvironmentRequestBody,
        requestOptions?: Accounts.RequestOptions,
    ): core.HttpResponsePromise<Schematic.CreateEnvironmentResponse> {
        return core.HttpResponsePromise.fromPromise(this.__createEnvironment(request, requestOptions));
    }

    private async __createEnvironment(
        request: Schematic.CreateEnvironmentRequestBody,
        requestOptions?: Accounts.RequestOptions,
    ): Promise<core.WithRawResponse<Schematic.CreateEnvironmentResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SchematicEnvironment.Default,
                "environments",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Schematic.CreateEnvironmentResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Schematic.BadRequestError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 401:
                    throw new Schematic.UnauthorizedError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Schematic.ForbiddenError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Schematic.NotFoundError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Schematic.InternalServerError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.SchematicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SchematicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SchematicTimeoutError("Timeout exceeded when calling POST /environments.");
            case "unknown":
                throw new errors.SchematicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} environmentId - environment_id
     * @param {Accounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Schematic.UnauthorizedError}
     * @throws {@link Schematic.ForbiddenError}
     * @throws {@link Schematic.NotFoundError}
     * @throws {@link Schematic.InternalServerError}
     *
     * @example
     *     await client.accounts.getEnvironment("environment_id")
     */
    public getEnvironment(
        environmentId: string,
        requestOptions?: Accounts.RequestOptions,
    ): core.HttpResponsePromise<Schematic.GetEnvironmentResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getEnvironment(environmentId, requestOptions));
    }

    private async __getEnvironment(
        environmentId: string,
        requestOptions?: Accounts.RequestOptions,
    ): Promise<core.WithRawResponse<Schematic.GetEnvironmentResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SchematicEnvironment.Default,
                `environments/${encodeURIComponent(environmentId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Schematic.GetEnvironmentResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Schematic.UnauthorizedError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Schematic.ForbiddenError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Schematic.NotFoundError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Schematic.InternalServerError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.SchematicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SchematicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SchematicTimeoutError(
                    "Timeout exceeded when calling GET /environments/{environment_id}.",
                );
            case "unknown":
                throw new errors.SchematicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} environmentId - environment_id
     * @param {Schematic.UpdateEnvironmentRequestBody} request
     * @param {Accounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Schematic.BadRequestError}
     * @throws {@link Schematic.UnauthorizedError}
     * @throws {@link Schematic.ForbiddenError}
     * @throws {@link Schematic.NotFoundError}
     * @throws {@link Schematic.InternalServerError}
     *
     * @example
     *     await client.accounts.updateEnvironment("environment_id")
     */
    public updateEnvironment(
        environmentId: string,
        request: Schematic.UpdateEnvironmentRequestBody = {},
        requestOptions?: Accounts.RequestOptions,
    ): core.HttpResponsePromise<Schematic.UpdateEnvironmentResponse> {
        return core.HttpResponsePromise.fromPromise(this.__updateEnvironment(environmentId, request, requestOptions));
    }

    private async __updateEnvironment(
        environmentId: string,
        request: Schematic.UpdateEnvironmentRequestBody = {},
        requestOptions?: Accounts.RequestOptions,
    ): Promise<core.WithRawResponse<Schematic.UpdateEnvironmentResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SchematicEnvironment.Default,
                `environments/${encodeURIComponent(environmentId)}`,
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Schematic.UpdateEnvironmentResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Schematic.BadRequestError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 401:
                    throw new Schematic.UnauthorizedError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Schematic.ForbiddenError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Schematic.NotFoundError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Schematic.InternalServerError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.SchematicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SchematicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SchematicTimeoutError(
                    "Timeout exceeded when calling PUT /environments/{environment_id}.",
                );
            case "unknown":
                throw new errors.SchematicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} environmentId - environment_id
     * @param {Accounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Schematic.BadRequestError}
     * @throws {@link Schematic.UnauthorizedError}
     * @throws {@link Schematic.ForbiddenError}
     * @throws {@link Schematic.NotFoundError}
     * @throws {@link Schematic.InternalServerError}
     *
     * @example
     *     await client.accounts.deleteEnvironment("environment_id")
     */
    public deleteEnvironment(
        environmentId: string,
        requestOptions?: Accounts.RequestOptions,
    ): core.HttpResponsePromise<Schematic.DeleteEnvironmentResponse> {
        return core.HttpResponsePromise.fromPromise(this.__deleteEnvironment(environmentId, requestOptions));
    }

    private async __deleteEnvironment(
        environmentId: string,
        requestOptions?: Accounts.RequestOptions,
    ): Promise<core.WithRawResponse<Schematic.DeleteEnvironmentResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SchematicEnvironment.Default,
                `environments/${encodeURIComponent(environmentId)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Schematic.DeleteEnvironmentResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Schematic.BadRequestError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 401:
                    throw new Schematic.UnauthorizedError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Schematic.ForbiddenError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Schematic.NotFoundError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Schematic.InternalServerError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.SchematicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SchematicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SchematicTimeoutError(
                    "Timeout exceeded when calling DELETE /environments/{environment_id}.",
                );
            case "unknown":
                throw new errors.SchematicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Accounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Schematic.BadRequestError}
     * @throws {@link Schematic.UnauthorizedError}
     * @throws {@link Schematic.ForbiddenError}
     * @throws {@link Schematic.NotFoundError}
     * @throws {@link Schematic.InternalServerError}
     *
     * @example
     *     await client.accounts.quickstart()
     */
    public quickstart(
        requestOptions?: Accounts.RequestOptions,
    ): core.HttpResponsePromise<Schematic.QuickstartResponse> {
        return core.HttpResponsePromise.fromPromise(this.__quickstart(requestOptions));
    }

    private async __quickstart(
        requestOptions?: Accounts.RequestOptions,
    ): Promise<core.WithRawResponse<Schematic.QuickstartResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SchematicEnvironment.Default,
                "quickstart",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Schematic.QuickstartResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Schematic.BadRequestError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 401:
                    throw new Schematic.UnauthorizedError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Schematic.ForbiddenError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Schematic.NotFoundError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Schematic.InternalServerError(
                        _response.error.body as Schematic.ApiError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.SchematicError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SchematicError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SchematicTimeoutError("Timeout exceeded when calling POST /quickstart.");
            case "unknown":
                throw new errors.SchematicError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "X-Schematic-Api-Key": apiKeyValue };
    }
}
