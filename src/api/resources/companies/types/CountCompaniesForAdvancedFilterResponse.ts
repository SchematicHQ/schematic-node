// This file was auto-generated by Fern from our API Definition.

import type * as Schematic from "../../../index.js";

export interface CountCompaniesForAdvancedFilterResponse {
    data: Schematic.CountResponse;
    /** Input parameters */
    params: CountCompaniesForAdvancedFilterResponse.Params;
}

export namespace CountCompaniesForAdvancedFilterResponse {
    /**
     * Input parameters
     */
    export interface Params {
        /** Filter companies by one or more credit type IDs (each ID starts with bcrd_) */
        credit_type_ids?: string[];
        /** Select the display columns to return (e.g. plan, subscription, users, last_seen_at) */
        display_properties?: string[];
        /** Filter companies by one or more feature IDs (each ID starts with feat_) */
        feature_ids?: string[];
        /** Filter companies by multiple company IDs (starts with comp_) */
        ids?: string[];
        /** Page limit (default 100) */
        limit?: number;
        /** Filter companies that have monetized subscriptions */
        monetized_subscriptions?: boolean;
        /** Page offset (default 0) */
        offset?: number;
        /** Filter companies by one or more plan IDs (each ID starts with plan_) */
        plan_ids?: string[];
        /** Search for companies by name, keys or string traits */
        q?: string;
        /** Column to sort by (e.g. name, created_at, last_seen_at) */
        sort_order_column?: string;
        /** Direction to sort by (asc or desc) */
        sort_order_direction?: Params.SortOrderDirection;
        /** Filter companies by one or more subscription statuses (active, canceled, expired, incomplete, incomplete_expired, past_due, paused, trialing, unpaid) */
        subscription_statuses?: string[];
        /** Filter companies by one or more subscription types (paid, free, trial) */
        subscription_types?: string[];
        /** Filter out companies that have a plan */
        without_plan?: boolean;
        /** Filter out companies that have a subscription */
        without_subscription?: boolean;
    }

    export namespace Params {
        /** Direction to sort by (asc or desc) */
        export const SortOrderDirection = {
            Asc: "asc",
            Desc: "desc",
        } as const;
        export type SortOrderDirection = (typeof SortOrderDirection)[keyof typeof SortOrderDirection];
    }
}
