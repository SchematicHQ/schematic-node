// This file was auto-generated by Fern from our API Definition.

import type * as Schematic from "../../../index.js";

export interface CountPlansResponse {
    data: Schematic.CountResponse;
    /** Input parameters */
    params: CountPlansResponse.Params;
}

export namespace CountPlansResponse {
    /**
     * Input parameters
     */
    export interface Params {
        company_id?: string;
        /** Filter for plans valid as fallback plans (not linked to billing) */
        for_fallback_plan?: boolean;
        /** Filter for plans valid as initial plans (not linked to billing, free, or auto-cancelling trial) */
        for_initial_plan?: boolean;
        /** Filter for plans valid as trial expiry plans (not linked to billing or free) */
        for_trial_expiry_plan?: boolean;
        /** Filter out plans that do not have a billing product ID */
        has_product_id?: boolean;
        ids?: string[];
        /** Page limit (default 100) */
        limit?: number;
        /** Page offset (default 0) */
        offset?: number;
        /** Filter by plan type */
        plan_type?: Params.PlanType;
        q?: string;
        /** Filter for plans that require a payment method (inverse of ForInitialPlan) */
        requires_payment_method?: boolean;
        /** Filter out plans that already have a plan entitlement for the specified feature ID */
        without_entitlement_for?: string;
        /** Filter out plans that have a paid billing product ID */
        without_paid_product_id?: boolean;
        /** Filter out plans that have a billing product ID */
        without_product_id?: boolean;
    }

    export namespace Params {
        /** Filter by plan type */
        export const PlanType = {
            Plan: "plan",
            AddOn: "add_on",
        } as const;
        export type PlanType = (typeof PlanType)[keyof typeof PlanType];
    }
}
