/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface CreateOrUpdateConditionRequestBody {
    /** Optionally provide a trait ID to compare a metric or trait value against instead of a value */
    comparison_trait_id?: string;
    condition_type: CreateOrUpdateConditionRequestBody.ConditionType;
    /** Cost of credit to use to measure this condition */
    credit_cost?: number;
    /** ID of credit to use to measure this condition */
    credit_id?: string;
    /** Name of track event type used to measure this condition */
    event_subtype?: string;
    id?: string;
    /** Period of time over which to measure the track event metric */
    metric_period?: CreateOrUpdateConditionRequestBody.MetricPeriod;
    /** When metric_period=current_month, specify whether the month restarts based on the calendar month or the billing period */
    metric_period_month_reset?: CreateOrUpdateConditionRequestBody.MetricPeriodMonthReset;
    /** Value to compare the track event metric against */
    metric_value?: number;
    operator: CreateOrUpdateConditionRequestBody.Operator;
    /** List of resource IDs (companies, users, or plans) targeted by this condition */
    resource_ids: string[];
    /** ID of trait to use to measure this condition */
    trait_id?: string;
    /** Value to compare the trait value against */
    trait_value?: string;
}

export namespace CreateOrUpdateConditionRequestBody {
    export type ConditionType =
        | "company"
        | "metric"
        | "trait"
        | "user"
        | "plan"
        | "billing_product"
        | "crm_product"
        | "base_plan";
    export const ConditionType = {
        Company: "company",
        Metric: "metric",
        Trait: "trait",
        User: "user",
        Plan: "plan",
        BillingProduct: "billing_product",
        CrmProduct: "crm_product",
        BasePlan: "base_plan",
    } as const;
    /**
     * Period of time over which to measure the track event metric
     */
    export type MetricPeriod = "all_time" | "current_month" | "current_week" | "current_day";
    export const MetricPeriod = {
        AllTime: "all_time",
        CurrentMonth: "current_month",
        CurrentWeek: "current_week",
        CurrentDay: "current_day",
    } as const;
    /**
     * When metric_period=current_month, specify whether the month restarts based on the calendar month or the billing period
     */
    export type MetricPeriodMonthReset = "first_of_month" | "billing_cycle";
    export const MetricPeriodMonthReset = {
        FirstOfMonth: "first_of_month",
        BillingCycle: "billing_cycle",
    } as const;
    export type Operator = "eq" | "ne" | "gt" | "gte" | "lt" | "lte" | "is_empty" | "not_empty";
    export const Operator = {
        Eq: "eq",
        Ne: "ne",
        Gt: "gt",
        Gte: "gte",
        Lt: "lt",
        Lte: "lte",
        IsEmpty: "is_empty",
        NotEmpty: "not_empty",
    } as const;
}
