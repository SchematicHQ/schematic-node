/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Schematic from "../../api/index";
import * as core from "../../core";
import { PlanGroupPlanDetailResponseData } from "./PlanGroupPlanDetailResponseData";
import { CheckoutSettingsResponseData } from "./CheckoutSettingsResponseData";
import { CustomPlanViewConfigResponseData } from "./CustomPlanViewConfigResponseData";
import { BillingPriceResponseData } from "./BillingPriceResponseData";
import { PlanGroupPlanEntitlementsOrder } from "./PlanGroupPlanEntitlementsOrder";
import { PlanGroupBundleOrder } from "./PlanGroupBundleOrder";

export const PlanGroupDetailResponseData: core.serialization.ObjectSchema<
    serializers.PlanGroupDetailResponseData.Raw,
    Schematic.PlanGroupDetailResponseData
> = core.serialization.object({
    addOns: core.serialization.property("add_ons", core.serialization.list(PlanGroupPlanDetailResponseData)),
    checkoutSettings: core.serialization.property("checkout_settings", CheckoutSettingsResponseData),
    customPlanConfig: core.serialization.property("custom_plan_config", CustomPlanViewConfigResponseData.optional()),
    customPlanId: core.serialization.property("custom_plan_id", core.serialization.string().optional()),
    defaultPlan: core.serialization.property("default_plan", PlanGroupPlanDetailResponseData.optional()),
    defaultPlanId: core.serialization.property("default_plan_id", core.serialization.string().optional()),
    fallbackPlan: core.serialization.property("fallback_plan", PlanGroupPlanDetailResponseData.optional()),
    fallbackPlanId: core.serialization.property("fallback_plan_id", core.serialization.string().optional()),
    id: core.serialization.string(),
    initialPlan: core.serialization.property("initial_plan", PlanGroupPlanDetailResponseData.optional()),
    initialPlanId: core.serialization.property("initial_plan_id", core.serialization.string().optional()),
    initialPlanPrice: core.serialization.property("initial_plan_price", BillingPriceResponseData.optional()),
    initialPlanPriceId: core.serialization.property("initial_plan_price_id", core.serialization.string().optional()),
    orderedAddOnList: core.serialization.property(
        "ordered_add_on_list",
        core.serialization.list(PlanGroupPlanEntitlementsOrder),
    ),
    orderedBundleList: core.serialization.property(
        "ordered_bundle_list",
        core.serialization.list(PlanGroupBundleOrder),
    ),
    orderedPlanList: core.serialization.property(
        "ordered_plan_list",
        core.serialization.list(PlanGroupPlanEntitlementsOrder),
    ),
    plans: core.serialization.list(PlanGroupPlanDetailResponseData),
    preventDowngradesWhenOverLimit: core.serialization.property(
        "prevent_downgrades_when_over_limit",
        core.serialization.boolean(),
    ),
    showCredits: core.serialization.property("show_credits", core.serialization.boolean()),
    showPeriodToggle: core.serialization.property("show_period_toggle", core.serialization.boolean()),
    showZeroPriceAsFree: core.serialization.property("show_zero_price_as_free", core.serialization.boolean()),
    syncCustomerBillingDetailsForTax: core.serialization.property(
        "sync_customer_billing_details_for_tax",
        core.serialization.boolean(),
    ),
    taxCollectionEnabled: core.serialization.property("tax_collection_enabled", core.serialization.boolean()),
    trialDays: core.serialization.property("trial_days", core.serialization.number().optional()),
    trialExpiryPlan: core.serialization.property("trial_expiry_plan", PlanGroupPlanDetailResponseData.optional()),
    trialExpiryPlanId: core.serialization.property("trial_expiry_plan_id", core.serialization.string().optional()),
    trialExpiryPlanPrice: core.serialization.property("trial_expiry_plan_price", BillingPriceResponseData.optional()),
    trialExpiryPlanPriceId: core.serialization.property(
        "trial_expiry_plan_price_id",
        core.serialization.string().optional(),
    ),
    trialPaymentMethodRequired: core.serialization.property(
        "trial_payment_method_required",
        core.serialization.boolean().optional(),
    ),
});

export declare namespace PlanGroupDetailResponseData {
    export interface Raw {
        add_ons: PlanGroupPlanDetailResponseData.Raw[];
        checkout_settings: CheckoutSettingsResponseData.Raw;
        custom_plan_config?: CustomPlanViewConfigResponseData.Raw | null;
        custom_plan_id?: string | null;
        default_plan?: PlanGroupPlanDetailResponseData.Raw | null;
        default_plan_id?: string | null;
        fallback_plan?: PlanGroupPlanDetailResponseData.Raw | null;
        fallback_plan_id?: string | null;
        id: string;
        initial_plan?: PlanGroupPlanDetailResponseData.Raw | null;
        initial_plan_id?: string | null;
        initial_plan_price?: BillingPriceResponseData.Raw | null;
        initial_plan_price_id?: string | null;
        ordered_add_on_list: PlanGroupPlanEntitlementsOrder.Raw[];
        ordered_bundle_list: PlanGroupBundleOrder.Raw[];
        ordered_plan_list: PlanGroupPlanEntitlementsOrder.Raw[];
        plans: PlanGroupPlanDetailResponseData.Raw[];
        prevent_downgrades_when_over_limit: boolean;
        show_credits: boolean;
        show_period_toggle: boolean;
        show_zero_price_as_free: boolean;
        sync_customer_billing_details_for_tax: boolean;
        tax_collection_enabled: boolean;
        trial_days?: number | null;
        trial_expiry_plan?: PlanGroupPlanDetailResponseData.Raw | null;
        trial_expiry_plan_id?: string | null;
        trial_expiry_plan_price?: BillingPriceResponseData.Raw | null;
        trial_expiry_plan_price_id?: string | null;
        trial_payment_method_required?: boolean | null;
    }
}
