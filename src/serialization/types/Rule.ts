/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Schematic from "../../api/index";
import * as core from "../../core";
import { ConditionGroup } from "./ConditionGroup";
import { Condition } from "./Condition";

export const Rule: core.serialization.ObjectSchema<serializers.Rule.Raw, Schematic.Rule> = core.serialization.object({
    accountId: core.serialization.property("account_id", core.serialization.string()),
    conditionGroups: core.serialization.property("condition_groups", core.serialization.list(ConditionGroup)),
    conditions: core.serialization.list(Condition),
    environmentId: core.serialization.property("environment_id", core.serialization.string()),
    flagId: core.serialization.property("flag_id", core.serialization.string().optional()),
    id: core.serialization.string(),
    name: core.serialization.string(),
    priority: core.serialization.number(),
    ruleType: core.serialization.property("rule_type", core.serialization.string()),
    value: core.serialization.boolean(),
});

export declare namespace Rule {
    export interface Raw {
        account_id: string;
        condition_groups: ConditionGroup.Raw[];
        conditions: Condition.Raw[];
        environment_id: string;
        flag_id?: string | null;
        id: string;
        name: string;
        priority: number;
        rule_type: string;
        value: boolean;
    }
}
