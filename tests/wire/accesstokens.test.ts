// This file was auto-generated by Fern from our API Definition.

import * as Schematic from "../../src/api/index";
import { SchematicClient } from "../../src/Client";
import { mockServerPool } from "../mock-server/MockServerPool";

describe("Accesstokens", () => {
    test("issueTemporaryAccessToken (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { lookup: { key: "value" }, resource_type: "company" };
        const rawResponseBody = {
            data: {
                api_key_id: "api_key_id",
                created_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                expired_at: "2024-01-15T09:30:00Z",
                id: "id",
                resource_type: "resource_type",
                token: "token",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/temporary-access-tokens")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accesstokens.issueTemporaryAccessToken({
            lookup: {
                key: "value",
            },
        });
        expect(response).toEqual({
            data: {
                api_key_id: "api_key_id",
                created_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                expired_at: "2024-01-15T09:30:00Z",
                id: "id",
                resource_type: "resource_type",
                token: "token",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("issueTemporaryAccessToken (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { lookup: { lookup: "lookup" }, resource_type: "company" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/temporary-access-tokens")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.accesstokens.issueTemporaryAccessToken({
                lookup: {
                    lookup: "lookup",
                },
            });
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("issueTemporaryAccessToken (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { lookup: { lookup: "lookup" }, resource_type: "company" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/temporary-access-tokens")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.accesstokens.issueTemporaryAccessToken({
                lookup: {
                    lookup: "lookup",
                },
            });
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("issueTemporaryAccessToken (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { lookup: { lookup: "lookup" }, resource_type: "company" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/temporary-access-tokens")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.accesstokens.issueTemporaryAccessToken({
                lookup: {
                    lookup: "lookup",
                },
            });
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("issueTemporaryAccessToken (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { lookup: { lookup: "lookup" }, resource_type: "company" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/temporary-access-tokens")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.accesstokens.issueTemporaryAccessToken({
                lookup: {
                    lookup: "lookup",
                },
            });
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("issueTemporaryAccessToken (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { lookup: { lookup: "lookup" }, resource_type: "company" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/temporary-access-tokens")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.accesstokens.issueTemporaryAccessToken({
                lookup: {
                    lookup: "lookup",
                },
            });
        }).rejects.toThrow(Schematic.InternalServerError);
    });
});
