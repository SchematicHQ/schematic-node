/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SchematicClient } from "../../src/Client";

describe("Credits", () => {
    test("listBillingCredits", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    burn_strategy: "burn_strategy",
                    created_at: "2024-01-15T09:30:00Z",
                    default_expiry_unit: "default_expiry_unit",
                    default_expiry_unit_count: 1,
                    default_rollover_policy: "default_rollover_policy",
                    description: "description",
                    icon: "icon",
                    id: "id",
                    name: "name",
                    plural_name: "plural_name",
                    price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    product: {
                        account_id: "account_id",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        is_active: true,
                        name: "name",
                        price: 1.1,
                        product_id: "product_id",
                        quantity: 1.1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    singular_name: "singular_name",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: { ids: ["ids"], limit: 1, name: "name", offset: 1 },
        };
        server.mockEndpoint().get("/billing/credits").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.credits.listBillingCredits();
        expect(response).toEqual({
            data: [
                {
                    burn_strategy: "burn_strategy",
                    created_at: "2024-01-15T09:30:00Z",
                    default_expiry_unit: "default_expiry_unit",
                    default_expiry_unit_count: 1,
                    default_rollover_policy: "default_rollover_policy",
                    description: "description",
                    icon: "icon",
                    id: "id",
                    name: "name",
                    plural_name: "plural_name",
                    price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    product: {
                        account_id: "account_id",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        is_active: true,
                        name: "name",
                        price: 1.1,
                        product_id: "product_id",
                        quantity: 1.1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    singular_name: "singular_name",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: {
                ids: ["ids"],
                limit: 1,
                name: "name",
                offset: 1,
            },
        });
    });

    test("createBillingCredit", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { currency: "currency", description: "description", name: "name" };
        const rawResponseBody = {
            data: {
                burn_strategy: "burn_strategy",
                created_at: "2024-01-15T09:30:00Z",
                default_expiry_unit: "default_expiry_unit",
                default_expiry_unit_count: 1,
                default_rollover_policy: "default_rollover_policy",
                description: "description",
                icon: "icon",
                id: "id",
                name: "name",
                plural_name: "plural_name",
                price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                product: {
                    account_id: "account_id",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    is_active: true,
                    name: "name",
                    price: 1.1,
                    price_decimal: "price_decimal",
                    product_id: "product_id",
                    quantity: 1.1,
                    updated_at: "2024-01-15T09:30:00Z",
                },
                singular_name: "singular_name",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/billing/credits")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.credits.createBillingCredit({
            currency: "currency",
            description: "description",
            name: "name",
        });
        expect(response).toEqual({
            data: {
                burn_strategy: "burn_strategy",
                created_at: "2024-01-15T09:30:00Z",
                default_expiry_unit: "default_expiry_unit",
                default_expiry_unit_count: 1,
                default_rollover_policy: "default_rollover_policy",
                description: "description",
                icon: "icon",
                id: "id",
                name: "name",
                plural_name: "plural_name",
                price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                product: {
                    account_id: "account_id",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    is_active: true,
                    name: "name",
                    price: 1.1,
                    price_decimal: "price_decimal",
                    product_id: "product_id",
                    quantity: 1.1,
                    updated_at: "2024-01-15T09:30:00Z",
                },
                singular_name: "singular_name",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("getSingleBillingCredit", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                burn_strategy: "burn_strategy",
                created_at: "2024-01-15T09:30:00Z",
                default_expiry_unit: "default_expiry_unit",
                default_expiry_unit_count: 1,
                default_rollover_policy: "default_rollover_policy",
                description: "description",
                icon: "icon",
                id: "id",
                name: "name",
                plural_name: "plural_name",
                price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                product: {
                    account_id: "account_id",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    is_active: true,
                    name: "name",
                    price: 1.1,
                    price_decimal: "price_decimal",
                    product_id: "product_id",
                    quantity: 1.1,
                    updated_at: "2024-01-15T09:30:00Z",
                },
                singular_name: "singular_name",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .get("/billing/credits/billing_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.credits.getSingleBillingCredit("billing_id");
        expect(response).toEqual({
            data: {
                burn_strategy: "burn_strategy",
                created_at: "2024-01-15T09:30:00Z",
                default_expiry_unit: "default_expiry_unit",
                default_expiry_unit_count: 1,
                default_rollover_policy: "default_rollover_policy",
                description: "description",
                icon: "icon",
                id: "id",
                name: "name",
                plural_name: "plural_name",
                price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                product: {
                    account_id: "account_id",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    is_active: true,
                    name: "name",
                    price: 1.1,
                    price_decimal: "price_decimal",
                    product_id: "product_id",
                    quantity: 1.1,
                    updated_at: "2024-01-15T09:30:00Z",
                },
                singular_name: "singular_name",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("updateBillingCredit", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { description: "description", name: "name" };
        const rawResponseBody = {
            data: {
                burn_strategy: "burn_strategy",
                created_at: "2024-01-15T09:30:00Z",
                default_expiry_unit: "default_expiry_unit",
                default_expiry_unit_count: 1,
                default_rollover_policy: "default_rollover_policy",
                description: "description",
                icon: "icon",
                id: "id",
                name: "name",
                plural_name: "plural_name",
                price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                product: {
                    account_id: "account_id",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    is_active: true,
                    name: "name",
                    price: 1.1,
                    price_decimal: "price_decimal",
                    product_id: "product_id",
                    quantity: 1.1,
                    updated_at: "2024-01-15T09:30:00Z",
                },
                singular_name: "singular_name",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .put("/billing/credits/billing_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.credits.updateBillingCredit("billing_id", {
            description: "description",
            name: "name",
        });
        expect(response).toEqual({
            data: {
                burn_strategy: "burn_strategy",
                created_at: "2024-01-15T09:30:00Z",
                default_expiry_unit: "default_expiry_unit",
                default_expiry_unit_count: 1,
                default_rollover_policy: "default_rollover_policy",
                description: "description",
                icon: "icon",
                id: "id",
                name: "name",
                plural_name: "plural_name",
                price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                product: {
                    account_id: "account_id",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    is_active: true,
                    name: "name",
                    price: 1.1,
                    price_decimal: "price_decimal",
                    product_id: "product_id",
                    quantity: 1.1,
                    updated_at: "2024-01-15T09:30:00Z",
                },
                singular_name: "singular_name",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("softDeleteBillingCredit", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { data: { deleted: true }, params: { key: "value" } };
        server
            .mockEndpoint()
            .delete("/billing/credits/billing_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.credits.softDeleteBillingCredit("billing_id");
        expect(response).toEqual({
            data: {
                deleted: true,
            },
            params: {
                key: "value",
            },
        });
    });

    test("listCreditBundles", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    billing_invoice_id: "billing_invoice_id",
                    bundle_type: "bundle_type",
                    created_at: "2024-01-15T09:30:00Z",
                    credit_description: "credit_description",
                    credit_icon: "credit_icon",
                    credit_id: "credit_id",
                    credit_name: "credit_name",
                    expiry_type: "expiry_type",
                    expiry_unit: "expiry_unit",
                    expiry_unit_count: 1,
                    id: "id",
                    name: "name",
                    plural_name: "plural_name",
                    price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    quantity: 1,
                    singular_name: "singular_name",
                    status: "status",
                    unit_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: {
                bundle_type: "fixed",
                credit_id: "credit_id",
                ids: ["ids"],
                limit: 1,
                offset: 1,
                status: "active",
            },
        };
        server
            .mockEndpoint()
            .get("/billing/credits/bundles")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.credits.listCreditBundles();
        expect(response).toEqual({
            data: [
                {
                    billing_invoice_id: "billing_invoice_id",
                    bundle_type: "bundle_type",
                    created_at: "2024-01-15T09:30:00Z",
                    credit_description: "credit_description",
                    credit_icon: "credit_icon",
                    credit_id: "credit_id",
                    credit_name: "credit_name",
                    expiry_type: "expiry_type",
                    expiry_unit: "expiry_unit",
                    expiry_unit_count: 1,
                    id: "id",
                    name: "name",
                    plural_name: "plural_name",
                    price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    quantity: 1,
                    singular_name: "singular_name",
                    status: "status",
                    unit_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: {
                bundle_type: "fixed",
                credit_id: "credit_id",
                ids: ["ids"],
                limit: 1,
                offset: 1,
                status: "active",
            },
        });
    });

    test("createCreditBundle", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            bundle_name: "bundle_name",
            credit_id: "credit_id",
            currency: "currency",
            price_per_unit: 1,
        };
        const rawResponseBody = {
            data: {
                billing_invoice_id: "billing_invoice_id",
                bundle_type: "bundle_type",
                created_at: "2024-01-15T09:30:00Z",
                credit_description: "credit_description",
                credit_icon: "credit_icon",
                credit_id: "credit_id",
                credit_name: "credit_name",
                expiry_type: "expiry_type",
                expiry_unit: "expiry_unit",
                expiry_unit_count: 1,
                id: "id",
                name: "name",
                plural_name: "plural_name",
                price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                quantity: 1,
                singular_name: "singular_name",
                status: "status",
                unit_price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/billing/credits/bundles")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.credits.createCreditBundle({
            bundle_name: "bundle_name",
            credit_id: "credit_id",
            currency: "currency",
            price_per_unit: 1,
        });
        expect(response).toEqual({
            data: {
                billing_invoice_id: "billing_invoice_id",
                bundle_type: "bundle_type",
                created_at: "2024-01-15T09:30:00Z",
                credit_description: "credit_description",
                credit_icon: "credit_icon",
                credit_id: "credit_id",
                credit_name: "credit_name",
                expiry_type: "expiry_type",
                expiry_unit: "expiry_unit",
                expiry_unit_count: 1,
                id: "id",
                name: "name",
                plural_name: "plural_name",
                price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                quantity: 1,
                singular_name: "singular_name",
                status: "status",
                unit_price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("getCreditBundle", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                billing_invoice_id: "billing_invoice_id",
                bundle_type: "bundle_type",
                created_at: "2024-01-15T09:30:00Z",
                credit_description: "credit_description",
                credit_icon: "credit_icon",
                credit_id: "credit_id",
                credit_name: "credit_name",
                expiry_type: "expiry_type",
                expiry_unit: "expiry_unit",
                expiry_unit_count: 1,
                id: "id",
                name: "name",
                plural_name: "plural_name",
                price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                quantity: 1,
                singular_name: "singular_name",
                status: "status",
                unit_price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .get("/billing/credits/bundles/billing_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.credits.getCreditBundle("billing_id");
        expect(response).toEqual({
            data: {
                billing_invoice_id: "billing_invoice_id",
                bundle_type: "bundle_type",
                created_at: "2024-01-15T09:30:00Z",
                credit_description: "credit_description",
                credit_icon: "credit_icon",
                credit_id: "credit_id",
                credit_name: "credit_name",
                expiry_type: "expiry_type",
                expiry_unit: "expiry_unit",
                expiry_unit_count: 1,
                id: "id",
                name: "name",
                plural_name: "plural_name",
                price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                quantity: 1,
                singular_name: "singular_name",
                status: "status",
                unit_price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("updateCreditBundleDetails", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { bundle_name: "bundle_name", price_per_unit: 1 };
        const rawResponseBody = {
            data: {
                billing_invoice_id: "billing_invoice_id",
                bundle_type: "bundle_type",
                created_at: "2024-01-15T09:30:00Z",
                credit_description: "credit_description",
                credit_icon: "credit_icon",
                credit_id: "credit_id",
                credit_name: "credit_name",
                expiry_type: "expiry_type",
                expiry_unit: "expiry_unit",
                expiry_unit_count: 1,
                id: "id",
                name: "name",
                plural_name: "plural_name",
                price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                quantity: 1,
                singular_name: "singular_name",
                status: "status",
                unit_price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .put("/billing/credits/bundles/billing_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.credits.updateCreditBundleDetails("billing_id", {
            bundle_name: "bundle_name",
            price_per_unit: 1,
        });
        expect(response).toEqual({
            data: {
                billing_invoice_id: "billing_invoice_id",
                bundle_type: "bundle_type",
                created_at: "2024-01-15T09:30:00Z",
                credit_description: "credit_description",
                credit_icon: "credit_icon",
                credit_id: "credit_id",
                credit_name: "credit_name",
                expiry_type: "expiry_type",
                expiry_unit: "expiry_unit",
                expiry_unit_count: 1,
                id: "id",
                name: "name",
                plural_name: "plural_name",
                price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                quantity: 1,
                singular_name: "singular_name",
                status: "status",
                unit_price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("deleteCreditBundle", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { data: { deleted: true }, params: { key: "value" } };
        server
            .mockEndpoint()
            .delete("/billing/credits/bundles/billing_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.credits.deleteCreditBundle("billing_id");
        expect(response).toEqual({
            data: {
                deleted: true,
            },
            params: {
                key: "value",
            },
        });
    });

    test("countCreditBundles", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: { count: 1 },
            params: {
                bundle_type: "fixed",
                credit_id: "credit_id",
                ids: ["ids"],
                limit: 1,
                offset: 1,
                status: "active",
            },
        };
        server
            .mockEndpoint()
            .get("/billing/credits/bundles/count")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.credits.countCreditBundles();
        expect(response).toEqual({
            data: {
                count: 1,
            },
            params: {
                bundle_type: "fixed",
                credit_id: "credit_id",
                ids: ["ids"],
                limit: 1,
                offset: 1,
                status: "active",
            },
        });
    });

    test("countBillingCredits", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { data: { count: 1 }, params: { ids: ["ids"], limit: 1, name: "name", offset: 1 } };
        server
            .mockEndpoint()
            .get("/billing/credits/count")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.credits.countBillingCredits();
        expect(response).toEqual({
            data: {
                count: 1,
            },
            params: {
                ids: ["ids"],
                limit: 1,
                name: "name",
                offset: 1,
            },
        });
    });

    test("zeroOutGrant", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            data: {
                company_id: "company_id",
                company_name: "company_name",
                created_at: "2024-01-15T09:30:00Z",
                credit_icon: "credit_icon",
                credit_name: "credit_name",
                expires_at: "2024-01-15T09:30:00Z",
                grant_reason: "grant_reason",
                id: "id",
                plan_id: "plan_id",
                plan_name: "plan_name",
                price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                quantity: 1,
                quantity_remaining: 1.1,
                quantity_used: 1.1,
                source_label: "source_label",
                updated_at: "2024-01-15T09:30:00Z",
                valid_from: "2024-01-15T09:30:00Z",
                zeroed_out_date: "2024-01-15T09:30:00Z",
                zeroed_out_reason: "zeroed_out_reason",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .put("/billing/credits/grants/billing_id/zero-out")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.credits.zeroOutGrant("billing_id");
        expect(response).toEqual({
            data: {
                company_id: "company_id",
                company_name: "company_name",
                created_at: "2024-01-15T09:30:00Z",
                credit_icon: "credit_icon",
                credit_name: "credit_name",
                expires_at: "2024-01-15T09:30:00Z",
                grant_reason: "grant_reason",
                id: "id",
                plan_id: "plan_id",
                plan_name: "plan_name",
                price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                quantity: 1,
                quantity_remaining: 1.1,
                quantity_used: 1.1,
                source_label: "source_label",
                updated_at: "2024-01-15T09:30:00Z",
                valid_from: "2024-01-15T09:30:00Z",
                zeroed_out_date: "2024-01-15T09:30:00Z",
                zeroed_out_reason: "zeroed_out_reason",
            },
            params: {
                key: "value",
            },
        });
    });

    test("grantBillingCreditsToCompany", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { company_id: "company_id", credit_id: "credit_id", quantity: 1, reason: "reason" };
        const rawResponseBody = {
            data: {
                company_id: "company_id",
                company_name: "company_name",
                created_at: "2024-01-15T09:30:00Z",
                credit_icon: "credit_icon",
                credit_name: "credit_name",
                expires_at: "2024-01-15T09:30:00Z",
                grant_reason: "grant_reason",
                id: "id",
                plan_id: "plan_id",
                plan_name: "plan_name",
                price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                quantity: 1,
                quantity_remaining: 1.1,
                quantity_used: 1.1,
                source_label: "source_label",
                updated_at: "2024-01-15T09:30:00Z",
                valid_from: "2024-01-15T09:30:00Z",
                zeroed_out_date: "2024-01-15T09:30:00Z",
                zeroed_out_reason: "zeroed_out_reason",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/billing/credits/grants/company")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.credits.grantBillingCreditsToCompany({
            company_id: "company_id",
            credit_id: "credit_id",
            quantity: 1,
            reason: "reason",
        });
        expect(response).toEqual({
            data: {
                company_id: "company_id",
                company_name: "company_name",
                created_at: "2024-01-15T09:30:00Z",
                credit_icon: "credit_icon",
                credit_name: "credit_name",
                expires_at: "2024-01-15T09:30:00Z",
                grant_reason: "grant_reason",
                id: "id",
                plan_id: "plan_id",
                plan_name: "plan_name",
                price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                quantity: 1,
                quantity_remaining: 1.1,
                quantity_used: 1.1,
                source_label: "source_label",
                updated_at: "2024-01-15T09:30:00Z",
                valid_from: "2024-01-15T09:30:00Z",
                zeroed_out_date: "2024-01-15T09:30:00Z",
                zeroed_out_reason: "zeroed_out_reason",
            },
            params: {
                key: "value",
            },
        });
    });

    test("listCompanyGrants", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    company_id: "company_id",
                    company_name: "company_name",
                    created_at: "2024-01-15T09:30:00Z",
                    credit_icon: "credit_icon",
                    credit_name: "credit_name",
                    expires_at: "2024-01-15T09:30:00Z",
                    grant_reason: "grant_reason",
                    id: "id",
                    plan_id: "plan_id",
                    plan_name: "plan_name",
                    price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    quantity: 1,
                    quantity_remaining: 1.1,
                    quantity_used: 1.1,
                    source_label: "source_label",
                    updated_at: "2024-01-15T09:30:00Z",
                    valid_from: "2024-01-15T09:30:00Z",
                    zeroed_out_date: "2024-01-15T09:30:00Z",
                    zeroed_out_reason: "zeroed_out_reason",
                },
            ],
            params: { company_id: "company_id", dir: "asc", limit: 1, offset: 1, order: "created_at" },
        };
        server
            .mockEndpoint()
            .get("/billing/credits/grants/company/list")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.credits.listCompanyGrants();
        expect(response).toEqual({
            data: [
                {
                    company_id: "company_id",
                    company_name: "company_name",
                    created_at: "2024-01-15T09:30:00Z",
                    credit_icon: "credit_icon",
                    credit_name: "credit_name",
                    expires_at: "2024-01-15T09:30:00Z",
                    grant_reason: "grant_reason",
                    id: "id",
                    plan_id: "plan_id",
                    plan_name: "plan_name",
                    price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    quantity: 1,
                    quantity_remaining: 1.1,
                    quantity_used: 1.1,
                    source_label: "source_label",
                    updated_at: "2024-01-15T09:30:00Z",
                    valid_from: "2024-01-15T09:30:00Z",
                    zeroed_out_date: "2024-01-15T09:30:00Z",
                    zeroed_out_reason: "zeroed_out_reason",
                },
            ],
            params: {
                company_id: "company_id",
                dir: "asc",
                limit: 1,
                offset: 1,
                order: "created_at",
            },
        });
    });

    test("countBillingCreditsGrants", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: { count: 1 },
            params: { credit_id: "credit_id", ids: ["ids"], limit: 1, offset: 1 },
        };
        server
            .mockEndpoint()
            .get("/billing/credits/grants/count")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.credits.countBillingCreditsGrants();
        expect(response).toEqual({
            data: {
                count: 1,
            },
            params: {
                credit_id: "credit_id",
                ids: ["ids"],
                limit: 1,
                offset: 1,
            },
        });
    });

    test("listGrantsForCredit", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    company_id: "company_id",
                    company_name: "company_name",
                    created_at: "2024-01-15T09:30:00Z",
                    credit_icon: "credit_icon",
                    credit_name: "credit_name",
                    expires_at: "2024-01-15T09:30:00Z",
                    grant_reason: "grant_reason",
                    id: "id",
                    plan_id: "plan_id",
                    plan_name: "plan_name",
                    price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    quantity: 1,
                    quantity_remaining: 1.1,
                    quantity_used: 1.1,
                    source_label: "source_label",
                    updated_at: "2024-01-15T09:30:00Z",
                    valid_from: "2024-01-15T09:30:00Z",
                    zeroed_out_date: "2024-01-15T09:30:00Z",
                    zeroed_out_reason: "zeroed_out_reason",
                },
            ],
            params: { credit_id: "credit_id", ids: ["ids"], limit: 1, offset: 1 },
        };
        server
            .mockEndpoint()
            .get("/billing/credits/grants/list")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.credits.listGrantsForCredit();
        expect(response).toEqual({
            data: [
                {
                    company_id: "company_id",
                    company_name: "company_name",
                    created_at: "2024-01-15T09:30:00Z",
                    credit_icon: "credit_icon",
                    credit_name: "credit_name",
                    expires_at: "2024-01-15T09:30:00Z",
                    grant_reason: "grant_reason",
                    id: "id",
                    plan_id: "plan_id",
                    plan_name: "plan_name",
                    price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    quantity: 1,
                    quantity_remaining: 1.1,
                    quantity_used: 1.1,
                    source_label: "source_label",
                    updated_at: "2024-01-15T09:30:00Z",
                    valid_from: "2024-01-15T09:30:00Z",
                    zeroed_out_date: "2024-01-15T09:30:00Z",
                    zeroed_out_reason: "zeroed_out_reason",
                },
            ],
            params: {
                credit_id: "credit_id",
                ids: ["ids"],
                limit: 1,
                offset: 1,
            },
        });
    });

    test("listBillingPlanCreditGrants", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    created_at: "2024-01-15T09:30:00Z",
                    credit_amount: 1,
                    credit_id: "credit_id",
                    id: "id",
                    plan_id: "plan_id",
                    plan_name: "plan_name",
                    reset_cadence: "reset_cadence",
                    reset_start: "reset_start",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: {
                credit_id: "credit_id",
                ids: ["ids"],
                limit: 1,
                offset: 1,
                plan_id: "plan_id",
                plan_ids: ["plan_ids"],
            },
        };
        server
            .mockEndpoint()
            .get("/billing/credits/plan-grants")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.credits.listBillingPlanCreditGrants();
        expect(response).toEqual({
            data: [
                {
                    created_at: "2024-01-15T09:30:00Z",
                    credit_amount: 1,
                    credit_id: "credit_id",
                    id: "id",
                    plan_id: "plan_id",
                    plan_name: "plan_name",
                    reset_cadence: "reset_cadence",
                    reset_start: "reset_start",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: {
                credit_id: "credit_id",
                ids: ["ids"],
                limit: 1,
                offset: 1,
                plan_id: "plan_id",
                plan_ids: ["plan_ids"],
            },
        });
    });

    test("createBillingPlanCreditGrant", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            credit_amount: 1,
            credit_id: "credit_id",
            plan_id: "plan_id",
            reset_cadence: "monthly",
            reset_start: "billing_period",
        };
        const rawResponseBody = {
            data: {
                created_at: "2024-01-15T09:30:00Z",
                credit_amount: 1,
                credit_id: "credit_id",
                id: "id",
                plan_id: "plan_id",
                plan_name: "plan_name",
                reset_cadence: "reset_cadence",
                reset_start: "reset_start",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/billing/credits/plan-grants")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.credits.createBillingPlanCreditGrant({
            credit_amount: 1,
            credit_id: "credit_id",
            plan_id: "plan_id",
            reset_cadence: "monthly",
            reset_start: "billing_period",
        });
        expect(response).toEqual({
            data: {
                created_at: "2024-01-15T09:30:00Z",
                credit_amount: 1,
                credit_id: "credit_id",
                id: "id",
                plan_id: "plan_id",
                plan_name: "plan_name",
                reset_cadence: "reset_cadence",
                reset_start: "reset_start",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("deleteBillingPlanCreditGrant", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { data: { deleted: true }, params: { key: "value" } };
        server
            .mockEndpoint()
            .delete("/billing/credits/plan-grants/billing_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.credits.deleteBillingPlanCreditGrant("billing_id");
        expect(response).toEqual({
            data: {
                deleted: true,
            },
            params: {
                key: "value",
            },
        });
    });

    test("countBillingPlanCreditGrants", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: { count: 1 },
            params: {
                credit_id: "credit_id",
                ids: ["ids"],
                limit: 1,
                offset: 1,
                plan_id: "plan_id",
                plan_ids: ["plan_ids"],
            },
        };
        server
            .mockEndpoint()
            .get("/billing/credits/plan-grants/count")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.credits.countBillingPlanCreditGrants();
        expect(response).toEqual({
            data: {
                count: 1,
            },
            params: {
                credit_id: "credit_id",
                ids: ["ids"],
                limit: 1,
                offset: 1,
                plan_id: "plan_id",
                plan_ids: ["plan_ids"],
            },
        });
    });
});
