/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SchematicClient } from "../../src/Client";

describe("Webhooks", () => {
    test("listWebhookEvents", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    created_at: "2024-01-15T09:30:00Z",
                    id: "id",
                    payload: "payload",
                    request_type: "request_type",
                    response_code: 1,
                    sent_at: "2024-01-15T09:30:00Z",
                    status: "status",
                    updated_at: "2024-01-15T09:30:00Z",
                    webhook: {
                        created_at: "2024-01-15T09:30:00Z",
                        id: "id",
                        name: "name",
                        request_types: ["request_types"],
                        secret: "secret",
                        status: "status",
                        updated_at: "2024-01-15T09:30:00Z",
                        url: "url",
                    },
                    webhook_id: "webhook_id",
                },
            ],
            params: { ids: ["ids"], limit: 1, offset: 1, q: "q", webhook_id: "webhook_id" },
        };
        server.mockEndpoint().get("/webhook-events").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.webhooks.listWebhookEvents();
        expect(response).toEqual({
            data: [
                {
                    created_at: "2024-01-15T09:30:00Z",
                    id: "id",
                    payload: "payload",
                    request_type: "request_type",
                    response_code: 1,
                    sent_at: "2024-01-15T09:30:00Z",
                    status: "status",
                    updated_at: "2024-01-15T09:30:00Z",
                    webhook: {
                        created_at: "2024-01-15T09:30:00Z",
                        id: "id",
                        name: "name",
                        request_types: ["request_types"],
                        secret: "secret",
                        status: "status",
                        updated_at: "2024-01-15T09:30:00Z",
                        url: "url",
                    },
                    webhook_id: "webhook_id",
                },
            ],
            params: {
                ids: ["ids"],
                limit: 1,
                offset: 1,
                q: "q",
                webhook_id: "webhook_id",
            },
        });
    });

    test("getWebhookEvent", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                created_at: "2024-01-15T09:30:00Z",
                id: "id",
                payload: "payload",
                request_type: "request_type",
                response_code: 1,
                sent_at: "2024-01-15T09:30:00Z",
                status: "status",
                updated_at: "2024-01-15T09:30:00Z",
                webhook: {
                    created_at: "2024-01-15T09:30:00Z",
                    credit_trigger_configs: [{ credit_id: "credit_id" }],
                    entitlement_trigger_configs: [{ feature_id: "feature_id" }],
                    id: "id",
                    name: "name",
                    request_types: ["request_types"],
                    secret: "secret",
                    status: "status",
                    updated_at: "2024-01-15T09:30:00Z",
                    url: "url",
                },
                webhook_id: "webhook_id",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .get("/webhook-events/webhook_event_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.webhooks.getWebhookEvent("webhook_event_id");
        expect(response).toEqual({
            data: {
                created_at: "2024-01-15T09:30:00Z",
                id: "id",
                payload: "payload",
                request_type: "request_type",
                response_code: 1,
                sent_at: "2024-01-15T09:30:00Z",
                status: "status",
                updated_at: "2024-01-15T09:30:00Z",
                webhook: {
                    created_at: "2024-01-15T09:30:00Z",
                    credit_trigger_configs: [
                        {
                            credit_id: "credit_id",
                        },
                    ],
                    entitlement_trigger_configs: [
                        {
                            feature_id: "feature_id",
                        },
                    ],
                    id: "id",
                    name: "name",
                    request_types: ["request_types"],
                    secret: "secret",
                    status: "status",
                    updated_at: "2024-01-15T09:30:00Z",
                    url: "url",
                },
                webhook_id: "webhook_id",
            },
            params: {
                key: "value",
            },
        });
    });

    test("countWebhookEvents", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: { count: 1 },
            params: { ids: ["ids"], limit: 1, offset: 1, q: "q", webhook_id: "webhook_id" },
        };
        server
            .mockEndpoint()
            .get("/webhook-events/count")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.webhooks.countWebhookEvents();
        expect(response).toEqual({
            data: {
                count: 1,
            },
            params: {
                ids: ["ids"],
                limit: 1,
                offset: 1,
                q: "q",
                webhook_id: "webhook_id",
            },
        });
    });

    test("listWebhooks", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    created_at: "2024-01-15T09:30:00Z",
                    credit_trigger_configs: [{ credit_id: "credit_id" }],
                    entitlement_trigger_configs: [{ feature_id: "feature_id" }],
                    id: "id",
                    name: "name",
                    request_types: ["request_types"],
                    secret: "secret",
                    status: "status",
                    updated_at: "2024-01-15T09:30:00Z",
                    url: "url",
                },
            ],
            params: { limit: 1, offset: 1, q: "q" },
        };
        server.mockEndpoint().get("/webhooks").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.webhooks.listWebhooks();
        expect(response).toEqual({
            data: [
                {
                    created_at: "2024-01-15T09:30:00Z",
                    credit_trigger_configs: [
                        {
                            credit_id: "credit_id",
                        },
                    ],
                    entitlement_trigger_configs: [
                        {
                            feature_id: "feature_id",
                        },
                    ],
                    id: "id",
                    name: "name",
                    request_types: ["request_types"],
                    secret: "secret",
                    status: "status",
                    updated_at: "2024-01-15T09:30:00Z",
                    url: "url",
                },
            ],
            params: {
                limit: 1,
                offset: 1,
                q: "q",
            },
        });
    });

    test("createWebhook", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name", request_types: ["company.updated"], url: "url" };
        const rawResponseBody = {
            data: {
                created_at: "2024-01-15T09:30:00Z",
                credit_trigger_configs: [{ credit_id: "credit_id" }],
                entitlement_trigger_configs: [{ feature_id: "feature_id" }],
                id: "id",
                name: "name",
                request_types: ["request_types"],
                secret: "secret",
                status: "status",
                updated_at: "2024-01-15T09:30:00Z",
                url: "url",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/webhooks")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.webhooks.createWebhook({
            name: "name",
            request_types: ["company.updated"],
            url: "url",
        });
        expect(response).toEqual({
            data: {
                created_at: "2024-01-15T09:30:00Z",
                credit_trigger_configs: [
                    {
                        credit_id: "credit_id",
                    },
                ],
                entitlement_trigger_configs: [
                    {
                        feature_id: "feature_id",
                    },
                ],
                id: "id",
                name: "name",
                request_types: ["request_types"],
                secret: "secret",
                status: "status",
                updated_at: "2024-01-15T09:30:00Z",
                url: "url",
            },
            params: {
                key: "value",
            },
        });
    });

    test("getWebhook", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                created_at: "2024-01-15T09:30:00Z",
                credit_trigger_configs: [{ credit_id: "credit_id" }],
                entitlement_trigger_configs: [{ feature_id: "feature_id" }],
                id: "id",
                name: "name",
                request_types: ["request_types"],
                secret: "secret",
                status: "status",
                updated_at: "2024-01-15T09:30:00Z",
                url: "url",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .get("/webhooks/webhook_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.webhooks.getWebhook("webhook_id");
        expect(response).toEqual({
            data: {
                created_at: "2024-01-15T09:30:00Z",
                credit_trigger_configs: [
                    {
                        credit_id: "credit_id",
                    },
                ],
                entitlement_trigger_configs: [
                    {
                        feature_id: "feature_id",
                    },
                ],
                id: "id",
                name: "name",
                request_types: ["request_types"],
                secret: "secret",
                status: "status",
                updated_at: "2024-01-15T09:30:00Z",
                url: "url",
            },
            params: {
                key: "value",
            },
        });
    });

    test("updateWebhook", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            data: {
                created_at: "2024-01-15T09:30:00Z",
                credit_trigger_configs: [{ credit_id: "credit_id" }],
                entitlement_trigger_configs: [{ feature_id: "feature_id" }],
                id: "id",
                name: "name",
                request_types: ["request_types"],
                secret: "secret",
                status: "status",
                updated_at: "2024-01-15T09:30:00Z",
                url: "url",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .put("/webhooks/webhook_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.webhooks.updateWebhook("webhook_id");
        expect(response).toEqual({
            data: {
                created_at: "2024-01-15T09:30:00Z",
                credit_trigger_configs: [
                    {
                        credit_id: "credit_id",
                    },
                ],
                entitlement_trigger_configs: [
                    {
                        feature_id: "feature_id",
                    },
                ],
                id: "id",
                name: "name",
                request_types: ["request_types"],
                secret: "secret",
                status: "status",
                updated_at: "2024-01-15T09:30:00Z",
                url: "url",
            },
            params: {
                key: "value",
            },
        });
    });

    test("deleteWebhook", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { data: { deleted: true }, params: { key: "value" } };
        server
            .mockEndpoint()
            .delete("/webhooks/webhook_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.webhooks.deleteWebhook("webhook_id");
        expect(response).toEqual({
            data: {
                deleted: true,
            },
            params: {
                key: "value",
            },
        });
    });

    test("countWebhooks", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { data: { count: 1 }, params: { limit: 1, offset: 1, q: "q" } };
        server.mockEndpoint().get("/webhooks/count").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.webhooks.countWebhooks();
        expect(response).toEqual({
            data: {
                count: 1,
            },
            params: {
                limit: 1,
                offset: 1,
                q: "q",
            },
        });
    });
});
