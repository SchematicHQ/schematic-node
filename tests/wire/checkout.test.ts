// This file was auto-generated by Fern from our API Definition.

import * as Schematic from "../../src/api/index";
import { SchematicClient } from "../../src/Client";
import { mockServerPool } from "../mock-server/MockServerPool";

describe("Checkout", () => {
    test("internal (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            add_on_ids: [{ add_on_id: "add_on_id", price_id: "price_id" }],
            company_id: "company_id",
            credit_bundles: [{ bundle_id: "bundle_id", quantity: 1 }],
            new_plan_id: "new_plan_id",
            new_price_id: "new_price_id",
            pay_in_advance: [{ price_id: "price_id", quantity: 1 }],
            skip_trial: true,
        };
        const rawResponseBody = {
            data: {
                cancel_at: 1,
                cancel_at_period_end: true,
                company_id: "company_id",
                confirm_payment_intent_client_secret: "confirm_payment_intent_client_secret",
                confirm_payment_intent_id: "confirm_payment_intent_id",
                created_at: "2024-01-15T09:30:00Z",
                currency: "currency",
                customer_external_id: "customer_external_id",
                default_payment_method_id: "default_payment_method_id",
                expired_at: "2024-01-15T09:30:00Z",
                id: "id",
                interval: "interval",
                metadata: { key: "value" },
                period_end: 1,
                period_start: 1,
                status: "status",
                subscription_external_id: "subscription_external_id",
                total_price: 1,
                trial_end: 1,
                trial_end_setting: "trial_end_setting",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/checkout-internal")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.checkout.internal({
            add_on_ids: [
                {
                    add_on_id: "add_on_id",
                    price_id: "price_id",
                },
            ],
            company_id: "company_id",
            credit_bundles: [
                {
                    bundle_id: "bundle_id",
                    quantity: 1,
                },
            ],
            new_plan_id: "new_plan_id",
            new_price_id: "new_price_id",
            pay_in_advance: [
                {
                    price_id: "price_id",
                    quantity: 1,
                },
            ],
            skip_trial: true,
        });
        expect(response).toEqual({
            data: {
                cancel_at: 1,
                cancel_at_period_end: true,
                company_id: "company_id",
                confirm_payment_intent_client_secret: "confirm_payment_intent_client_secret",
                confirm_payment_intent_id: "confirm_payment_intent_id",
                created_at: "2024-01-15T09:30:00Z",
                currency: "currency",
                customer_external_id: "customer_external_id",
                default_payment_method_id: "default_payment_method_id",
                expired_at: "2024-01-15T09:30:00Z",
                id: "id",
                interval: "interval",
                metadata: {
                    key: "value",
                },
                period_end: 1,
                period_start: 1,
                status: "status",
                subscription_external_id: "subscription_external_id",
                total_price: 1,
                trial_end: 1,
                trial_end_setting: "trial_end_setting",
            },
            params: {
                key: "value",
            },
        });
    });

    test("internal (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            add_on_ids: [
                { add_on_id: "add_on_id", price_id: "price_id" },
                { add_on_id: "add_on_id", price_id: "price_id" },
            ],
            company_id: "company_id",
            credit_bundles: [
                { bundle_id: "bundle_id", quantity: 1 },
                { bundle_id: "bundle_id", quantity: 1 },
            ],
            new_plan_id: "new_plan_id",
            new_price_id: "new_price_id",
            pay_in_advance: [
                { price_id: "price_id", quantity: 1 },
                { price_id: "price_id", quantity: 1 },
            ],
            skip_trial: true,
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/checkout-internal")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkout.internal({
                add_on_ids: [
                    {
                        add_on_id: "add_on_id",
                        price_id: "price_id",
                    },
                    {
                        add_on_id: "add_on_id",
                        price_id: "price_id",
                    },
                ],
                company_id: "company_id",
                credit_bundles: [
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                ],
                new_plan_id: "new_plan_id",
                new_price_id: "new_price_id",
                pay_in_advance: [
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                ],
                skip_trial: true,
            });
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("internal (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            add_on_ids: [
                { add_on_id: "add_on_id", price_id: "price_id" },
                { add_on_id: "add_on_id", price_id: "price_id" },
            ],
            company_id: "company_id",
            credit_bundles: [
                { bundle_id: "bundle_id", quantity: 1 },
                { bundle_id: "bundle_id", quantity: 1 },
            ],
            new_plan_id: "new_plan_id",
            new_price_id: "new_price_id",
            pay_in_advance: [
                { price_id: "price_id", quantity: 1 },
                { price_id: "price_id", quantity: 1 },
            ],
            skip_trial: true,
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/checkout-internal")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkout.internal({
                add_on_ids: [
                    {
                        add_on_id: "add_on_id",
                        price_id: "price_id",
                    },
                    {
                        add_on_id: "add_on_id",
                        price_id: "price_id",
                    },
                ],
                company_id: "company_id",
                credit_bundles: [
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                ],
                new_plan_id: "new_plan_id",
                new_price_id: "new_price_id",
                pay_in_advance: [
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                ],
                skip_trial: true,
            });
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("internal (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            add_on_ids: [
                { add_on_id: "add_on_id", price_id: "price_id" },
                { add_on_id: "add_on_id", price_id: "price_id" },
            ],
            company_id: "company_id",
            credit_bundles: [
                { bundle_id: "bundle_id", quantity: 1 },
                { bundle_id: "bundle_id", quantity: 1 },
            ],
            new_plan_id: "new_plan_id",
            new_price_id: "new_price_id",
            pay_in_advance: [
                { price_id: "price_id", quantity: 1 },
                { price_id: "price_id", quantity: 1 },
            ],
            skip_trial: true,
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/checkout-internal")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkout.internal({
                add_on_ids: [
                    {
                        add_on_id: "add_on_id",
                        price_id: "price_id",
                    },
                    {
                        add_on_id: "add_on_id",
                        price_id: "price_id",
                    },
                ],
                company_id: "company_id",
                credit_bundles: [
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                ],
                new_plan_id: "new_plan_id",
                new_price_id: "new_price_id",
                pay_in_advance: [
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                ],
                skip_trial: true,
            });
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("internal (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            add_on_ids: [
                { add_on_id: "add_on_id", price_id: "price_id" },
                { add_on_id: "add_on_id", price_id: "price_id" },
            ],
            company_id: "company_id",
            credit_bundles: [
                { bundle_id: "bundle_id", quantity: 1 },
                { bundle_id: "bundle_id", quantity: 1 },
            ],
            new_plan_id: "new_plan_id",
            new_price_id: "new_price_id",
            pay_in_advance: [
                { price_id: "price_id", quantity: 1 },
                { price_id: "price_id", quantity: 1 },
            ],
            skip_trial: true,
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/checkout-internal")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkout.internal({
                add_on_ids: [
                    {
                        add_on_id: "add_on_id",
                        price_id: "price_id",
                    },
                    {
                        add_on_id: "add_on_id",
                        price_id: "price_id",
                    },
                ],
                company_id: "company_id",
                credit_bundles: [
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                ],
                new_plan_id: "new_plan_id",
                new_price_id: "new_price_id",
                pay_in_advance: [
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                ],
                skip_trial: true,
            });
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("internal (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            add_on_ids: [
                { add_on_id: "add_on_id", price_id: "price_id" },
                { add_on_id: "add_on_id", price_id: "price_id" },
            ],
            company_id: "company_id",
            credit_bundles: [
                { bundle_id: "bundle_id", quantity: 1 },
                { bundle_id: "bundle_id", quantity: 1 },
            ],
            new_plan_id: "new_plan_id",
            new_price_id: "new_price_id",
            pay_in_advance: [
                { price_id: "price_id", quantity: 1 },
                { price_id: "price_id", quantity: 1 },
            ],
            skip_trial: true,
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/checkout-internal")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkout.internal({
                add_on_ids: [
                    {
                        add_on_id: "add_on_id",
                        price_id: "price_id",
                    },
                    {
                        add_on_id: "add_on_id",
                        price_id: "price_id",
                    },
                ],
                company_id: "company_id",
                credit_bundles: [
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                ],
                new_plan_id: "new_plan_id",
                new_price_id: "new_price_id",
                pay_in_advance: [
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                ],
                skip_trial: true,
            });
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("getCheckoutData (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { company_id: "company_id" };
        const rawResponseBody = {
            data: {
                active_add_ons: [
                    {
                        charge_type: "charge_type",
                        company_count: 1,
                        controlled_by: "controlled_by",
                        created_at: "2024-01-15T09:30:00Z",
                        description: "description",
                        features: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                description: "description",
                                feature_type: "feature_type",
                                flags: [
                                    {
                                        created_at: "2024-01-15T09:30:00Z",
                                        default_value: true,
                                        description: "description",
                                        flag_type: "flag_type",
                                        id: "id",
                                        key: "key",
                                        name: "name",
                                        rules: [
                                            {
                                                condition_groups: [
                                                    {
                                                        conditions: [
                                                            {
                                                                condition_type: "condition_type",
                                                                created_at: "2024-01-15T09:30:00Z",
                                                                environment_id: "environment_id",
                                                                id: "id",
                                                                operator: "operator",
                                                                resource_ids: ["resource_ids"],
                                                                resources: [{ id: "id", name: "name" }],
                                                                rule_id: "rule_id",
                                                                trait_value: "trait_value",
                                                                updated_at: "2024-01-15T09:30:00Z",
                                                            },
                                                        ],
                                                        created_at: "2024-01-15T09:30:00Z",
                                                        environment_id: "environment_id",
                                                        id: "id",
                                                        rule_id: "rule_id",
                                                        updated_at: "2024-01-15T09:30:00Z",
                                                    },
                                                ],
                                                conditions: [
                                                    {
                                                        condition_type: "condition_type",
                                                        created_at: "2024-01-15T09:30:00Z",
                                                        environment_id: "environment_id",
                                                        id: "id",
                                                        operator: "operator",
                                                        resource_ids: ["resource_ids"],
                                                        resources: [{ id: "id", name: "name" }],
                                                        rule_id: "rule_id",
                                                        trait_value: "trait_value",
                                                        updated_at: "2024-01-15T09:30:00Z",
                                                    },
                                                ],
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                name: "name",
                                                priority: 1,
                                                rule_type: "rule_type",
                                                updated_at: "2024-01-15T09:30:00Z",
                                                value: true,
                                            },
                                        ],
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                ],
                                icon: "icon",
                                id: "id",
                                name: "name",
                                plans: [{ id: "id", name: "name" }],
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        icon: "icon",
                        id: "id",
                        is_default: true,
                        is_free: true,
                        is_trialable: true,
                        name: "name",
                        plan_type: "plan_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                active_plan: {
                    audience_type: "audience_type",
                    billing_product: {
                        account_id: "account_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        is_active: true,
                        name: "name",
                        price: 1.1,
                        prices: [
                            {
                                currency: "currency",
                                external_price_id: "external_price_id",
                                id: "id",
                                interval: "interval",
                                price: 1,
                                scheme: "scheme",
                            },
                        ],
                        product_id: "product_id",
                        quantity: 1.1,
                        subscription_count: 1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    charge_type: "charge_type",
                    company_count: 1,
                    controlled_by: "controlled_by",
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    features: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            description: "description",
                            feature_type: "feature_type",
                            flags: [
                                {
                                    created_at: "2024-01-15T09:30:00Z",
                                    default_value: true,
                                    description: "description",
                                    flag_type: "flag_type",
                                    id: "id",
                                    key: "key",
                                    name: "name",
                                    rules: [
                                        {
                                            condition_groups: [
                                                {
                                                    conditions: [
                                                        {
                                                            condition_type: "condition_type",
                                                            created_at: "2024-01-15T09:30:00Z",
                                                            environment_id: "environment_id",
                                                            id: "id",
                                                            operator: "operator",
                                                            resource_ids: ["resource_ids"],
                                                            resources: [{ id: "id", name: "name" }],
                                                            rule_id: "rule_id",
                                                            trait_value: "trait_value",
                                                            updated_at: "2024-01-15T09:30:00Z",
                                                        },
                                                    ],
                                                    created_at: "2024-01-15T09:30:00Z",
                                                    environment_id: "environment_id",
                                                    id: "id",
                                                    rule_id: "rule_id",
                                                    updated_at: "2024-01-15T09:30:00Z",
                                                },
                                            ],
                                            conditions: [
                                                {
                                                    condition_type: "condition_type",
                                                    created_at: "2024-01-15T09:30:00Z",
                                                    environment_id: "environment_id",
                                                    id: "id",
                                                    operator: "operator",
                                                    resource_ids: ["resource_ids"],
                                                    resources: [{ id: "id", name: "name" }],
                                                    rule_id: "rule_id",
                                                    trait_value: "trait_value",
                                                    updated_at: "2024-01-15T09:30:00Z",
                                                },
                                            ],
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            name: "name",
                                            priority: 1,
                                            rule_type: "rule_type",
                                            updated_at: "2024-01-15T09:30:00Z",
                                            value: true,
                                        },
                                    ],
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                            ],
                            icon: "icon",
                            id: "id",
                            name: "name",
                            plans: [{ id: "id", name: "name" }],
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    icon: "icon",
                    id: "id",
                    included_credit_grants: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            credit_amount: 1,
                            credit_id: "credit_id",
                            credit_name: "credit_name",
                            id: "id",
                            plan_id: "plan_id",
                            plan_name: "plan_name",
                            reset_cadence: "reset_cadence",
                            reset_start: "reset_start",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    is_default: true,
                    is_free: true,
                    is_trialable: true,
                    monthly_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    name: "name",
                    one_time_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    plan_type: "plan_type",
                    trial_days: 1,
                    updated_at: "2024-01-15T09:30:00Z",
                    yearly_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                },
                active_usage_based_entitlements: [{ feature_id: "feature_id", value_type: "value_type" }],
                available_credit_bundles: [
                    {
                        bundle_type: "bundle_type",
                        created_at: "2024-01-15T09:30:00Z",
                        credit_id: "credit_id",
                        credit_name: "credit_name",
                        expiry_type: "expiry_type",
                        expiry_unit: "expiry_unit",
                        has_grants: true,
                        id: "id",
                        name: "name",
                        status: "status",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                company: {
                    add_ons: [{ id: "id", name: "name" }],
                    billing_credit_balances: { key: 1.1 },
                    billing_subscription: {
                        cancel_at_period_end: true,
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        discounts: [
                            {
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                is_active: true,
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        id: "id",
                        interval: "interval",
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                    },
                    billing_subscriptions: [
                        {
                            cancel_at_period_end: true,
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            customer_external_id: "customer_external_id",
                            discounts: [
                                {
                                    coupon_id: "coupon_id",
                                    coupon_name: "coupon_name",
                                    discount_external_id: "discount_external_id",
                                    duration: "duration",
                                    is_active: true,
                                    started_at: "2024-01-15T09:30:00Z",
                                    subscription_external_id: "subscription_external_id",
                                },
                            ],
                            id: "id",
                            interval: "interval",
                            period_end: 1,
                            period_start: 1,
                            products: [
                                {
                                    billing_scheme: "billing_scheme",
                                    created_at: "2024-01-15T09:30:00Z",
                                    currency: "currency",
                                    environment_id: "environment_id",
                                    external_id: "external_id",
                                    id: "id",
                                    interval: "interval",
                                    name: "name",
                                    package_size: 1,
                                    price: 1,
                                    price_external_id: "price_external_id",
                                    price_id: "price_id",
                                    price_tier: [{}],
                                    quantity: 1.1,
                                    subscription_id: "subscription_id",
                                    updated_at: "2024-01-15T09:30:00Z",
                                    usage_type: "usage_type",
                                },
                            ],
                            status: "status",
                            subscription_external_id: "subscription_external_id",
                            total_price: 1,
                        },
                    ],
                    created_at: "2024-01-15T09:30:00Z",
                    default_payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    entity_traits: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            environment_id: "environment_id",
                            id: "id",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    environment_id: "environment_id",
                    id: "id",
                    keys: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            entity_id: "entity_id",
                            entity_type: "entity_type",
                            environment_id: "environment_id",
                            id: "id",
                            key: "key",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    last_seen_at: "2024-01-15T09:30:00Z",
                    logo_url: "logo_url",
                    metrics: [
                        {
                            account_id: "account_id",
                            captured_at_max: "2024-01-15T09:30:00Z",
                            captured_at_min: "2024-01-15T09:30:00Z",
                            company_id: "company_id",
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            event_subtype: "event_subtype",
                            month_reset: "month_reset",
                            period: "period",
                            value: 1,
                        },
                    ],
                    name: "name",
                    payment_methods: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            customer_external_id: "customer_external_id",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            payment_method_type: "payment_method_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    plan: { id: "id", name: "name" },
                    plans: [{ id: "id", name: "name" }],
                    rules: [
                        {
                            account_id: "account_id",
                            condition_groups: [
                                {
                                    conditions: [
                                        {
                                            account_id: "account_id",
                                            condition_type: "condition_type",
                                            environment_id: "environment_id",
                                            id: "id",
                                            operator: "operator",
                                            resource_ids: ["resource_ids"],
                                            trait_value: "trait_value",
                                        },
                                    ],
                                },
                            ],
                            conditions: [
                                {
                                    account_id: "account_id",
                                    condition_type: "condition_type",
                                    environment_id: "environment_id",
                                    id: "id",
                                    operator: "operator",
                                    resource_ids: ["resource_ids"],
                                    trait_value: "trait_value",
                                },
                            ],
                            environment_id: "environment_id",
                            id: "id",
                            name: "name",
                            priority: 1,
                            rule_type: "rule_type",
                            value: true,
                        },
                    ],
                    traits: { key: "value" },
                    updated_at: "2024-01-15T09:30:00Z",
                    user_count: 1,
                },
                feature_usage: {
                    features: [
                        {
                            access: true,
                            allocation_type: "boolean",
                            entitlement_id: "entitlement_id",
                            entitlement_type: "entitlement_type",
                        },
                    ],
                },
                selected_credit_bundles: [{ quantity: 1, total: 1 }],
                selected_plan: {
                    audience_type: "audience_type",
                    billing_product: {
                        account_id: "account_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        is_active: true,
                        name: "name",
                        price: 1.1,
                        prices: [
                            {
                                currency: "currency",
                                external_price_id: "external_price_id",
                                id: "id",
                                interval: "interval",
                                price: 1,
                                scheme: "scheme",
                            },
                        ],
                        product_id: "product_id",
                        quantity: 1.1,
                        subscription_count: 1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    charge_type: "charge_type",
                    company_count: 1,
                    controlled_by: "controlled_by",
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    features: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            description: "description",
                            feature_type: "feature_type",
                            flags: [
                                {
                                    created_at: "2024-01-15T09:30:00Z",
                                    default_value: true,
                                    description: "description",
                                    flag_type: "flag_type",
                                    id: "id",
                                    key: "key",
                                    name: "name",
                                    rules: [
                                        {
                                            condition_groups: [
                                                {
                                                    conditions: [
                                                        {
                                                            condition_type: "condition_type",
                                                            created_at: "2024-01-15T09:30:00Z",
                                                            environment_id: "environment_id",
                                                            id: "id",
                                                            operator: "operator",
                                                            resource_ids: ["resource_ids"],
                                                            resources: [{ id: "id", name: "name" }],
                                                            rule_id: "rule_id",
                                                            trait_value: "trait_value",
                                                            updated_at: "2024-01-15T09:30:00Z",
                                                        },
                                                    ],
                                                    created_at: "2024-01-15T09:30:00Z",
                                                    environment_id: "environment_id",
                                                    id: "id",
                                                    rule_id: "rule_id",
                                                    updated_at: "2024-01-15T09:30:00Z",
                                                },
                                            ],
                                            conditions: [
                                                {
                                                    condition_type: "condition_type",
                                                    created_at: "2024-01-15T09:30:00Z",
                                                    environment_id: "environment_id",
                                                    id: "id",
                                                    operator: "operator",
                                                    resource_ids: ["resource_ids"],
                                                    resources: [{ id: "id", name: "name" }],
                                                    rule_id: "rule_id",
                                                    trait_value: "trait_value",
                                                    updated_at: "2024-01-15T09:30:00Z",
                                                },
                                            ],
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            name: "name",
                                            priority: 1,
                                            rule_type: "rule_type",
                                            updated_at: "2024-01-15T09:30:00Z",
                                            value: true,
                                        },
                                    ],
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                            ],
                            icon: "icon",
                            id: "id",
                            name: "name",
                            plans: [{ id: "id", name: "name" }],
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    icon: "icon",
                    id: "id",
                    included_credit_grants: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            credit_amount: 1,
                            credit_id: "credit_id",
                            credit_name: "credit_name",
                            id: "id",
                            plan_id: "plan_id",
                            plan_name: "plan_name",
                            reset_cadence: "reset_cadence",
                            reset_start: "reset_start",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    is_default: true,
                    is_free: true,
                    is_trialable: true,
                    monthly_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    name: "name",
                    one_time_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    plan_type: "plan_type",
                    trial_days: 1,
                    updated_at: "2024-01-15T09:30:00Z",
                    yearly_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                },
                selected_usage_based_entitlements: [{ feature_id: "feature_id", value_type: "value_type" }],
                subscription: {
                    cancel_at: "2024-01-15T09:30:00Z",
                    cancel_at_period_end: true,
                    currency: "currency",
                    customer_external_id: "customer_external_id",
                    discounts: [
                        {
                            coupon_id: "coupon_id",
                            coupon_name: "coupon_name",
                            discount_external_id: "discount_external_id",
                            duration: "duration",
                            is_active: true,
                            started_at: "2024-01-15T09:30:00Z",
                            subscription_external_id: "subscription_external_id",
                        },
                    ],
                    expired_at: "2024-01-15T09:30:00Z",
                    interval: "interval",
                    latest_invoice: {
                        amount_due: 1,
                        amount_paid: 1,
                        amount_remaining: 1,
                        collection_method: "collection_method",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        id: "id",
                        subtotal: 1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    products: [
                        {
                            billing_scheme: "billing_scheme",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            interval: "interval",
                            name: "name",
                            package_size: 1,
                            price: 1,
                            price_external_id: "price_external_id",
                            price_id: "price_id",
                            price_tier: [{}],
                            quantity: 1.1,
                            subscription_id: "subscription_id",
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_type: "usage_type",
                        },
                    ],
                    status: "status",
                    subscription_external_id: "subscription_external_id",
                    total_price: 1,
                    trial_end: "2024-01-15T09:30:00Z",
                },
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/checkout-internal/data")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.checkout.getCheckoutData({
            company_id: "company_id",
        });
        expect(response).toEqual({
            data: {
                active_add_ons: [
                    {
                        charge_type: "charge_type",
                        company_count: 1,
                        controlled_by: "controlled_by",
                        created_at: "2024-01-15T09:30:00Z",
                        description: "description",
                        features: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                description: "description",
                                feature_type: "feature_type",
                                flags: [
                                    {
                                        created_at: "2024-01-15T09:30:00Z",
                                        default_value: true,
                                        description: "description",
                                        flag_type: "flag_type",
                                        id: "id",
                                        key: "key",
                                        name: "name",
                                        rules: [
                                            {
                                                condition_groups: [
                                                    {
                                                        conditions: [
                                                            {
                                                                condition_type: "condition_type",
                                                                created_at: "2024-01-15T09:30:00Z",
                                                                environment_id: "environment_id",
                                                                id: "id",
                                                                operator: "operator",
                                                                resource_ids: ["resource_ids"],
                                                                resources: [
                                                                    {
                                                                        id: "id",
                                                                        name: "name",
                                                                    },
                                                                ],
                                                                rule_id: "rule_id",
                                                                trait_value: "trait_value",
                                                                updated_at: "2024-01-15T09:30:00Z",
                                                            },
                                                        ],
                                                        created_at: "2024-01-15T09:30:00Z",
                                                        environment_id: "environment_id",
                                                        id: "id",
                                                        rule_id: "rule_id",
                                                        updated_at: "2024-01-15T09:30:00Z",
                                                    },
                                                ],
                                                conditions: [
                                                    {
                                                        condition_type: "condition_type",
                                                        created_at: "2024-01-15T09:30:00Z",
                                                        environment_id: "environment_id",
                                                        id: "id",
                                                        operator: "operator",
                                                        resource_ids: ["resource_ids"],
                                                        resources: [
                                                            {
                                                                id: "id",
                                                                name: "name",
                                                            },
                                                        ],
                                                        rule_id: "rule_id",
                                                        trait_value: "trait_value",
                                                        updated_at: "2024-01-15T09:30:00Z",
                                                    },
                                                ],
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                name: "name",
                                                priority: 1,
                                                rule_type: "rule_type",
                                                updated_at: "2024-01-15T09:30:00Z",
                                                value: true,
                                            },
                                        ],
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                ],
                                icon: "icon",
                                id: "id",
                                name: "name",
                                plans: [
                                    {
                                        id: "id",
                                        name: "name",
                                    },
                                ],
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        icon: "icon",
                        id: "id",
                        is_default: true,
                        is_free: true,
                        is_trialable: true,
                        name: "name",
                        plan_type: "plan_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                active_plan: {
                    audience_type: "audience_type",
                    billing_product: {
                        account_id: "account_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        is_active: true,
                        name: "name",
                        price: 1.1,
                        prices: [
                            {
                                currency: "currency",
                                external_price_id: "external_price_id",
                                id: "id",
                                interval: "interval",
                                price: 1,
                                scheme: "scheme",
                            },
                        ],
                        product_id: "product_id",
                        quantity: 1.1,
                        subscription_count: 1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    charge_type: "charge_type",
                    company_count: 1,
                    controlled_by: "controlled_by",
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    features: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            description: "description",
                            feature_type: "feature_type",
                            flags: [
                                {
                                    created_at: "2024-01-15T09:30:00Z",
                                    default_value: true,
                                    description: "description",
                                    flag_type: "flag_type",
                                    id: "id",
                                    key: "key",
                                    name: "name",
                                    rules: [
                                        {
                                            condition_groups: [
                                                {
                                                    conditions: [
                                                        {
                                                            condition_type: "condition_type",
                                                            created_at: "2024-01-15T09:30:00Z",
                                                            environment_id: "environment_id",
                                                            id: "id",
                                                            operator: "operator",
                                                            resource_ids: ["resource_ids"],
                                                            resources: [
                                                                {
                                                                    id: "id",
                                                                    name: "name",
                                                                },
                                                            ],
                                                            rule_id: "rule_id",
                                                            trait_value: "trait_value",
                                                            updated_at: "2024-01-15T09:30:00Z",
                                                        },
                                                    ],
                                                    created_at: "2024-01-15T09:30:00Z",
                                                    environment_id: "environment_id",
                                                    id: "id",
                                                    rule_id: "rule_id",
                                                    updated_at: "2024-01-15T09:30:00Z",
                                                },
                                            ],
                                            conditions: [
                                                {
                                                    condition_type: "condition_type",
                                                    created_at: "2024-01-15T09:30:00Z",
                                                    environment_id: "environment_id",
                                                    id: "id",
                                                    operator: "operator",
                                                    resource_ids: ["resource_ids"],
                                                    resources: [
                                                        {
                                                            id: "id",
                                                            name: "name",
                                                        },
                                                    ],
                                                    rule_id: "rule_id",
                                                    trait_value: "trait_value",
                                                    updated_at: "2024-01-15T09:30:00Z",
                                                },
                                            ],
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            name: "name",
                                            priority: 1,
                                            rule_type: "rule_type",
                                            updated_at: "2024-01-15T09:30:00Z",
                                            value: true,
                                        },
                                    ],
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                            ],
                            icon: "icon",
                            id: "id",
                            name: "name",
                            plans: [
                                {
                                    id: "id",
                                    name: "name",
                                },
                            ],
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    icon: "icon",
                    id: "id",
                    included_credit_grants: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            credit_amount: 1,
                            credit_id: "credit_id",
                            credit_name: "credit_name",
                            id: "id",
                            plan_id: "plan_id",
                            plan_name: "plan_name",
                            reset_cadence: "reset_cadence",
                            reset_start: "reset_start",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    is_default: true,
                    is_free: true,
                    is_trialable: true,
                    monthly_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    name: "name",
                    one_time_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    plan_type: "plan_type",
                    trial_days: 1,
                    updated_at: "2024-01-15T09:30:00Z",
                    yearly_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                },
                active_usage_based_entitlements: [
                    {
                        feature_id: "feature_id",
                        value_type: "value_type",
                    },
                ],
                available_credit_bundles: [
                    {
                        bundle_type: "bundle_type",
                        created_at: "2024-01-15T09:30:00Z",
                        credit_id: "credit_id",
                        credit_name: "credit_name",
                        expiry_type: "expiry_type",
                        expiry_unit: "expiry_unit",
                        has_grants: true,
                        id: "id",
                        name: "name",
                        status: "status",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                company: {
                    add_ons: [
                        {
                            id: "id",
                            name: "name",
                        },
                    ],
                    billing_credit_balances: {
                        key: 1.1,
                    },
                    billing_subscription: {
                        cancel_at_period_end: true,
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        discounts: [
                            {
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                is_active: true,
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        id: "id",
                        interval: "interval",
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                    },
                    billing_subscriptions: [
                        {
                            cancel_at_period_end: true,
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            customer_external_id: "customer_external_id",
                            discounts: [
                                {
                                    coupon_id: "coupon_id",
                                    coupon_name: "coupon_name",
                                    discount_external_id: "discount_external_id",
                                    duration: "duration",
                                    is_active: true,
                                    started_at: "2024-01-15T09:30:00Z",
                                    subscription_external_id: "subscription_external_id",
                                },
                            ],
                            id: "id",
                            interval: "interval",
                            period_end: 1,
                            period_start: 1,
                            products: [
                                {
                                    billing_scheme: "billing_scheme",
                                    created_at: "2024-01-15T09:30:00Z",
                                    currency: "currency",
                                    environment_id: "environment_id",
                                    external_id: "external_id",
                                    id: "id",
                                    interval: "interval",
                                    name: "name",
                                    package_size: 1,
                                    price: 1,
                                    price_external_id: "price_external_id",
                                    price_id: "price_id",
                                    price_tier: [{}],
                                    quantity: 1.1,
                                    subscription_id: "subscription_id",
                                    updated_at: "2024-01-15T09:30:00Z",
                                    usage_type: "usage_type",
                                },
                            ],
                            status: "status",
                            subscription_external_id: "subscription_external_id",
                            total_price: 1,
                        },
                    ],
                    created_at: "2024-01-15T09:30:00Z",
                    default_payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    entity_traits: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            environment_id: "environment_id",
                            id: "id",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    environment_id: "environment_id",
                    id: "id",
                    keys: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            entity_id: "entity_id",
                            entity_type: "entity_type",
                            environment_id: "environment_id",
                            id: "id",
                            key: "key",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    last_seen_at: "2024-01-15T09:30:00Z",
                    logo_url: "logo_url",
                    metrics: [
                        {
                            account_id: "account_id",
                            captured_at_max: "2024-01-15T09:30:00Z",
                            captured_at_min: "2024-01-15T09:30:00Z",
                            company_id: "company_id",
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            event_subtype: "event_subtype",
                            month_reset: "month_reset",
                            period: "period",
                            value: 1,
                        },
                    ],
                    name: "name",
                    payment_methods: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            customer_external_id: "customer_external_id",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            payment_method_type: "payment_method_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    plan: {
                        id: "id",
                        name: "name",
                    },
                    plans: [
                        {
                            id: "id",
                            name: "name",
                        },
                    ],
                    rules: [
                        {
                            account_id: "account_id",
                            condition_groups: [
                                {
                                    conditions: [
                                        {
                                            account_id: "account_id",
                                            condition_type: "condition_type",
                                            environment_id: "environment_id",
                                            id: "id",
                                            operator: "operator",
                                            resource_ids: ["resource_ids"],
                                            trait_value: "trait_value",
                                        },
                                    ],
                                },
                            ],
                            conditions: [
                                {
                                    account_id: "account_id",
                                    condition_type: "condition_type",
                                    environment_id: "environment_id",
                                    id: "id",
                                    operator: "operator",
                                    resource_ids: ["resource_ids"],
                                    trait_value: "trait_value",
                                },
                            ],
                            environment_id: "environment_id",
                            id: "id",
                            name: "name",
                            priority: 1,
                            rule_type: "rule_type",
                            value: true,
                        },
                    ],
                    traits: {
                        key: "value",
                    },
                    updated_at: "2024-01-15T09:30:00Z",
                    user_count: 1,
                },
                feature_usage: {
                    features: [
                        {
                            access: true,
                            allocation_type: "boolean",
                            entitlement_id: "entitlement_id",
                            entitlement_type: "entitlement_type",
                        },
                    ],
                },
                selected_credit_bundles: [
                    {
                        quantity: 1,
                        total: 1,
                    },
                ],
                selected_plan: {
                    audience_type: "audience_type",
                    billing_product: {
                        account_id: "account_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        is_active: true,
                        name: "name",
                        price: 1.1,
                        prices: [
                            {
                                currency: "currency",
                                external_price_id: "external_price_id",
                                id: "id",
                                interval: "interval",
                                price: 1,
                                scheme: "scheme",
                            },
                        ],
                        product_id: "product_id",
                        quantity: 1.1,
                        subscription_count: 1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    charge_type: "charge_type",
                    company_count: 1,
                    controlled_by: "controlled_by",
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    features: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            description: "description",
                            feature_type: "feature_type",
                            flags: [
                                {
                                    created_at: "2024-01-15T09:30:00Z",
                                    default_value: true,
                                    description: "description",
                                    flag_type: "flag_type",
                                    id: "id",
                                    key: "key",
                                    name: "name",
                                    rules: [
                                        {
                                            condition_groups: [
                                                {
                                                    conditions: [
                                                        {
                                                            condition_type: "condition_type",
                                                            created_at: "2024-01-15T09:30:00Z",
                                                            environment_id: "environment_id",
                                                            id: "id",
                                                            operator: "operator",
                                                            resource_ids: ["resource_ids"],
                                                            resources: [
                                                                {
                                                                    id: "id",
                                                                    name: "name",
                                                                },
                                                            ],
                                                            rule_id: "rule_id",
                                                            trait_value: "trait_value",
                                                            updated_at: "2024-01-15T09:30:00Z",
                                                        },
                                                    ],
                                                    created_at: "2024-01-15T09:30:00Z",
                                                    environment_id: "environment_id",
                                                    id: "id",
                                                    rule_id: "rule_id",
                                                    updated_at: "2024-01-15T09:30:00Z",
                                                },
                                            ],
                                            conditions: [
                                                {
                                                    condition_type: "condition_type",
                                                    created_at: "2024-01-15T09:30:00Z",
                                                    environment_id: "environment_id",
                                                    id: "id",
                                                    operator: "operator",
                                                    resource_ids: ["resource_ids"],
                                                    resources: [
                                                        {
                                                            id: "id",
                                                            name: "name",
                                                        },
                                                    ],
                                                    rule_id: "rule_id",
                                                    trait_value: "trait_value",
                                                    updated_at: "2024-01-15T09:30:00Z",
                                                },
                                            ],
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            name: "name",
                                            priority: 1,
                                            rule_type: "rule_type",
                                            updated_at: "2024-01-15T09:30:00Z",
                                            value: true,
                                        },
                                    ],
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                            ],
                            icon: "icon",
                            id: "id",
                            name: "name",
                            plans: [
                                {
                                    id: "id",
                                    name: "name",
                                },
                            ],
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    icon: "icon",
                    id: "id",
                    included_credit_grants: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            credit_amount: 1,
                            credit_id: "credit_id",
                            credit_name: "credit_name",
                            id: "id",
                            plan_id: "plan_id",
                            plan_name: "plan_name",
                            reset_cadence: "reset_cadence",
                            reset_start: "reset_start",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    is_default: true,
                    is_free: true,
                    is_trialable: true,
                    monthly_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    name: "name",
                    one_time_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    plan_type: "plan_type",
                    trial_days: 1,
                    updated_at: "2024-01-15T09:30:00Z",
                    yearly_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                },
                selected_usage_based_entitlements: [
                    {
                        feature_id: "feature_id",
                        value_type: "value_type",
                    },
                ],
                subscription: {
                    cancel_at: "2024-01-15T09:30:00Z",
                    cancel_at_period_end: true,
                    currency: "currency",
                    customer_external_id: "customer_external_id",
                    discounts: [
                        {
                            coupon_id: "coupon_id",
                            coupon_name: "coupon_name",
                            discount_external_id: "discount_external_id",
                            duration: "duration",
                            is_active: true,
                            started_at: "2024-01-15T09:30:00Z",
                            subscription_external_id: "subscription_external_id",
                        },
                    ],
                    expired_at: "2024-01-15T09:30:00Z",
                    interval: "interval",
                    latest_invoice: {
                        amount_due: 1,
                        amount_paid: 1,
                        amount_remaining: 1,
                        collection_method: "collection_method",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        id: "id",
                        subtotal: 1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    products: [
                        {
                            billing_scheme: "billing_scheme",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            interval: "interval",
                            name: "name",
                            package_size: 1,
                            price: 1,
                            price_external_id: "price_external_id",
                            price_id: "price_id",
                            price_tier: [{}],
                            quantity: 1.1,
                            subscription_id: "subscription_id",
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_type: "usage_type",
                        },
                    ],
                    status: "status",
                    subscription_external_id: "subscription_external_id",
                    total_price: 1,
                    trial_end: "2024-01-15T09:30:00Z",
                },
            },
            params: {
                key: "value",
            },
        });
    });

    test("getCheckoutData (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { company_id: "company_id" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/checkout-internal/data")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkout.getCheckoutData({
                company_id: "company_id",
            });
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("getCheckoutData (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { company_id: "company_id" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/checkout-internal/data")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkout.getCheckoutData({
                company_id: "company_id",
            });
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("getCheckoutData (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { company_id: "company_id" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/checkout-internal/data")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkout.getCheckoutData({
                company_id: "company_id",
            });
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("getCheckoutData (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { company_id: "company_id" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/checkout-internal/data")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkout.getCheckoutData({
                company_id: "company_id",
            });
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("getCheckoutData (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { company_id: "company_id" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/checkout-internal/data")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkout.getCheckoutData({
                company_id: "company_id",
            });
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("previewCheckoutInternal (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            add_on_ids: [{ add_on_id: "add_on_id", price_id: "price_id" }],
            company_id: "company_id",
            credit_bundles: [{ bundle_id: "bundle_id", quantity: 1 }],
            new_plan_id: "new_plan_id",
            new_price_id: "new_price_id",
            pay_in_advance: [{ price_id: "price_id", quantity: 1 }],
            skip_trial: true,
        };
        const rawResponseBody = {
            data: {
                amount_off: 1,
                due_now: 1,
                finance: {
                    amount_off: 1,
                    due_now: 1,
                    new_charges: 1,
                    percent_off: 1.1,
                    period_start: "2024-01-15T09:30:00Z",
                    promo_code_applied: true,
                    proration: 1,
                    tax_amount: 1,
                    tax_display_name: "tax_display_name",
                    tax_require_billing_details: true,
                    trial_end: "2024-01-15T09:30:00Z",
                    upcoming_invoice_line_items: [
                        { amount: 1, description: "description", price_id: "price_id", proration: true, quantity: 1 },
                    ],
                },
                new_charges: 1,
                payment_method_required: true,
                percent_off: 1.1,
                period_start: "2024-01-15T09:30:00Z",
                promo_code_applied: true,
                proration: 1,
                usage_violations: [
                    {
                        access: true,
                        allocation_type: "boolean",
                        entitlement_id: "entitlement_id",
                        entitlement_type: "entitlement_type",
                    },
                ],
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/checkout-internal/preview")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.checkout.previewCheckoutInternal({
            add_on_ids: [
                {
                    add_on_id: "add_on_id",
                    price_id: "price_id",
                },
            ],
            company_id: "company_id",
            credit_bundles: [
                {
                    bundle_id: "bundle_id",
                    quantity: 1,
                },
            ],
            new_plan_id: "new_plan_id",
            new_price_id: "new_price_id",
            pay_in_advance: [
                {
                    price_id: "price_id",
                    quantity: 1,
                },
            ],
            skip_trial: true,
        });
        expect(response).toEqual({
            data: {
                amount_off: 1,
                due_now: 1,
                finance: {
                    amount_off: 1,
                    due_now: 1,
                    new_charges: 1,
                    percent_off: 1.1,
                    period_start: "2024-01-15T09:30:00Z",
                    promo_code_applied: true,
                    proration: 1,
                    tax_amount: 1,
                    tax_display_name: "tax_display_name",
                    tax_require_billing_details: true,
                    trial_end: "2024-01-15T09:30:00Z",
                    upcoming_invoice_line_items: [
                        {
                            amount: 1,
                            description: "description",
                            price_id: "price_id",
                            proration: true,
                            quantity: 1,
                        },
                    ],
                },
                new_charges: 1,
                payment_method_required: true,
                percent_off: 1.1,
                period_start: "2024-01-15T09:30:00Z",
                promo_code_applied: true,
                proration: 1,
                usage_violations: [
                    {
                        access: true,
                        allocation_type: "boolean",
                        entitlement_id: "entitlement_id",
                        entitlement_type: "entitlement_type",
                    },
                ],
            },
            params: {
                key: "value",
            },
        });
    });

    test("previewCheckoutInternal (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            add_on_ids: [
                { add_on_id: "add_on_id", price_id: "price_id" },
                { add_on_id: "add_on_id", price_id: "price_id" },
            ],
            company_id: "company_id",
            credit_bundles: [
                { bundle_id: "bundle_id", quantity: 1 },
                { bundle_id: "bundle_id", quantity: 1 },
            ],
            new_plan_id: "new_plan_id",
            new_price_id: "new_price_id",
            pay_in_advance: [
                { price_id: "price_id", quantity: 1 },
                { price_id: "price_id", quantity: 1 },
            ],
            skip_trial: true,
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/checkout-internal/preview")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkout.previewCheckoutInternal({
                add_on_ids: [
                    {
                        add_on_id: "add_on_id",
                        price_id: "price_id",
                    },
                    {
                        add_on_id: "add_on_id",
                        price_id: "price_id",
                    },
                ],
                company_id: "company_id",
                credit_bundles: [
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                ],
                new_plan_id: "new_plan_id",
                new_price_id: "new_price_id",
                pay_in_advance: [
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                ],
                skip_trial: true,
            });
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("previewCheckoutInternal (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            add_on_ids: [
                { add_on_id: "add_on_id", price_id: "price_id" },
                { add_on_id: "add_on_id", price_id: "price_id" },
            ],
            company_id: "company_id",
            credit_bundles: [
                { bundle_id: "bundle_id", quantity: 1 },
                { bundle_id: "bundle_id", quantity: 1 },
            ],
            new_plan_id: "new_plan_id",
            new_price_id: "new_price_id",
            pay_in_advance: [
                { price_id: "price_id", quantity: 1 },
                { price_id: "price_id", quantity: 1 },
            ],
            skip_trial: true,
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/checkout-internal/preview")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkout.previewCheckoutInternal({
                add_on_ids: [
                    {
                        add_on_id: "add_on_id",
                        price_id: "price_id",
                    },
                    {
                        add_on_id: "add_on_id",
                        price_id: "price_id",
                    },
                ],
                company_id: "company_id",
                credit_bundles: [
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                ],
                new_plan_id: "new_plan_id",
                new_price_id: "new_price_id",
                pay_in_advance: [
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                ],
                skip_trial: true,
            });
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("previewCheckoutInternal (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            add_on_ids: [
                { add_on_id: "add_on_id", price_id: "price_id" },
                { add_on_id: "add_on_id", price_id: "price_id" },
            ],
            company_id: "company_id",
            credit_bundles: [
                { bundle_id: "bundle_id", quantity: 1 },
                { bundle_id: "bundle_id", quantity: 1 },
            ],
            new_plan_id: "new_plan_id",
            new_price_id: "new_price_id",
            pay_in_advance: [
                { price_id: "price_id", quantity: 1 },
                { price_id: "price_id", quantity: 1 },
            ],
            skip_trial: true,
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/checkout-internal/preview")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkout.previewCheckoutInternal({
                add_on_ids: [
                    {
                        add_on_id: "add_on_id",
                        price_id: "price_id",
                    },
                    {
                        add_on_id: "add_on_id",
                        price_id: "price_id",
                    },
                ],
                company_id: "company_id",
                credit_bundles: [
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                ],
                new_plan_id: "new_plan_id",
                new_price_id: "new_price_id",
                pay_in_advance: [
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                ],
                skip_trial: true,
            });
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("previewCheckoutInternal (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            add_on_ids: [
                { add_on_id: "add_on_id", price_id: "price_id" },
                { add_on_id: "add_on_id", price_id: "price_id" },
            ],
            company_id: "company_id",
            credit_bundles: [
                { bundle_id: "bundle_id", quantity: 1 },
                { bundle_id: "bundle_id", quantity: 1 },
            ],
            new_plan_id: "new_plan_id",
            new_price_id: "new_price_id",
            pay_in_advance: [
                { price_id: "price_id", quantity: 1 },
                { price_id: "price_id", quantity: 1 },
            ],
            skip_trial: true,
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/checkout-internal/preview")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkout.previewCheckoutInternal({
                add_on_ids: [
                    {
                        add_on_id: "add_on_id",
                        price_id: "price_id",
                    },
                    {
                        add_on_id: "add_on_id",
                        price_id: "price_id",
                    },
                ],
                company_id: "company_id",
                credit_bundles: [
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                ],
                new_plan_id: "new_plan_id",
                new_price_id: "new_price_id",
                pay_in_advance: [
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                ],
                skip_trial: true,
            });
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("previewCheckoutInternal (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            add_on_ids: [
                { add_on_id: "add_on_id", price_id: "price_id" },
                { add_on_id: "add_on_id", price_id: "price_id" },
            ],
            company_id: "company_id",
            credit_bundles: [
                { bundle_id: "bundle_id", quantity: 1 },
                { bundle_id: "bundle_id", quantity: 1 },
            ],
            new_plan_id: "new_plan_id",
            new_price_id: "new_price_id",
            pay_in_advance: [
                { price_id: "price_id", quantity: 1 },
                { price_id: "price_id", quantity: 1 },
            ],
            skip_trial: true,
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/checkout-internal/preview")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkout.previewCheckoutInternal({
                add_on_ids: [
                    {
                        add_on_id: "add_on_id",
                        price_id: "price_id",
                    },
                    {
                        add_on_id: "add_on_id",
                        price_id: "price_id",
                    },
                ],
                company_id: "company_id",
                credit_bundles: [
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                ],
                new_plan_id: "new_plan_id",
                new_price_id: "new_price_id",
                pay_in_advance: [
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                ],
                skip_trial: true,
            });
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("managePlan (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            add_on_selections: [{ plan_id: "plan_id" }],
            company_id: "company_id",
            credit_bundles: [{ bundle_id: "bundle_id", quantity: 1 }],
            pay_in_advance_entitlements: [{ price_id: "price_id", quantity: 1 }],
        };
        const rawResponseBody = {
            data: {
                company: {
                    add_ons: [{ id: "id", name: "name" }],
                    billing_credit_balances: { key: 1.1 },
                    billing_subscription: {
                        cancel_at_period_end: true,
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        discounts: [
                            {
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                is_active: true,
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        id: "id",
                        interval: "interval",
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                    },
                    billing_subscriptions: [
                        {
                            cancel_at_period_end: true,
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            customer_external_id: "customer_external_id",
                            discounts: [
                                {
                                    coupon_id: "coupon_id",
                                    coupon_name: "coupon_name",
                                    discount_external_id: "discount_external_id",
                                    duration: "duration",
                                    is_active: true,
                                    started_at: "2024-01-15T09:30:00Z",
                                    subscription_external_id: "subscription_external_id",
                                },
                            ],
                            id: "id",
                            interval: "interval",
                            period_end: 1,
                            period_start: 1,
                            products: [
                                {
                                    billing_scheme: "billing_scheme",
                                    created_at: "2024-01-15T09:30:00Z",
                                    currency: "currency",
                                    environment_id: "environment_id",
                                    external_id: "external_id",
                                    id: "id",
                                    interval: "interval",
                                    name: "name",
                                    package_size: 1,
                                    price: 1,
                                    price_external_id: "price_external_id",
                                    price_id: "price_id",
                                    price_tier: [{}],
                                    quantity: 1.1,
                                    subscription_id: "subscription_id",
                                    updated_at: "2024-01-15T09:30:00Z",
                                    usage_type: "usage_type",
                                },
                            ],
                            status: "status",
                            subscription_external_id: "subscription_external_id",
                            total_price: 1,
                        },
                    ],
                    created_at: "2024-01-15T09:30:00Z",
                    default_payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    entity_traits: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            environment_id: "environment_id",
                            id: "id",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    environment_id: "environment_id",
                    id: "id",
                    keys: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            entity_id: "entity_id",
                            entity_type: "entity_type",
                            environment_id: "environment_id",
                            id: "id",
                            key: "key",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    last_seen_at: "2024-01-15T09:30:00Z",
                    logo_url: "logo_url",
                    metrics: [
                        {
                            account_id: "account_id",
                            captured_at_max: "2024-01-15T09:30:00Z",
                            captured_at_min: "2024-01-15T09:30:00Z",
                            company_id: "company_id",
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            event_subtype: "event_subtype",
                            month_reset: "month_reset",
                            period: "period",
                            value: 1,
                        },
                    ],
                    name: "name",
                    payment_methods: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            customer_external_id: "customer_external_id",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            payment_method_type: "payment_method_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    plan: { id: "id", name: "name" },
                    plans: [{ id: "id", name: "name" }],
                    rules: [
                        {
                            account_id: "account_id",
                            condition_groups: [
                                {
                                    conditions: [
                                        {
                                            account_id: "account_id",
                                            condition_type: "condition_type",
                                            environment_id: "environment_id",
                                            id: "id",
                                            operator: "operator",
                                            resource_ids: ["resource_ids"],
                                            trait_value: "trait_value",
                                        },
                                    ],
                                },
                            ],
                            conditions: [
                                {
                                    account_id: "account_id",
                                    condition_type: "condition_type",
                                    environment_id: "environment_id",
                                    id: "id",
                                    operator: "operator",
                                    resource_ids: ["resource_ids"],
                                    trait_value: "trait_value",
                                },
                            ],
                            environment_id: "environment_id",
                            id: "id",
                            name: "name",
                            priority: 1,
                            rule_type: "rule_type",
                            value: true,
                        },
                    ],
                    traits: { key: "value" },
                    updated_at: "2024-01-15T09:30:00Z",
                    user_count: 1,
                },
                success: true,
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/manage-plan")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.checkout.managePlan({
            add_on_selections: [
                {
                    plan_id: "plan_id",
                },
            ],
            company_id: "company_id",
            credit_bundles: [
                {
                    bundle_id: "bundle_id",
                    quantity: 1,
                },
            ],
            pay_in_advance_entitlements: [
                {
                    price_id: "price_id",
                    quantity: 1,
                },
            ],
        });
        expect(response).toEqual({
            data: {
                company: {
                    add_ons: [
                        {
                            id: "id",
                            name: "name",
                        },
                    ],
                    billing_credit_balances: {
                        key: 1.1,
                    },
                    billing_subscription: {
                        cancel_at_period_end: true,
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        discounts: [
                            {
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                is_active: true,
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        id: "id",
                        interval: "interval",
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                    },
                    billing_subscriptions: [
                        {
                            cancel_at_period_end: true,
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            customer_external_id: "customer_external_id",
                            discounts: [
                                {
                                    coupon_id: "coupon_id",
                                    coupon_name: "coupon_name",
                                    discount_external_id: "discount_external_id",
                                    duration: "duration",
                                    is_active: true,
                                    started_at: "2024-01-15T09:30:00Z",
                                    subscription_external_id: "subscription_external_id",
                                },
                            ],
                            id: "id",
                            interval: "interval",
                            period_end: 1,
                            period_start: 1,
                            products: [
                                {
                                    billing_scheme: "billing_scheme",
                                    created_at: "2024-01-15T09:30:00Z",
                                    currency: "currency",
                                    environment_id: "environment_id",
                                    external_id: "external_id",
                                    id: "id",
                                    interval: "interval",
                                    name: "name",
                                    package_size: 1,
                                    price: 1,
                                    price_external_id: "price_external_id",
                                    price_id: "price_id",
                                    price_tier: [{}],
                                    quantity: 1.1,
                                    subscription_id: "subscription_id",
                                    updated_at: "2024-01-15T09:30:00Z",
                                    usage_type: "usage_type",
                                },
                            ],
                            status: "status",
                            subscription_external_id: "subscription_external_id",
                            total_price: 1,
                        },
                    ],
                    created_at: "2024-01-15T09:30:00Z",
                    default_payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    entity_traits: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            environment_id: "environment_id",
                            id: "id",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    environment_id: "environment_id",
                    id: "id",
                    keys: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            entity_id: "entity_id",
                            entity_type: "entity_type",
                            environment_id: "environment_id",
                            id: "id",
                            key: "key",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    last_seen_at: "2024-01-15T09:30:00Z",
                    logo_url: "logo_url",
                    metrics: [
                        {
                            account_id: "account_id",
                            captured_at_max: "2024-01-15T09:30:00Z",
                            captured_at_min: "2024-01-15T09:30:00Z",
                            company_id: "company_id",
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            event_subtype: "event_subtype",
                            month_reset: "month_reset",
                            period: "period",
                            value: 1,
                        },
                    ],
                    name: "name",
                    payment_methods: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            customer_external_id: "customer_external_id",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            payment_method_type: "payment_method_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    plan: {
                        id: "id",
                        name: "name",
                    },
                    plans: [
                        {
                            id: "id",
                            name: "name",
                        },
                    ],
                    rules: [
                        {
                            account_id: "account_id",
                            condition_groups: [
                                {
                                    conditions: [
                                        {
                                            account_id: "account_id",
                                            condition_type: "condition_type",
                                            environment_id: "environment_id",
                                            id: "id",
                                            operator: "operator",
                                            resource_ids: ["resource_ids"],
                                            trait_value: "trait_value",
                                        },
                                    ],
                                },
                            ],
                            conditions: [
                                {
                                    account_id: "account_id",
                                    condition_type: "condition_type",
                                    environment_id: "environment_id",
                                    id: "id",
                                    operator: "operator",
                                    resource_ids: ["resource_ids"],
                                    trait_value: "trait_value",
                                },
                            ],
                            environment_id: "environment_id",
                            id: "id",
                            name: "name",
                            priority: 1,
                            rule_type: "rule_type",
                            value: true,
                        },
                    ],
                    traits: {
                        key: "value",
                    },
                    updated_at: "2024-01-15T09:30:00Z",
                    user_count: 1,
                },
                success: true,
            },
            params: {
                key: "value",
            },
        });
    });

    test("managePlan (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            add_on_selections: [{ plan_id: "plan_id" }, { plan_id: "plan_id" }],
            company_id: "company_id",
            credit_bundles: [
                { bundle_id: "bundle_id", quantity: 1 },
                { bundle_id: "bundle_id", quantity: 1 },
            ],
            pay_in_advance_entitlements: [
                { price_id: "price_id", quantity: 1 },
                { price_id: "price_id", quantity: 1 },
            ],
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/manage-plan")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkout.managePlan({
                add_on_selections: [
                    {
                        plan_id: "plan_id",
                    },
                    {
                        plan_id: "plan_id",
                    },
                ],
                company_id: "company_id",
                credit_bundles: [
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                ],
                pay_in_advance_entitlements: [
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                ],
            });
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("managePlan (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            add_on_selections: [{ plan_id: "plan_id" }, { plan_id: "plan_id" }],
            company_id: "company_id",
            credit_bundles: [
                { bundle_id: "bundle_id", quantity: 1 },
                { bundle_id: "bundle_id", quantity: 1 },
            ],
            pay_in_advance_entitlements: [
                { price_id: "price_id", quantity: 1 },
                { price_id: "price_id", quantity: 1 },
            ],
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/manage-plan")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkout.managePlan({
                add_on_selections: [
                    {
                        plan_id: "plan_id",
                    },
                    {
                        plan_id: "plan_id",
                    },
                ],
                company_id: "company_id",
                credit_bundles: [
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                ],
                pay_in_advance_entitlements: [
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                ],
            });
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("managePlan (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            add_on_selections: [{ plan_id: "plan_id" }, { plan_id: "plan_id" }],
            company_id: "company_id",
            credit_bundles: [
                { bundle_id: "bundle_id", quantity: 1 },
                { bundle_id: "bundle_id", quantity: 1 },
            ],
            pay_in_advance_entitlements: [
                { price_id: "price_id", quantity: 1 },
                { price_id: "price_id", quantity: 1 },
            ],
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/manage-plan")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkout.managePlan({
                add_on_selections: [
                    {
                        plan_id: "plan_id",
                    },
                    {
                        plan_id: "plan_id",
                    },
                ],
                company_id: "company_id",
                credit_bundles: [
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                ],
                pay_in_advance_entitlements: [
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                ],
            });
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("managePlan (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            add_on_selections: [{ plan_id: "plan_id" }, { plan_id: "plan_id" }],
            company_id: "company_id",
            credit_bundles: [
                { bundle_id: "bundle_id", quantity: 1 },
                { bundle_id: "bundle_id", quantity: 1 },
            ],
            pay_in_advance_entitlements: [
                { price_id: "price_id", quantity: 1 },
                { price_id: "price_id", quantity: 1 },
            ],
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/manage-plan")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkout.managePlan({
                add_on_selections: [
                    {
                        plan_id: "plan_id",
                    },
                    {
                        plan_id: "plan_id",
                    },
                ],
                company_id: "company_id",
                credit_bundles: [
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                ],
                pay_in_advance_entitlements: [
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                ],
            });
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("managePlan (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            add_on_selections: [{ plan_id: "plan_id" }, { plan_id: "plan_id" }],
            company_id: "company_id",
            credit_bundles: [
                { bundle_id: "bundle_id", quantity: 1 },
                { bundle_id: "bundle_id", quantity: 1 },
            ],
            pay_in_advance_entitlements: [
                { price_id: "price_id", quantity: 1 },
                { price_id: "price_id", quantity: 1 },
            ],
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/manage-plan")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkout.managePlan({
                add_on_selections: [
                    {
                        plan_id: "plan_id",
                    },
                    {
                        plan_id: "plan_id",
                    },
                ],
                company_id: "company_id",
                credit_bundles: [
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                ],
                pay_in_advance_entitlements: [
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                ],
            });
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("previewManagePlan (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            add_on_selections: [{ plan_id: "plan_id" }],
            company_id: "company_id",
            credit_bundles: [{ bundle_id: "bundle_id", quantity: 1 }],
            pay_in_advance_entitlements: [{ price_id: "price_id", quantity: 1 }],
        };
        const rawResponseBody = {
            data: {
                subscription_change_preview: {
                    amount_off: 1,
                    due_now: 1,
                    finance: {
                        amount_off: 1,
                        due_now: 1,
                        new_charges: 1,
                        percent_off: 1.1,
                        period_start: "2024-01-15T09:30:00Z",
                        promo_code_applied: true,
                        proration: 1,
                        tax_require_billing_details: true,
                        upcoming_invoice_line_items: [
                            {
                                amount: 1,
                                description: "description",
                                price_id: "price_id",
                                proration: true,
                                quantity: 1,
                            },
                        ],
                    },
                    new_charges: 1,
                    payment_method_required: true,
                    percent_off: 1.1,
                    period_start: "2024-01-15T09:30:00Z",
                    promo_code_applied: true,
                    proration: 1,
                    usage_violations: [
                        {
                            access: true,
                            allocation_type: "boolean",
                            entitlement_id: "entitlement_id",
                            entitlement_type: "entitlement_type",
                        },
                    ],
                },
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/manage-plan/preview")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.checkout.previewManagePlan({
            add_on_selections: [
                {
                    plan_id: "plan_id",
                },
            ],
            company_id: "company_id",
            credit_bundles: [
                {
                    bundle_id: "bundle_id",
                    quantity: 1,
                },
            ],
            pay_in_advance_entitlements: [
                {
                    price_id: "price_id",
                    quantity: 1,
                },
            ],
        });
        expect(response).toEqual({
            data: {
                subscription_change_preview: {
                    amount_off: 1,
                    due_now: 1,
                    finance: {
                        amount_off: 1,
                        due_now: 1,
                        new_charges: 1,
                        percent_off: 1.1,
                        period_start: "2024-01-15T09:30:00Z",
                        promo_code_applied: true,
                        proration: 1,
                        tax_require_billing_details: true,
                        upcoming_invoice_line_items: [
                            {
                                amount: 1,
                                description: "description",
                                price_id: "price_id",
                                proration: true,
                                quantity: 1,
                            },
                        ],
                    },
                    new_charges: 1,
                    payment_method_required: true,
                    percent_off: 1.1,
                    period_start: "2024-01-15T09:30:00Z",
                    promo_code_applied: true,
                    proration: 1,
                    usage_violations: [
                        {
                            access: true,
                            allocation_type: "boolean",
                            entitlement_id: "entitlement_id",
                            entitlement_type: "entitlement_type",
                        },
                    ],
                },
            },
            params: {
                key: "value",
            },
        });
    });

    test("previewManagePlan (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            add_on_selections: [{ plan_id: "plan_id" }, { plan_id: "plan_id" }],
            company_id: "company_id",
            credit_bundles: [
                { bundle_id: "bundle_id", quantity: 1 },
                { bundle_id: "bundle_id", quantity: 1 },
            ],
            pay_in_advance_entitlements: [
                { price_id: "price_id", quantity: 1 },
                { price_id: "price_id", quantity: 1 },
            ],
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/manage-plan/preview")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkout.previewManagePlan({
                add_on_selections: [
                    {
                        plan_id: "plan_id",
                    },
                    {
                        plan_id: "plan_id",
                    },
                ],
                company_id: "company_id",
                credit_bundles: [
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                ],
                pay_in_advance_entitlements: [
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                ],
            });
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("previewManagePlan (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            add_on_selections: [{ plan_id: "plan_id" }, { plan_id: "plan_id" }],
            company_id: "company_id",
            credit_bundles: [
                { bundle_id: "bundle_id", quantity: 1 },
                { bundle_id: "bundle_id", quantity: 1 },
            ],
            pay_in_advance_entitlements: [
                { price_id: "price_id", quantity: 1 },
                { price_id: "price_id", quantity: 1 },
            ],
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/manage-plan/preview")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkout.previewManagePlan({
                add_on_selections: [
                    {
                        plan_id: "plan_id",
                    },
                    {
                        plan_id: "plan_id",
                    },
                ],
                company_id: "company_id",
                credit_bundles: [
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                ],
                pay_in_advance_entitlements: [
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                ],
            });
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("previewManagePlan (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            add_on_selections: [{ plan_id: "plan_id" }, { plan_id: "plan_id" }],
            company_id: "company_id",
            credit_bundles: [
                { bundle_id: "bundle_id", quantity: 1 },
                { bundle_id: "bundle_id", quantity: 1 },
            ],
            pay_in_advance_entitlements: [
                { price_id: "price_id", quantity: 1 },
                { price_id: "price_id", quantity: 1 },
            ],
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/manage-plan/preview")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkout.previewManagePlan({
                add_on_selections: [
                    {
                        plan_id: "plan_id",
                    },
                    {
                        plan_id: "plan_id",
                    },
                ],
                company_id: "company_id",
                credit_bundles: [
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                ],
                pay_in_advance_entitlements: [
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                ],
            });
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("previewManagePlan (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            add_on_selections: [{ plan_id: "plan_id" }, { plan_id: "plan_id" }],
            company_id: "company_id",
            credit_bundles: [
                { bundle_id: "bundle_id", quantity: 1 },
                { bundle_id: "bundle_id", quantity: 1 },
            ],
            pay_in_advance_entitlements: [
                { price_id: "price_id", quantity: 1 },
                { price_id: "price_id", quantity: 1 },
            ],
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/manage-plan/preview")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkout.previewManagePlan({
                add_on_selections: [
                    {
                        plan_id: "plan_id",
                    },
                    {
                        plan_id: "plan_id",
                    },
                ],
                company_id: "company_id",
                credit_bundles: [
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                ],
                pay_in_advance_entitlements: [
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                ],
            });
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("previewManagePlan (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            add_on_selections: [{ plan_id: "plan_id" }, { plan_id: "plan_id" }],
            company_id: "company_id",
            credit_bundles: [
                { bundle_id: "bundle_id", quantity: 1 },
                { bundle_id: "bundle_id", quantity: 1 },
            ],
            pay_in_advance_entitlements: [
                { price_id: "price_id", quantity: 1 },
                { price_id: "price_id", quantity: 1 },
            ],
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/manage-plan/preview")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkout.previewManagePlan({
                add_on_selections: [
                    {
                        plan_id: "plan_id",
                    },
                    {
                        plan_id: "plan_id",
                    },
                ],
                company_id: "company_id",
                credit_bundles: [
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                    {
                        bundle_id: "bundle_id",
                        quantity: 1,
                    },
                ],
                pay_in_advance_entitlements: [
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                    {
                        price_id: "price_id",
                        quantity: 1,
                    },
                ],
            });
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("updateCustomerSubscriptionTrialEnd (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            data: {
                cancel_at: 1,
                cancel_at_period_end: true,
                company_id: "company_id",
                created_at: "2024-01-15T09:30:00Z",
                currency: "currency",
                customer_external_id: "customer_external_id",
                default_payment_method_id: "default_payment_method_id",
                discounts: [
                    {
                        coupon_id: "coupon_id",
                        coupon_name: "coupon_name",
                        discount_external_id: "discount_external_id",
                        duration: "duration",
                        is_active: true,
                        started_at: "2024-01-15T09:30:00Z",
                        subscription_external_id: "subscription_external_id",
                    },
                ],
                expired_at: "2024-01-15T09:30:00Z",
                id: "id",
                interval: "interval",
                latest_invoice: {
                    amount_due: 1,
                    amount_paid: 1,
                    amount_remaining: 1,
                    collection_method: "collection_method",
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    customer_external_id: "customer_external_id",
                    due_date: "2024-01-15T09:30:00Z",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    id: "id",
                    payment_method_external_id: "payment_method_external_id",
                    subscription_external_id: "subscription_external_id",
                    subtotal: 1,
                    updated_at: "2024-01-15T09:30:00Z",
                    url: "url",
                },
                metadata: { key: "value" },
                payment_method: {
                    account_last4: "account_last4",
                    account_name: "account_name",
                    bank_name: "bank_name",
                    billing_email: "billing_email",
                    billing_name: "billing_name",
                    card_brand: "card_brand",
                    card_exp_month: 1,
                    card_exp_year: 1,
                    card_last4: "card_last4",
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    customer_external_id: "customer_external_id",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    id: "id",
                    payment_method_type: "payment_method_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                period_end: 1,
                period_start: 1,
                products: [
                    {
                        billing_scheme: "billing_scheme",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        interval: "interval",
                        name: "name",
                        package_size: 1,
                        price: 1,
                        price_external_id: "price_external_id",
                        price_id: "price_id",
                        price_tier: [{}],
                        quantity: 1.1,
                        subscription_id: "subscription_id",
                        updated_at: "2024-01-15T09:30:00Z",
                        usage_type: "usage_type",
                    },
                ],
                status: "status",
                subscription_external_id: "subscription_external_id",
                total_price: 1,
                trial_end: 1,
                trial_end_setting: "trial_end_setting",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .put("/subscription/subscription_id/edit-trial-end")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.checkout.updateCustomerSubscriptionTrialEnd("subscription_id");
        expect(response).toEqual({
            data: {
                cancel_at: 1,
                cancel_at_period_end: true,
                company_id: "company_id",
                created_at: "2024-01-15T09:30:00Z",
                currency: "currency",
                customer_external_id: "customer_external_id",
                default_payment_method_id: "default_payment_method_id",
                discounts: [
                    {
                        coupon_id: "coupon_id",
                        coupon_name: "coupon_name",
                        discount_external_id: "discount_external_id",
                        duration: "duration",
                        is_active: true,
                        started_at: "2024-01-15T09:30:00Z",
                        subscription_external_id: "subscription_external_id",
                    },
                ],
                expired_at: "2024-01-15T09:30:00Z",
                id: "id",
                interval: "interval",
                latest_invoice: {
                    amount_due: 1,
                    amount_paid: 1,
                    amount_remaining: 1,
                    collection_method: "collection_method",
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    customer_external_id: "customer_external_id",
                    due_date: "2024-01-15T09:30:00Z",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    id: "id",
                    payment_method_external_id: "payment_method_external_id",
                    subscription_external_id: "subscription_external_id",
                    subtotal: 1,
                    updated_at: "2024-01-15T09:30:00Z",
                    url: "url",
                },
                metadata: {
                    key: "value",
                },
                payment_method: {
                    account_last4: "account_last4",
                    account_name: "account_name",
                    bank_name: "bank_name",
                    billing_email: "billing_email",
                    billing_name: "billing_name",
                    card_brand: "card_brand",
                    card_exp_month: 1,
                    card_exp_year: 1,
                    card_last4: "card_last4",
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    customer_external_id: "customer_external_id",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    id: "id",
                    payment_method_type: "payment_method_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                period_end: 1,
                period_start: 1,
                products: [
                    {
                        billing_scheme: "billing_scheme",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        interval: "interval",
                        name: "name",
                        package_size: 1,
                        price: 1,
                        price_external_id: "price_external_id",
                        price_id: "price_id",
                        price_tier: [{}],
                        quantity: 1.1,
                        subscription_id: "subscription_id",
                        updated_at: "2024-01-15T09:30:00Z",
                        usage_type: "usage_type",
                    },
                ],
                status: "status",
                subscription_external_id: "subscription_external_id",
                total_price: 1,
                trial_end: 1,
                trial_end_setting: "trial_end_setting",
            },
            params: {
                key: "value",
            },
        });
    });

    test("updateCustomerSubscriptionTrialEnd (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/subscription/subscription_id/edit-trial-end")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkout.updateCustomerSubscriptionTrialEnd("subscription_id");
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("updateCustomerSubscriptionTrialEnd (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/subscription/subscription_id/edit-trial-end")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkout.updateCustomerSubscriptionTrialEnd("subscription_id");
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("updateCustomerSubscriptionTrialEnd (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/subscription/subscription_id/edit-trial-end")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkout.updateCustomerSubscriptionTrialEnd("subscription_id");
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("updateCustomerSubscriptionTrialEnd (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/subscription/subscription_id/edit-trial-end")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkout.updateCustomerSubscriptionTrialEnd("subscription_id");
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("updateCustomerSubscriptionTrialEnd (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/subscription/subscription_id/edit-trial-end")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.checkout.updateCustomerSubscriptionTrialEnd("subscription_id");
        }).rejects.toThrow(Schematic.InternalServerError);
    });
});
