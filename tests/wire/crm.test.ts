/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SchematicClient } from "../../src/Client";

describe("Crm", () => {
    test("upsertDealLineItemAssociation", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { deal_external_id: "deal_external_id", line_item_external_id: "line_item_external_id" };
        const rawResponseBody = {
            data: {
                account_id: "account_id",
                created_at: "2024-01-15T09:30:00Z",
                deal_id: "deal_id",
                environment_id: "environment_id",
                product_external_id: "product_external_id",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/crm/associations/deal-line-item")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.crm.upsertDealLineItemAssociation({
            deal_external_id: "deal_external_id",
            line_item_external_id: "line_item_external_id",
        });
        expect(response).toEqual({
            data: {
                account_id: "account_id",
                created_at: "2024-01-15T09:30:00Z",
                deal_id: "deal_id",
                environment_id: "environment_id",
                product_external_id: "product_external_id",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("upsertLineItem", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            amount: "amount",
            interval: "interval",
            line_item_external_id: "line_item_external_id",
            product_external_id: "product_external_id",
            quantity: 1,
        };
        const rawResponseBody = {
            data: {
                account_id: "account_id",
                created_at: "2024-01-15T09:30:00Z",
                deal_id: "deal_id",
                environment_id: "environment_id",
                product_external_id: "product_external_id",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/crm/deal-line-item/upsert")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.crm.upsertLineItem({
            amount: "amount",
            interval: "interval",
            line_item_external_id: "line_item_external_id",
            product_external_id: "product_external_id",
            quantity: 1,
        });
        expect(response).toEqual({
            data: {
                account_id: "account_id",
                created_at: "2024-01-15T09:30:00Z",
                deal_id: "deal_id",
                environment_id: "environment_id",
                product_external_id: "product_external_id",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("upsertCrmDeal", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            crm_company_key: "crm_company_key",
            crm_type: "crm_type",
            deal_external_id: "deal_external_id",
        };
        const rawResponseBody = {
            data: {
                account_id: "account_id",
                arr: "arr",
                company_external_id: "company_external_id",
                created_at: "2024-01-15T09:30:00Z",
                deal_external_id: "deal_external_id",
                deal_id: "deal_id",
                environment_id: "environment_id",
                mrr: "mrr",
                name: "name",
                product_external_id: "product_external_id",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/crm/deals/upsert")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.crm.upsertCrmDeal({
            crm_company_key: "crm_company_key",
            crm_type: "crm_type",
            deal_external_id: "deal_external_id",
        });
        expect(response).toEqual({
            data: {
                account_id: "account_id",
                arr: "arr",
                company_external_id: "company_external_id",
                created_at: "2024-01-15T09:30:00Z",
                deal_external_id: "deal_external_id",
                deal_id: "deal_id",
                environment_id: "environment_id",
                mrr: "mrr",
                name: "name",
                product_external_id: "product_external_id",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("listCrmProducts", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    account_id: "account_id",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    name: "name",
                    price: "price",
                    product_id: "product_id",
                    quantity: 1.1,
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: { ids: ["ids"], limit: 1, name: "name", offset: 1 },
        };
        server.mockEndpoint().get("/crm/products").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.crm.listCrmProducts();
        expect(response).toEqual({
            data: [
                {
                    account_id: "account_id",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    name: "name",
                    price: "price",
                    product_id: "product_id",
                    quantity: 1.1,
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: {
                ids: ["ids"],
                limit: 1,
                name: "name",
                offset: 1,
            },
        });
    });

    test("upsertCrmProduct", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            currency: "currency",
            description: "description",
            external_id: "external_id",
            interval: "interval",
            name: "name",
            price: "price",
            quantity: 1,
            sku: "sku",
        };
        const rawResponseBody = {
            data: {
                account_id: "account_id",
                created_at: "2024-01-15T09:30:00Z",
                currency: "currency",
                environment_id: "environment_id",
                external_id: "external_id",
                name: "name",
                price: "price",
                product_id: "product_id",
                quantity: 1.1,
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/crm/products/upsert")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.crm.upsertCrmProduct({
            currency: "currency",
            description: "description",
            external_id: "external_id",
            interval: "interval",
            name: "name",
            price: "price",
            quantity: 1,
            sku: "sku",
        });
        expect(response).toEqual({
            data: {
                account_id: "account_id",
                created_at: "2024-01-15T09:30:00Z",
                currency: "currency",
                environment_id: "environment_id",
                external_id: "external_id",
                name: "name",
                price: "price",
                product_id: "product_id",
                quantity: 1.1,
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });
});
