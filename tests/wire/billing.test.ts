/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SchematicClient } from "../../src/Client";

describe("Billing", () => {
    test("listCoupons", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    account_id: "account_id",
                    amount_off: 1,
                    currency: "currency",
                    duration: "duration",
                    duration_in_months: 1,
                    environment_id: "environment_id",
                    external_id: "external_id",
                    id: "id",
                    is_active: true,
                    max_redemptions: 1,
                    metadata: { key: "value" },
                    name: "name",
                    percent_off: 1.1,
                    times_redeemed: 1,
                    valid_from: "2024-01-15T09:30:00Z",
                    valid_until: "2024-01-15T09:30:00Z",
                },
            ],
            params: { is_active: true, limit: 1, offset: 1, q: "q" },
        };
        server.mockEndpoint().get("/billing/coupons").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.billing.listCoupons();
        expect(response).toEqual({
            data: [
                {
                    account_id: "account_id",
                    amount_off: 1,
                    currency: "currency",
                    duration: "duration",
                    duration_in_months: 1,
                    environment_id: "environment_id",
                    external_id: "external_id",
                    id: "id",
                    is_active: true,
                    max_redemptions: 1,
                    metadata: {
                        key: "value",
                    },
                    name: "name",
                    percent_off: 1.1,
                    times_redeemed: 1,
                    valid_from: "2024-01-15T09:30:00Z",
                    valid_until: "2024-01-15T09:30:00Z",
                },
            ],
            params: {
                is_active: true,
                limit: 1,
                offset: 1,
                q: "q",
            },
        });
    });

    test("upsertBillingCoupon", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            amount_off: 1,
            duration: "duration",
            duration_in_months: 1,
            external_id: "external_id",
            max_redemptions: 1,
            name: "name",
            percent_off: 1.1,
            times_redeemed: 1,
        };
        const rawResponseBody = {
            data: {
                account_id: "account_id",
                amount_off: 1,
                currency: "currency",
                duration: "duration",
                duration_in_months: 1,
                environment_id: "environment_id",
                external_id: "external_id",
                id: "id",
                is_active: true,
                max_redemptions: 1,
                metadata: { key: "value" },
                name: "name",
                percent_off: 1.1,
                times_redeemed: 1,
                valid_from: "2024-01-15T09:30:00Z",
                valid_until: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/billing/coupons")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.billing.upsertBillingCoupon({
            amount_off: 1,
            duration: "duration",
            duration_in_months: 1,
            external_id: "external_id",
            max_redemptions: 1,
            name: "name",
            percent_off: 1.1,
            times_redeemed: 1,
        });
        expect(response).toEqual({
            data: {
                account_id: "account_id",
                amount_off: 1,
                currency: "currency",
                duration: "duration",
                duration_in_months: 1,
                environment_id: "environment_id",
                external_id: "external_id",
                id: "id",
                is_active: true,
                max_redemptions: 1,
                metadata: {
                    key: "value",
                },
                name: "name",
                percent_off: 1.1,
                times_redeemed: 1,
                valid_from: "2024-01-15T09:30:00Z",
                valid_until: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("upsertBillingCustomer", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            email: "email",
            external_id: "external_id",
            failed_to_import: true,
            meta: { key: "value" },
            name: "name",
        };
        const rawResponseBody = {
            data: {
                company_id: "company_id",
                deleted_at: "2024-01-15T09:30:00Z",
                email: "email",
                external_id: "external_id",
                failed_to_import: true,
                id: "id",
                name: "name",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/billing/customer/upsert")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.billing.upsertBillingCustomer({
            email: "email",
            external_id: "external_id",
            failed_to_import: true,
            meta: {
                key: "value",
            },
            name: "name",
        });
        expect(response).toEqual({
            data: {
                company_id: "company_id",
                deleted_at: "2024-01-15T09:30:00Z",
                email: "email",
                external_id: "external_id",
                failed_to_import: true,
                id: "id",
                name: "name",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("listCustomersWithSubscriptions", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    company_id: "company_id",
                    deleted_at: "2024-01-15T09:30:00Z",
                    email: "email",
                    external_id: "external_id",
                    failed_to_import: true,
                    id: "id",
                    name: "name",
                    subscriptions: [
                        {
                            currency: "currency",
                            interval: "interval",
                            metered_usage: true,
                            per_unit_price: 1,
                            total_price: 1,
                        },
                    ],
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: { company_ids: ["company_ids"], failed_to_import: true, limit: 1, name: "name", offset: 1, q: "q" },
        };
        server.mockEndpoint().get("/billing/customers").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.billing.listCustomersWithSubscriptions();
        expect(response).toEqual({
            data: [
                {
                    company_id: "company_id",
                    deleted_at: "2024-01-15T09:30:00Z",
                    email: "email",
                    external_id: "external_id",
                    failed_to_import: true,
                    id: "id",
                    name: "name",
                    subscriptions: [
                        {
                            currency: "currency",
                            interval: "interval",
                            metered_usage: true,
                            per_unit_price: 1,
                            total_price: 1,
                        },
                    ],
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: {
                company_ids: ["company_ids"],
                failed_to_import: true,
                limit: 1,
                name: "name",
                offset: 1,
                q: "q",
            },
        });
    });

    test("countCustomers", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: { count: 1 },
            params: { company_ids: ["company_ids"], failed_to_import: true, limit: 1, name: "name", offset: 1, q: "q" },
        };
        server
            .mockEndpoint()
            .get("/billing/customers/count")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.billing.countCustomers();
        expect(response).toEqual({
            data: {
                count: 1,
            },
            params: {
                company_ids: ["company_ids"],
                failed_to_import: true,
                limit: 1,
                name: "name",
                offset: 1,
                q: "q",
            },
        });
    });

    test("listInvoices", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    amount_due: 1,
                    amount_paid: 1,
                    amount_remaining: 1,
                    collection_method: "collection_method",
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    customer_external_id: "customer_external_id",
                    due_date: "2024-01-15T09:30:00Z",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    id: "id",
                    payment_method_external_id: "payment_method_external_id",
                    subscription_external_id: "subscription_external_id",
                    subtotal: 1,
                    updated_at: "2024-01-15T09:30:00Z",
                    url: "url",
                },
            ],
            params: {
                company_id: "company_id",
                customer_external_id: "customer_external_id",
                limit: 1,
                offset: 1,
                subscription_external_id: "subscription_external_id",
            },
        };
        server.mockEndpoint().get("/billing/invoices").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.billing.listInvoices({
            customer_external_id: "customer_external_id",
            subscription_external_id: "subscription_external_id",
        });
        expect(response).toEqual({
            data: [
                {
                    amount_due: 1,
                    amount_paid: 1,
                    amount_remaining: 1,
                    collection_method: "collection_method",
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    customer_external_id: "customer_external_id",
                    due_date: "2024-01-15T09:30:00Z",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    id: "id",
                    payment_method_external_id: "payment_method_external_id",
                    subscription_external_id: "subscription_external_id",
                    subtotal: 1,
                    updated_at: "2024-01-15T09:30:00Z",
                    url: "url",
                },
            ],
            params: {
                company_id: "company_id",
                customer_external_id: "customer_external_id",
                limit: 1,
                offset: 1,
                subscription_external_id: "subscription_external_id",
            },
        });
    });

    test("upsertInvoice", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            amount_due: 1,
            amount_paid: 1,
            amount_remaining: 1,
            collection_method: "collection_method",
            currency: "currency",
            customer_external_id: "customer_external_id",
            subtotal: 1,
        };
        const rawResponseBody = {
            data: {
                amount_due: 1,
                amount_paid: 1,
                amount_remaining: 1,
                collection_method: "collection_method",
                company_id: "company_id",
                created_at: "2024-01-15T09:30:00Z",
                currency: "currency",
                customer_external_id: "customer_external_id",
                due_date: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                external_id: "external_id",
                id: "id",
                payment_method_external_id: "payment_method_external_id",
                subscription_external_id: "subscription_external_id",
                subtotal: 1,
                updated_at: "2024-01-15T09:30:00Z",
                url: "url",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/billing/invoices")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.billing.upsertInvoice({
            amount_due: 1,
            amount_paid: 1,
            amount_remaining: 1,
            collection_method: "collection_method",
            currency: "currency",
            customer_external_id: "customer_external_id",
            subtotal: 1,
        });
        expect(response).toEqual({
            data: {
                amount_due: 1,
                amount_paid: 1,
                amount_remaining: 1,
                collection_method: "collection_method",
                company_id: "company_id",
                created_at: "2024-01-15T09:30:00Z",
                currency: "currency",
                customer_external_id: "customer_external_id",
                due_date: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                external_id: "external_id",
                id: "id",
                payment_method_external_id: "payment_method_external_id",
                subscription_external_id: "subscription_external_id",
                subtotal: 1,
                updated_at: "2024-01-15T09:30:00Z",
                url: "url",
            },
            params: {
                key: "value",
            },
        });
    });

    test("listMeters", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    dispaly_name: "dispaly_name",
                    event_name: "event_name",
                    event_payload_key: "event_payload_key",
                    external_price_id: "external_price_id",
                    id: "id",
                },
            ],
            params: { display_name: "display_name", limit: 1, offset: 1 },
        };
        server.mockEndpoint().get("/billing/meter").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.billing.listMeters();
        expect(response).toEqual({
            data: [
                {
                    dispaly_name: "dispaly_name",
                    event_name: "event_name",
                    event_payload_key: "event_payload_key",
                    external_price_id: "external_price_id",
                    id: "id",
                },
            ],
            params: {
                display_name: "display_name",
                limit: 1,
                offset: 1,
            },
        });
    });

    test("upsertBillingMeter", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            display_name: "display_name",
            event_name: "event_name",
            event_payload_key: "event_payload_key",
            external_id: "external_id",
        };
        const rawResponseBody = {
            data: {
                dispaly_name: "dispaly_name",
                event_name: "event_name",
                event_payload_key: "event_payload_key",
                external_price_id: "external_price_id",
                id: "id",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/billing/meter/upsert")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.billing.upsertBillingMeter({
            display_name: "display_name",
            event_name: "event_name",
            event_payload_key: "event_payload_key",
            external_id: "external_id",
        });
        expect(response).toEqual({
            data: {
                dispaly_name: "dispaly_name",
                event_name: "event_name",
                event_payload_key: "event_payload_key",
                external_price_id: "external_price_id",
                id: "id",
            },
            params: {
                key: "value",
            },
        });
    });

    test("listPaymentMethods", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    account_last4: "account_last4",
                    account_name: "account_name",
                    bank_name: "bank_name",
                    billing_email: "billing_email",
                    billing_name: "billing_name",
                    card_brand: "card_brand",
                    card_exp_month: 1,
                    card_exp_year: 1,
                    card_last4: "card_last4",
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    customer_external_id: "customer_external_id",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    id: "id",
                    payment_method_type: "payment_method_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: { company_id: "company_id", customer_external_id: "customer_external_id", limit: 1, offset: 1 },
        };
        server
            .mockEndpoint()
            .get("/billing/payment-methods")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.billing.listPaymentMethods({
            customer_external_id: "customer_external_id",
        });
        expect(response).toEqual({
            data: [
                {
                    account_last4: "account_last4",
                    account_name: "account_name",
                    bank_name: "bank_name",
                    billing_email: "billing_email",
                    billing_name: "billing_name",
                    card_brand: "card_brand",
                    card_exp_month: 1,
                    card_exp_year: 1,
                    card_last4: "card_last4",
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    customer_external_id: "customer_external_id",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    id: "id",
                    payment_method_type: "payment_method_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: {
                company_id: "company_id",
                customer_external_id: "customer_external_id",
                limit: 1,
                offset: 1,
            },
        });
    });

    test("upsertPaymentMethod", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            customer_external_id: "customer_external_id",
            external_id: "external_id",
            payment_method_type: "payment_method_type",
        };
        const rawResponseBody = {
            data: {
                account_last4: "account_last4",
                account_name: "account_name",
                bank_name: "bank_name",
                billing_email: "billing_email",
                billing_name: "billing_name",
                card_brand: "card_brand",
                card_exp_month: 1,
                card_exp_year: 1,
                card_last4: "card_last4",
                company_id: "company_id",
                created_at: "2024-01-15T09:30:00Z",
                customer_external_id: "customer_external_id",
                environment_id: "environment_id",
                external_id: "external_id",
                id: "id",
                payment_method_type: "payment_method_type",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/billing/payment-methods")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.billing.upsertPaymentMethod({
            customer_external_id: "customer_external_id",
            external_id: "external_id",
            payment_method_type: "payment_method_type",
        });
        expect(response).toEqual({
            data: {
                account_last4: "account_last4",
                account_name: "account_name",
                bank_name: "bank_name",
                billing_email: "billing_email",
                billing_name: "billing_name",
                card_brand: "card_brand",
                card_exp_month: 1,
                card_exp_year: 1,
                card_last4: "card_last4",
                company_id: "company_id",
                created_at: "2024-01-15T09:30:00Z",
                customer_external_id: "customer_external_id",
                environment_id: "environment_id",
                external_id: "external_id",
                id: "id",
                payment_method_type: "payment_method_type",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("searchBillingPrices", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    billing_scheme: "billing_scheme",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    id: "id",
                    interval: "interval",
                    is_active: true,
                    meter_event_name: "meter_event_name",
                    meter_event_payload_key: "meter_event_payload_key",
                    meter_id: "meter_id",
                    package_size: 1,
                    price: 1,
                    price_decimal: "price_decimal",
                    price_external_id: "price_external_id",
                    price_id: "price_id",
                    price_tier: [{}],
                    product_external_id: "product_external_id",
                    product_id: "product_id",
                    product_name: "product_name",
                    tiers_mode: "tiers_mode",
                    updated_at: "2024-01-15T09:30:00Z",
                    usage_type: "usage_type",
                },
            ],
            params: {
                ids: ["ids"],
                interval: "interval",
                limit: 1,
                offset: 1,
                price: 1,
                q: "q",
                tiers_mode: "volume",
                usage_type: "licensed",
            },
        };
        server.mockEndpoint().get("/billing/price").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.billing.searchBillingPrices();
        expect(response).toEqual({
            data: [
                {
                    billing_scheme: "billing_scheme",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    id: "id",
                    interval: "interval",
                    is_active: true,
                    meter_event_name: "meter_event_name",
                    meter_event_payload_key: "meter_event_payload_key",
                    meter_id: "meter_id",
                    package_size: 1,
                    price: 1,
                    price_decimal: "price_decimal",
                    price_external_id: "price_external_id",
                    price_id: "price_id",
                    price_tier: [{}],
                    product_external_id: "product_external_id",
                    product_id: "product_id",
                    product_name: "product_name",
                    tiers_mode: "tiers_mode",
                    updated_at: "2024-01-15T09:30:00Z",
                    usage_type: "usage_type",
                },
            ],
            params: {
                ids: ["ids"],
                interval: "interval",
                limit: 1,
                offset: 1,
                price: 1,
                q: "q",
                tiers_mode: "volume",
                usage_type: "licensed",
            },
        });
    });

    test("upsertBillingPrice", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            billing_scheme: "per_unit",
            currency: "currency",
            external_account_id: "external_account_id",
            interval: "interval",
            is_active: true,
            price: 1,
            price_external_id: "price_external_id",
            price_tiers: [{ price_external_id: "price_external_id" }],
            product_external_id: "product_external_id",
            usage_type: "licensed",
        };
        const rawResponseBody = {
            data: {
                currency: "currency",
                external_price_id: "external_price_id",
                id: "id",
                interval: "interval",
                price: 1,
                price_decimal: "price_decimal",
                scheme: "scheme",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/billing/price/upsert")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.billing.upsertBillingPrice({
            billing_scheme: "per_unit",
            currency: "currency",
            external_account_id: "external_account_id",
            interval: "interval",
            is_active: true,
            price: 1,
            price_external_id: "price_external_id",
            price_tiers: [
                {
                    price_external_id: "price_external_id",
                },
            ],
            product_external_id: "product_external_id",
            usage_type: "licensed",
        });
        expect(response).toEqual({
            data: {
                currency: "currency",
                external_price_id: "external_price_id",
                id: "id",
                interval: "interval",
                price: 1,
                price_decimal: "price_decimal",
                scheme: "scheme",
            },
            params: {
                key: "value",
            },
        });
    });

    test("deleteBillingProduct", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { data: { deleted: true }, params: { key: "value" } };
        server
            .mockEndpoint()
            .delete("/billing/product/billing_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.billing.deleteBillingProduct("billing_id");
        expect(response).toEqual({
            data: {
                deleted: true,
            },
            params: {
                key: "value",
            },
        });
    });

    test("listProductPrices", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
            ],
            params: {
                ids: ["ids"],
                is_active: true,
                limit: 1,
                name: "name",
                offset: 1,
                price_usage_type: "licensed",
                q: "q",
                with_one_time_charges: true,
                with_prices_only: true,
                with_zero_price: true,
                without_linked_to_plan: true,
            },
        };
        server
            .mockEndpoint()
            .get("/billing/product/prices")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.billing.listProductPrices();
        expect(response).toEqual({
            data: [
                {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
            ],
            params: {
                ids: ["ids"],
                is_active: true,
                limit: 1,
                name: "name",
                offset: 1,
                price_usage_type: "licensed",
                q: "q",
                with_one_time_charges: true,
                with_prices_only: true,
                with_zero_price: true,
                without_linked_to_plan: true,
            },
        });
    });

    test("deleteProductPrice", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { data: { deleted: true }, params: { key: "value" } };
        server
            .mockEndpoint()
            .delete("/billing/product/prices/billing_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.billing.deleteProductPrice("billing_id");
        expect(response).toEqual({
            data: {
                deleted: true,
            },
            params: {
                key: "value",
            },
        });
    });

    test("upsertBillingProduct", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { external_id: "external_id", name: "name", price: 1.1 };
        const rawResponseBody = {
            data: {
                account_id: "account_id",
                created_at: "2024-01-15T09:30:00Z",
                currency: "currency",
                environment_id: "environment_id",
                external_id: "external_id",
                is_active: true,
                name: "name",
                price: 1.1,
                price_decimal: "price_decimal",
                product_id: "product_id",
                quantity: 1.1,
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/billing/product/upsert")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.billing.upsertBillingProduct({
            external_id: "external_id",
            name: "name",
            price: 1.1,
        });
        expect(response).toEqual({
            data: {
                account_id: "account_id",
                created_at: "2024-01-15T09:30:00Z",
                currency: "currency",
                environment_id: "environment_id",
                external_id: "external_id",
                is_active: true,
                name: "name",
                price: 1.1,
                price_decimal: "price_decimal",
                product_id: "product_id",
                quantity: 1.1,
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("listBillingProducts", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    account_id: "account_id",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    is_active: true,
                    name: "name",
                    price: 1.1,
                    price_decimal: "price_decimal",
                    prices: [
                        {
                            currency: "currency",
                            external_price_id: "external_price_id",
                            id: "id",
                            interval: "interval",
                            price: 1,
                            scheme: "scheme",
                        },
                    ],
                    product_id: "product_id",
                    quantity: 1.1,
                    subscription_count: 1,
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: {
                ids: ["ids"],
                is_active: true,
                limit: 1,
                name: "name",
                offset: 1,
                price_usage_type: "licensed",
                q: "q",
                with_one_time_charges: true,
                with_prices_only: true,
                with_zero_price: true,
                without_linked_to_plan: true,
            },
        };
        server.mockEndpoint().get("/billing/products").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.billing.listBillingProducts();
        expect(response).toEqual({
            data: [
                {
                    account_id: "account_id",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    is_active: true,
                    name: "name",
                    price: 1.1,
                    price_decimal: "price_decimal",
                    prices: [
                        {
                            currency: "currency",
                            external_price_id: "external_price_id",
                            id: "id",
                            interval: "interval",
                            price: 1,
                            scheme: "scheme",
                        },
                    ],
                    product_id: "product_id",
                    quantity: 1.1,
                    subscription_count: 1,
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: {
                ids: ["ids"],
                is_active: true,
                limit: 1,
                name: "name",
                offset: 1,
                price_usage_type: "licensed",
                q: "q",
                with_one_time_charges: true,
                with_prices_only: true,
                with_zero_price: true,
                without_linked_to_plan: true,
            },
        });
    });

    test("countBillingProducts", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: { count: 1 },
            params: {
                ids: ["ids"],
                is_active: true,
                limit: 1,
                name: "name",
                offset: 1,
                price_usage_type: "licensed",
                q: "q",
                with_one_time_charges: true,
                with_prices_only: true,
                with_zero_price: true,
                without_linked_to_plan: true,
            },
        };
        server
            .mockEndpoint()
            .get("/billing/products/count")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.billing.countBillingProducts();
        expect(response).toEqual({
            data: {
                count: 1,
            },
            params: {
                ids: ["ids"],
                is_active: true,
                limit: 1,
                name: "name",
                offset: 1,
                price_usage_type: "licensed",
                q: "q",
                with_one_time_charges: true,
                with_prices_only: true,
                with_zero_price: true,
                without_linked_to_plan: true,
            },
        });
    });

    test("upsertBillingSubscription", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            cancel_at_period_end: true,
            currency: "currency",
            customer_external_id: "customer_external_id",
            discounts: [
                {
                    coupon_external_id: "coupon_external_id",
                    external_id: "external_id",
                    is_active: true,
                    started_at: "2024-01-15T09:30:00Z",
                },
            ],
            expired_at: "2024-01-15T09:30:00Z",
            product_external_ids: [
                {
                    currency: "currency",
                    interval: "interval",
                    price: 1,
                    price_external_id: "price_external_id",
                    product_external_id: "product_external_id",
                    quantity: 1,
                    usage_type: "licensed",
                },
            ],
            subscription_external_id: "subscription_external_id",
            total_price: 1,
        };
        const rawResponseBody = {
            data: {
                cancel_at: 1,
                cancel_at_period_end: true,
                company_id: "company_id",
                created_at: "2024-01-15T09:30:00Z",
                currency: "currency",
                customer_external_id: "customer_external_id",
                default_payment_method_id: "default_payment_method_id",
                expired_at: "2024-01-15T09:30:00Z",
                id: "id",
                interval: "interval",
                metadata: { key: "value" },
                period_end: 1,
                period_start: 1,
                status: "status",
                subscription_external_id: "subscription_external_id",
                total_price: 1,
                trial_end: 1,
                trial_end_setting: "trial_end_setting",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/billing/subscription/upsert")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.billing.upsertBillingSubscription({
            cancel_at_period_end: true,
            currency: "currency",
            customer_external_id: "customer_external_id",
            discounts: [
                {
                    coupon_external_id: "coupon_external_id",
                    external_id: "external_id",
                    is_active: true,
                    started_at: "2024-01-15T09:30:00Z",
                },
            ],
            expired_at: "2024-01-15T09:30:00Z",
            product_external_ids: [
                {
                    currency: "currency",
                    interval: "interval",
                    price: 1,
                    price_external_id: "price_external_id",
                    product_external_id: "product_external_id",
                    quantity: 1,
                    usage_type: "licensed",
                },
            ],
            subscription_external_id: "subscription_external_id",
            total_price: 1,
        });
        expect(response).toEqual({
            data: {
                cancel_at: 1,
                cancel_at_period_end: true,
                company_id: "company_id",
                created_at: "2024-01-15T09:30:00Z",
                currency: "currency",
                customer_external_id: "customer_external_id",
                default_payment_method_id: "default_payment_method_id",
                expired_at: "2024-01-15T09:30:00Z",
                id: "id",
                interval: "interval",
                metadata: {
                    key: "value",
                },
                period_end: 1,
                period_start: 1,
                status: "status",
                subscription_external_id: "subscription_external_id",
                total_price: 1,
                trial_end: 1,
                trial_end_setting: "trial_end_setting",
            },
            params: {
                key: "value",
            },
        });
    });
});
