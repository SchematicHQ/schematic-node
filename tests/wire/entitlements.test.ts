// This file was auto-generated by Fern from our API Definition.

import * as Schematic from "../../src/api/index";
import { SchematicClient } from "../../src/Client";
import { mockServerPool } from "../mock-server/MockServerPool";

describe("Entitlements", () => {
    test("listCompanyOverrides (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    company: {
                        add_ons: [{ id: "id", name: "name" }],
                        billing_subscriptions: [
                            {
                                cancel_at_period_end: true,
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                customer_external_id: "customer_external_id",
                                discounts: [
                                    {
                                        coupon_id: "coupon_id",
                                        coupon_name: "coupon_name",
                                        discount_external_id: "discount_external_id",
                                        duration: "duration",
                                        is_active: true,
                                        started_at: "2024-01-15T09:30:00Z",
                                        subscription_external_id: "subscription_external_id",
                                    },
                                ],
                                id: "id",
                                interval: "interval",
                                period_end: 1,
                                period_start: 1,
                                products: [
                                    {
                                        billing_scheme: "billing_scheme",
                                        created_at: "2024-01-15T09:30:00Z",
                                        currency: "currency",
                                        environment_id: "environment_id",
                                        external_id: "external_id",
                                        id: "id",
                                        interval: "interval",
                                        name: "name",
                                        package_size: 1,
                                        price: 1,
                                        price_external_id: "price_external_id",
                                        price_id: "price_id",
                                        price_tier: [{}],
                                        quantity: 1.1,
                                        subscription_id: "subscription_id",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        usage_type: "usage_type",
                                    },
                                ],
                                status: "status",
                                subscription_external_id: "subscription_external_id",
                                total_price: 1,
                            },
                        ],
                        created_at: "2024-01-15T09:30:00Z",
                        entity_traits: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                definition_id: "definition_id",
                                environment_id: "environment_id",
                                id: "id",
                                updated_at: "2024-01-15T09:30:00Z",
                                value: "value",
                            },
                        ],
                        environment_id: "environment_id",
                        id: "id",
                        keys: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                definition_id: "definition_id",
                                entity_id: "entity_id",
                                entity_type: "entity_type",
                                environment_id: "environment_id",
                                id: "id",
                                key: "key",
                                updated_at: "2024-01-15T09:30:00Z",
                                value: "value",
                            },
                        ],
                        metrics: [
                            {
                                account_id: "account_id",
                                captured_at_max: "2024-01-15T09:30:00Z",
                                captured_at_min: "2024-01-15T09:30:00Z",
                                company_id: "company_id",
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                event_subtype: "event_subtype",
                                month_reset: "month_reset",
                                period: "period",
                                value: 1,
                            },
                        ],
                        name: "name",
                        payment_methods: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                customer_external_id: "customer_external_id",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                payment_method_type: "payment_method_type",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        plans: [{ id: "id", name: "name" }],
                        rules: [
                            {
                                account_id: "account_id",
                                condition_groups: [
                                    {
                                        conditions: [
                                            {
                                                account_id: "account_id",
                                                condition_type: "condition_type",
                                                environment_id: "environment_id",
                                                id: "id",
                                                operator: "operator",
                                                resource_ids: ["resource_ids"],
                                                trait_value: "trait_value",
                                            },
                                        ],
                                    },
                                ],
                                conditions: [
                                    {
                                        account_id: "account_id",
                                        condition_type: "condition_type",
                                        environment_id: "environment_id",
                                        id: "id",
                                        operator: "operator",
                                        resource_ids: ["resource_ids"],
                                        trait_value: "trait_value",
                                    },
                                ],
                                environment_id: "environment_id",
                                id: "id",
                                name: "name",
                                priority: 1,
                                rule_type: "rule_type",
                                value: true,
                            },
                        ],
                        updated_at: "2024-01-15T09:30:00Z",
                        user_count: 1,
                    },
                    company_id: "company_id",
                    consumption_rate: 1.1,
                    created_at: "2024-01-15T09:30:00Z",
                    environment_id: "environment_id",
                    expiration_date: "2024-01-15T09:30:00Z",
                    feature: {
                        created_at: "2024-01-15T09:30:00Z",
                        description: "description",
                        feature_type: "feature_type",
                        icon: "icon",
                        id: "id",
                        name: "name",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    feature_id: "feature_id",
                    id: "id",
                    metric_period: "metric_period",
                    metric_period_month_reset: "metric_period_month_reset",
                    notes: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            external_user_id: "external_user_id",
                            external_user_name: "external_user_name",
                            id: "id",
                            note: "note",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    rule_id: "rule_id",
                    rule_id_usage_exceeded: "rule_id_usage_exceeded",
                    updated_at: "2024-01-15T09:30:00Z",
                    value_bool: true,
                    value_numeric: 1,
                    value_trait: {
                        created_at: "2024-01-15T09:30:00Z",
                        display_name: "display_name",
                        entity_type: "entity_type",
                        hierarchy: ["hierarchy"],
                        id: "id",
                        trait_type: "trait_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    value_trait_id: "value_trait_id",
                    value_type: "value_type",
                },
            ],
            params: {
                company_id: "company_id",
                company_ids: ["company_ids"],
                feature_id: "feature_id",
                feature_ids: ["feature_ids"],
                ids: ["ids"],
                limit: 1,
                offset: 1,
                q: "q",
                without_expired: true,
            },
        };
        server.mockEndpoint().get("/company-overrides").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.entitlements.listCompanyOverrides({
            company_id: "company_id",
            feature_id: "feature_id",
            without_expired: true,
            q: "q",
            limit: 1,
            offset: 1,
        });
        expect(response).toEqual({
            data: [
                {
                    company: {
                        add_ons: [
                            {
                                id: "id",
                                name: "name",
                            },
                        ],
                        billing_subscriptions: [
                            {
                                cancel_at_period_end: true,
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                customer_external_id: "customer_external_id",
                                discounts: [
                                    {
                                        coupon_id: "coupon_id",
                                        coupon_name: "coupon_name",
                                        discount_external_id: "discount_external_id",
                                        duration: "duration",
                                        is_active: true,
                                        started_at: "2024-01-15T09:30:00Z",
                                        subscription_external_id: "subscription_external_id",
                                    },
                                ],
                                id: "id",
                                interval: "interval",
                                period_end: 1,
                                period_start: 1,
                                products: [
                                    {
                                        billing_scheme: "billing_scheme",
                                        created_at: "2024-01-15T09:30:00Z",
                                        currency: "currency",
                                        environment_id: "environment_id",
                                        external_id: "external_id",
                                        id: "id",
                                        interval: "interval",
                                        name: "name",
                                        package_size: 1,
                                        price: 1,
                                        price_external_id: "price_external_id",
                                        price_id: "price_id",
                                        price_tier: [{}],
                                        quantity: 1.1,
                                        subscription_id: "subscription_id",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        usage_type: "usage_type",
                                    },
                                ],
                                status: "status",
                                subscription_external_id: "subscription_external_id",
                                total_price: 1,
                            },
                        ],
                        created_at: "2024-01-15T09:30:00Z",
                        entity_traits: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                definition_id: "definition_id",
                                environment_id: "environment_id",
                                id: "id",
                                updated_at: "2024-01-15T09:30:00Z",
                                value: "value",
                            },
                        ],
                        environment_id: "environment_id",
                        id: "id",
                        keys: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                definition_id: "definition_id",
                                entity_id: "entity_id",
                                entity_type: "entity_type",
                                environment_id: "environment_id",
                                id: "id",
                                key: "key",
                                updated_at: "2024-01-15T09:30:00Z",
                                value: "value",
                            },
                        ],
                        metrics: [
                            {
                                account_id: "account_id",
                                captured_at_max: "2024-01-15T09:30:00Z",
                                captured_at_min: "2024-01-15T09:30:00Z",
                                company_id: "company_id",
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                event_subtype: "event_subtype",
                                month_reset: "month_reset",
                                period: "period",
                                value: 1,
                            },
                        ],
                        name: "name",
                        payment_methods: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                customer_external_id: "customer_external_id",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                payment_method_type: "payment_method_type",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        plans: [
                            {
                                id: "id",
                                name: "name",
                            },
                        ],
                        rules: [
                            {
                                account_id: "account_id",
                                condition_groups: [
                                    {
                                        conditions: [
                                            {
                                                account_id: "account_id",
                                                condition_type: "condition_type",
                                                environment_id: "environment_id",
                                                id: "id",
                                                operator: "operator",
                                                resource_ids: ["resource_ids"],
                                                trait_value: "trait_value",
                                            },
                                        ],
                                    },
                                ],
                                conditions: [
                                    {
                                        account_id: "account_id",
                                        condition_type: "condition_type",
                                        environment_id: "environment_id",
                                        id: "id",
                                        operator: "operator",
                                        resource_ids: ["resource_ids"],
                                        trait_value: "trait_value",
                                    },
                                ],
                                environment_id: "environment_id",
                                id: "id",
                                name: "name",
                                priority: 1,
                                rule_type: "rule_type",
                                value: true,
                            },
                        ],
                        updated_at: "2024-01-15T09:30:00Z",
                        user_count: 1,
                    },
                    company_id: "company_id",
                    consumption_rate: 1.1,
                    created_at: "2024-01-15T09:30:00Z",
                    environment_id: "environment_id",
                    expiration_date: "2024-01-15T09:30:00Z",
                    feature: {
                        created_at: "2024-01-15T09:30:00Z",
                        description: "description",
                        feature_type: "feature_type",
                        icon: "icon",
                        id: "id",
                        name: "name",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    feature_id: "feature_id",
                    id: "id",
                    metric_period: "metric_period",
                    metric_period_month_reset: "metric_period_month_reset",
                    notes: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            external_user_id: "external_user_id",
                            external_user_name: "external_user_name",
                            id: "id",
                            note: "note",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    rule_id: "rule_id",
                    rule_id_usage_exceeded: "rule_id_usage_exceeded",
                    updated_at: "2024-01-15T09:30:00Z",
                    value_bool: true,
                    value_numeric: 1,
                    value_trait: {
                        created_at: "2024-01-15T09:30:00Z",
                        display_name: "display_name",
                        entity_type: "entity_type",
                        hierarchy: ["hierarchy"],
                        id: "id",
                        trait_type: "trait_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    value_trait_id: "value_trait_id",
                    value_type: "value_type",
                },
            ],
            params: {
                company_id: "company_id",
                company_ids: ["company_ids"],
                feature_id: "feature_id",
                feature_ids: ["feature_ids"],
                ids: ["ids"],
                limit: 1,
                offset: 1,
                q: "q",
                without_expired: true,
            },
        });
    });

    test("listCompanyOverrides (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/company-overrides").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.entitlements.listCompanyOverrides();
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("listCompanyOverrides (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/company-overrides").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.entitlements.listCompanyOverrides();
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("listCompanyOverrides (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/company-overrides").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.entitlements.listCompanyOverrides();
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("listCompanyOverrides (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/company-overrides").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.entitlements.listCompanyOverrides();
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("listCompanyOverrides (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/company-overrides").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.entitlements.listCompanyOverrides();
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("createCompanyOverride (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { company_id: "company_id", feature_id: "feature_id", value_type: "boolean" };
        const rawResponseBody = {
            data: {
                company: {
                    add_ons: [{ id: "id", name: "name" }],
                    billing_credit_balances: { key: 1.1 },
                    billing_subscription: {
                        cancel_at_period_end: true,
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        discounts: [
                            {
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                is_active: true,
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        id: "id",
                        interval: "interval",
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                    },
                    billing_subscriptions: [
                        {
                            cancel_at_period_end: true,
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            customer_external_id: "customer_external_id",
                            discounts: [
                                {
                                    coupon_id: "coupon_id",
                                    coupon_name: "coupon_name",
                                    discount_external_id: "discount_external_id",
                                    duration: "duration",
                                    is_active: true,
                                    started_at: "2024-01-15T09:30:00Z",
                                    subscription_external_id: "subscription_external_id",
                                },
                            ],
                            id: "id",
                            interval: "interval",
                            period_end: 1,
                            period_start: 1,
                            products: [
                                {
                                    billing_scheme: "billing_scheme",
                                    created_at: "2024-01-15T09:30:00Z",
                                    currency: "currency",
                                    environment_id: "environment_id",
                                    external_id: "external_id",
                                    id: "id",
                                    interval: "interval",
                                    name: "name",
                                    package_size: 1,
                                    price: 1,
                                    price_external_id: "price_external_id",
                                    price_id: "price_id",
                                    price_tier: [{}],
                                    quantity: 1.1,
                                    subscription_id: "subscription_id",
                                    updated_at: "2024-01-15T09:30:00Z",
                                    usage_type: "usage_type",
                                },
                            ],
                            status: "status",
                            subscription_external_id: "subscription_external_id",
                            total_price: 1,
                        },
                    ],
                    created_at: "2024-01-15T09:30:00Z",
                    default_payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    entity_traits: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            environment_id: "environment_id",
                            id: "id",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    environment_id: "environment_id",
                    id: "id",
                    keys: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            entity_id: "entity_id",
                            entity_type: "entity_type",
                            environment_id: "environment_id",
                            id: "id",
                            key: "key",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    last_seen_at: "2024-01-15T09:30:00Z",
                    logo_url: "logo_url",
                    metrics: [
                        {
                            account_id: "account_id",
                            captured_at_max: "2024-01-15T09:30:00Z",
                            captured_at_min: "2024-01-15T09:30:00Z",
                            company_id: "company_id",
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            event_subtype: "event_subtype",
                            month_reset: "month_reset",
                            period: "period",
                            value: 1,
                        },
                    ],
                    name: "name",
                    payment_methods: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            customer_external_id: "customer_external_id",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            payment_method_type: "payment_method_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    plan: { id: "id", name: "name" },
                    plans: [{ id: "id", name: "name" }],
                    rules: [
                        {
                            account_id: "account_id",
                            condition_groups: [
                                {
                                    conditions: [
                                        {
                                            account_id: "account_id",
                                            condition_type: "condition_type",
                                            environment_id: "environment_id",
                                            id: "id",
                                            operator: "operator",
                                            resource_ids: ["resource_ids"],
                                            trait_value: "trait_value",
                                        },
                                    ],
                                },
                            ],
                            conditions: [
                                {
                                    account_id: "account_id",
                                    condition_type: "condition_type",
                                    environment_id: "environment_id",
                                    id: "id",
                                    operator: "operator",
                                    resource_ids: ["resource_ids"],
                                    trait_value: "trait_value",
                                },
                            ],
                            environment_id: "environment_id",
                            id: "id",
                            name: "name",
                            priority: 1,
                            rule_type: "rule_type",
                            value: true,
                        },
                    ],
                    traits: { key: "value" },
                    updated_at: "2024-01-15T09:30:00Z",
                    user_count: 1,
                },
                company_id: "company_id",
                consumption_rate: 1.1,
                created_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                expiration_date: "2024-01-15T09:30:00Z",
                feature: {
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    event_subtype: "event_subtype",
                    feature_type: "feature_type",
                    icon: "icon",
                    id: "id",
                    lifecycle_phase: "lifecycle_phase",
                    maintainer_id: "maintainer_id",
                    name: "name",
                    plural_name: "plural_name",
                    singular_name: "singular_name",
                    trait_id: "trait_id",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                feature_id: "feature_id",
                id: "id",
                metric_period: "metric_period",
                metric_period_month_reset: "metric_period_month_reset",
                notes: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        external_user_id: "external_user_id",
                        external_user_name: "external_user_name",
                        id: "id",
                        note: "note",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                rule_id: "rule_id",
                rule_id_usage_exceeded: "rule_id_usage_exceeded",
                updated_at: "2024-01-15T09:30:00Z",
                value_bool: true,
                value_numeric: 1,
                value_trait: {
                    created_at: "2024-01-15T09:30:00Z",
                    display_name: "display_name",
                    entity_type: "entity_type",
                    hierarchy: ["hierarchy"],
                    id: "id",
                    trait_type: "trait_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                value_trait_id: "value_trait_id",
                value_type: "value_type",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/company-overrides")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entitlements.createCompanyOverride({
            company_id: "company_id",
            feature_id: "feature_id",
            value_type: "boolean",
        });
        expect(response).toEqual({
            data: {
                company: {
                    add_ons: [
                        {
                            id: "id",
                            name: "name",
                        },
                    ],
                    billing_credit_balances: {
                        key: 1.1,
                    },
                    billing_subscription: {
                        cancel_at_period_end: true,
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        discounts: [
                            {
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                is_active: true,
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        id: "id",
                        interval: "interval",
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                    },
                    billing_subscriptions: [
                        {
                            cancel_at_period_end: true,
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            customer_external_id: "customer_external_id",
                            discounts: [
                                {
                                    coupon_id: "coupon_id",
                                    coupon_name: "coupon_name",
                                    discount_external_id: "discount_external_id",
                                    duration: "duration",
                                    is_active: true,
                                    started_at: "2024-01-15T09:30:00Z",
                                    subscription_external_id: "subscription_external_id",
                                },
                            ],
                            id: "id",
                            interval: "interval",
                            period_end: 1,
                            period_start: 1,
                            products: [
                                {
                                    billing_scheme: "billing_scheme",
                                    created_at: "2024-01-15T09:30:00Z",
                                    currency: "currency",
                                    environment_id: "environment_id",
                                    external_id: "external_id",
                                    id: "id",
                                    interval: "interval",
                                    name: "name",
                                    package_size: 1,
                                    price: 1,
                                    price_external_id: "price_external_id",
                                    price_id: "price_id",
                                    price_tier: [{}],
                                    quantity: 1.1,
                                    subscription_id: "subscription_id",
                                    updated_at: "2024-01-15T09:30:00Z",
                                    usage_type: "usage_type",
                                },
                            ],
                            status: "status",
                            subscription_external_id: "subscription_external_id",
                            total_price: 1,
                        },
                    ],
                    created_at: "2024-01-15T09:30:00Z",
                    default_payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    entity_traits: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            environment_id: "environment_id",
                            id: "id",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    environment_id: "environment_id",
                    id: "id",
                    keys: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            entity_id: "entity_id",
                            entity_type: "entity_type",
                            environment_id: "environment_id",
                            id: "id",
                            key: "key",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    last_seen_at: "2024-01-15T09:30:00Z",
                    logo_url: "logo_url",
                    metrics: [
                        {
                            account_id: "account_id",
                            captured_at_max: "2024-01-15T09:30:00Z",
                            captured_at_min: "2024-01-15T09:30:00Z",
                            company_id: "company_id",
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            event_subtype: "event_subtype",
                            month_reset: "month_reset",
                            period: "period",
                            value: 1,
                        },
                    ],
                    name: "name",
                    payment_methods: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            customer_external_id: "customer_external_id",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            payment_method_type: "payment_method_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    plan: {
                        id: "id",
                        name: "name",
                    },
                    plans: [
                        {
                            id: "id",
                            name: "name",
                        },
                    ],
                    rules: [
                        {
                            account_id: "account_id",
                            condition_groups: [
                                {
                                    conditions: [
                                        {
                                            account_id: "account_id",
                                            condition_type: "condition_type",
                                            environment_id: "environment_id",
                                            id: "id",
                                            operator: "operator",
                                            resource_ids: ["resource_ids"],
                                            trait_value: "trait_value",
                                        },
                                    ],
                                },
                            ],
                            conditions: [
                                {
                                    account_id: "account_id",
                                    condition_type: "condition_type",
                                    environment_id: "environment_id",
                                    id: "id",
                                    operator: "operator",
                                    resource_ids: ["resource_ids"],
                                    trait_value: "trait_value",
                                },
                            ],
                            environment_id: "environment_id",
                            id: "id",
                            name: "name",
                            priority: 1,
                            rule_type: "rule_type",
                            value: true,
                        },
                    ],
                    traits: {
                        key: "value",
                    },
                    updated_at: "2024-01-15T09:30:00Z",
                    user_count: 1,
                },
                company_id: "company_id",
                consumption_rate: 1.1,
                created_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                expiration_date: "2024-01-15T09:30:00Z",
                feature: {
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    event_subtype: "event_subtype",
                    feature_type: "feature_type",
                    icon: "icon",
                    id: "id",
                    lifecycle_phase: "lifecycle_phase",
                    maintainer_id: "maintainer_id",
                    name: "name",
                    plural_name: "plural_name",
                    singular_name: "singular_name",
                    trait_id: "trait_id",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                feature_id: "feature_id",
                id: "id",
                metric_period: "metric_period",
                metric_period_month_reset: "metric_period_month_reset",
                notes: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        external_user_id: "external_user_id",
                        external_user_name: "external_user_name",
                        id: "id",
                        note: "note",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                rule_id: "rule_id",
                rule_id_usage_exceeded: "rule_id_usage_exceeded",
                updated_at: "2024-01-15T09:30:00Z",
                value_bool: true,
                value_numeric: 1,
                value_trait: {
                    created_at: "2024-01-15T09:30:00Z",
                    display_name: "display_name",
                    entity_type: "entity_type",
                    hierarchy: ["hierarchy"],
                    id: "id",
                    trait_type: "trait_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                value_trait_id: "value_trait_id",
                value_type: "value_type",
            },
            params: {
                key: "value",
            },
        });
    });

    test("createCompanyOverride (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { company_id: "company_id", feature_id: "feature_id", value_type: "boolean" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/company-overrides")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.createCompanyOverride({
                company_id: "company_id",
                feature_id: "feature_id",
                value_type: "boolean",
            });
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("createCompanyOverride (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { company_id: "company_id", feature_id: "feature_id", value_type: "boolean" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/company-overrides")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.createCompanyOverride({
                company_id: "company_id",
                feature_id: "feature_id",
                value_type: "boolean",
            });
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("createCompanyOverride (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { company_id: "company_id", feature_id: "feature_id", value_type: "boolean" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/company-overrides")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.createCompanyOverride({
                company_id: "company_id",
                feature_id: "feature_id",
                value_type: "boolean",
            });
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("createCompanyOverride (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { company_id: "company_id", feature_id: "feature_id", value_type: "boolean" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/company-overrides")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.createCompanyOverride({
                company_id: "company_id",
                feature_id: "feature_id",
                value_type: "boolean",
            });
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("createCompanyOverride (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { company_id: "company_id", feature_id: "feature_id", value_type: "boolean" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/company-overrides")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.createCompanyOverride({
                company_id: "company_id",
                feature_id: "feature_id",
                value_type: "boolean",
            });
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("getCompanyOverride (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                company: {
                    add_ons: [{ id: "id", name: "name" }],
                    billing_credit_balances: { key: 1.1 },
                    billing_subscription: {
                        cancel_at_period_end: true,
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        discounts: [
                            {
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                is_active: true,
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        id: "id",
                        interval: "interval",
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                    },
                    billing_subscriptions: [
                        {
                            cancel_at_period_end: true,
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            customer_external_id: "customer_external_id",
                            discounts: [
                                {
                                    coupon_id: "coupon_id",
                                    coupon_name: "coupon_name",
                                    discount_external_id: "discount_external_id",
                                    duration: "duration",
                                    is_active: true,
                                    started_at: "2024-01-15T09:30:00Z",
                                    subscription_external_id: "subscription_external_id",
                                },
                            ],
                            id: "id",
                            interval: "interval",
                            period_end: 1,
                            period_start: 1,
                            products: [
                                {
                                    billing_scheme: "billing_scheme",
                                    created_at: "2024-01-15T09:30:00Z",
                                    currency: "currency",
                                    environment_id: "environment_id",
                                    external_id: "external_id",
                                    id: "id",
                                    interval: "interval",
                                    name: "name",
                                    package_size: 1,
                                    price: 1,
                                    price_external_id: "price_external_id",
                                    price_id: "price_id",
                                    price_tier: [{}],
                                    quantity: 1.1,
                                    subscription_id: "subscription_id",
                                    updated_at: "2024-01-15T09:30:00Z",
                                    usage_type: "usage_type",
                                },
                            ],
                            status: "status",
                            subscription_external_id: "subscription_external_id",
                            total_price: 1,
                        },
                    ],
                    created_at: "2024-01-15T09:30:00Z",
                    default_payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    entity_traits: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            environment_id: "environment_id",
                            id: "id",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    environment_id: "environment_id",
                    id: "id",
                    keys: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            entity_id: "entity_id",
                            entity_type: "entity_type",
                            environment_id: "environment_id",
                            id: "id",
                            key: "key",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    last_seen_at: "2024-01-15T09:30:00Z",
                    logo_url: "logo_url",
                    metrics: [
                        {
                            account_id: "account_id",
                            captured_at_max: "2024-01-15T09:30:00Z",
                            captured_at_min: "2024-01-15T09:30:00Z",
                            company_id: "company_id",
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            event_subtype: "event_subtype",
                            month_reset: "month_reset",
                            period: "period",
                            value: 1,
                        },
                    ],
                    name: "name",
                    payment_methods: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            customer_external_id: "customer_external_id",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            payment_method_type: "payment_method_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    plan: { id: "id", name: "name" },
                    plans: [{ id: "id", name: "name" }],
                    rules: [
                        {
                            account_id: "account_id",
                            condition_groups: [
                                {
                                    conditions: [
                                        {
                                            account_id: "account_id",
                                            condition_type: "condition_type",
                                            environment_id: "environment_id",
                                            id: "id",
                                            operator: "operator",
                                            resource_ids: ["resource_ids"],
                                            trait_value: "trait_value",
                                        },
                                    ],
                                },
                            ],
                            conditions: [
                                {
                                    account_id: "account_id",
                                    condition_type: "condition_type",
                                    environment_id: "environment_id",
                                    id: "id",
                                    operator: "operator",
                                    resource_ids: ["resource_ids"],
                                    trait_value: "trait_value",
                                },
                            ],
                            environment_id: "environment_id",
                            id: "id",
                            name: "name",
                            priority: 1,
                            rule_type: "rule_type",
                            value: true,
                        },
                    ],
                    traits: { key: "value" },
                    updated_at: "2024-01-15T09:30:00Z",
                    user_count: 1,
                },
                company_id: "company_id",
                consumption_rate: 1.1,
                created_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                expiration_date: "2024-01-15T09:30:00Z",
                feature: {
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    event_subtype: "event_subtype",
                    feature_type: "feature_type",
                    icon: "icon",
                    id: "id",
                    lifecycle_phase: "lifecycle_phase",
                    maintainer_id: "maintainer_id",
                    name: "name",
                    plural_name: "plural_name",
                    singular_name: "singular_name",
                    trait_id: "trait_id",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                feature_id: "feature_id",
                id: "id",
                metric_period: "metric_period",
                metric_period_month_reset: "metric_period_month_reset",
                notes: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        external_user_id: "external_user_id",
                        external_user_name: "external_user_name",
                        id: "id",
                        note: "note",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                rule_id: "rule_id",
                rule_id_usage_exceeded: "rule_id_usage_exceeded",
                updated_at: "2024-01-15T09:30:00Z",
                value_bool: true,
                value_numeric: 1,
                value_trait: {
                    created_at: "2024-01-15T09:30:00Z",
                    display_name: "display_name",
                    entity_type: "entity_type",
                    hierarchy: ["hierarchy"],
                    id: "id",
                    trait_type: "trait_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                value_trait_id: "value_trait_id",
                value_type: "value_type",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .get("/company-overrides/company_override_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entitlements.getCompanyOverride("company_override_id");
        expect(response).toEqual({
            data: {
                company: {
                    add_ons: [
                        {
                            id: "id",
                            name: "name",
                        },
                    ],
                    billing_credit_balances: {
                        key: 1.1,
                    },
                    billing_subscription: {
                        cancel_at_period_end: true,
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        discounts: [
                            {
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                is_active: true,
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        id: "id",
                        interval: "interval",
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                    },
                    billing_subscriptions: [
                        {
                            cancel_at_period_end: true,
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            customer_external_id: "customer_external_id",
                            discounts: [
                                {
                                    coupon_id: "coupon_id",
                                    coupon_name: "coupon_name",
                                    discount_external_id: "discount_external_id",
                                    duration: "duration",
                                    is_active: true,
                                    started_at: "2024-01-15T09:30:00Z",
                                    subscription_external_id: "subscription_external_id",
                                },
                            ],
                            id: "id",
                            interval: "interval",
                            period_end: 1,
                            period_start: 1,
                            products: [
                                {
                                    billing_scheme: "billing_scheme",
                                    created_at: "2024-01-15T09:30:00Z",
                                    currency: "currency",
                                    environment_id: "environment_id",
                                    external_id: "external_id",
                                    id: "id",
                                    interval: "interval",
                                    name: "name",
                                    package_size: 1,
                                    price: 1,
                                    price_external_id: "price_external_id",
                                    price_id: "price_id",
                                    price_tier: [{}],
                                    quantity: 1.1,
                                    subscription_id: "subscription_id",
                                    updated_at: "2024-01-15T09:30:00Z",
                                    usage_type: "usage_type",
                                },
                            ],
                            status: "status",
                            subscription_external_id: "subscription_external_id",
                            total_price: 1,
                        },
                    ],
                    created_at: "2024-01-15T09:30:00Z",
                    default_payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    entity_traits: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            environment_id: "environment_id",
                            id: "id",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    environment_id: "environment_id",
                    id: "id",
                    keys: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            entity_id: "entity_id",
                            entity_type: "entity_type",
                            environment_id: "environment_id",
                            id: "id",
                            key: "key",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    last_seen_at: "2024-01-15T09:30:00Z",
                    logo_url: "logo_url",
                    metrics: [
                        {
                            account_id: "account_id",
                            captured_at_max: "2024-01-15T09:30:00Z",
                            captured_at_min: "2024-01-15T09:30:00Z",
                            company_id: "company_id",
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            event_subtype: "event_subtype",
                            month_reset: "month_reset",
                            period: "period",
                            value: 1,
                        },
                    ],
                    name: "name",
                    payment_methods: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            customer_external_id: "customer_external_id",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            payment_method_type: "payment_method_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    plan: {
                        id: "id",
                        name: "name",
                    },
                    plans: [
                        {
                            id: "id",
                            name: "name",
                        },
                    ],
                    rules: [
                        {
                            account_id: "account_id",
                            condition_groups: [
                                {
                                    conditions: [
                                        {
                                            account_id: "account_id",
                                            condition_type: "condition_type",
                                            environment_id: "environment_id",
                                            id: "id",
                                            operator: "operator",
                                            resource_ids: ["resource_ids"],
                                            trait_value: "trait_value",
                                        },
                                    ],
                                },
                            ],
                            conditions: [
                                {
                                    account_id: "account_id",
                                    condition_type: "condition_type",
                                    environment_id: "environment_id",
                                    id: "id",
                                    operator: "operator",
                                    resource_ids: ["resource_ids"],
                                    trait_value: "trait_value",
                                },
                            ],
                            environment_id: "environment_id",
                            id: "id",
                            name: "name",
                            priority: 1,
                            rule_type: "rule_type",
                            value: true,
                        },
                    ],
                    traits: {
                        key: "value",
                    },
                    updated_at: "2024-01-15T09:30:00Z",
                    user_count: 1,
                },
                company_id: "company_id",
                consumption_rate: 1.1,
                created_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                expiration_date: "2024-01-15T09:30:00Z",
                feature: {
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    event_subtype: "event_subtype",
                    feature_type: "feature_type",
                    icon: "icon",
                    id: "id",
                    lifecycle_phase: "lifecycle_phase",
                    maintainer_id: "maintainer_id",
                    name: "name",
                    plural_name: "plural_name",
                    singular_name: "singular_name",
                    trait_id: "trait_id",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                feature_id: "feature_id",
                id: "id",
                metric_period: "metric_period",
                metric_period_month_reset: "metric_period_month_reset",
                notes: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        external_user_id: "external_user_id",
                        external_user_name: "external_user_name",
                        id: "id",
                        note: "note",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                rule_id: "rule_id",
                rule_id_usage_exceeded: "rule_id_usage_exceeded",
                updated_at: "2024-01-15T09:30:00Z",
                value_bool: true,
                value_numeric: 1,
                value_trait: {
                    created_at: "2024-01-15T09:30:00Z",
                    display_name: "display_name",
                    entity_type: "entity_type",
                    hierarchy: ["hierarchy"],
                    id: "id",
                    trait_type: "trait_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                value_trait_id: "value_trait_id",
                value_type: "value_type",
            },
            params: {
                key: "value",
            },
        });
    });

    test("getCompanyOverride (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/company-overrides/company_override_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.getCompanyOverride("company_override_id");
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("getCompanyOverride (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/company-overrides/company_override_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.getCompanyOverride("company_override_id");
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("getCompanyOverride (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/company-overrides/company_override_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.getCompanyOverride("company_override_id");
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("getCompanyOverride (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/company-overrides/company_override_id")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.getCompanyOverride("company_override_id");
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("updateCompanyOverride (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { value_type: "boolean" };
        const rawResponseBody = {
            data: {
                company: {
                    add_ons: [{ id: "id", name: "name" }],
                    billing_credit_balances: { key: 1.1 },
                    billing_subscription: {
                        cancel_at_period_end: true,
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        discounts: [
                            {
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                is_active: true,
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        id: "id",
                        interval: "interval",
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                    },
                    billing_subscriptions: [
                        {
                            cancel_at_period_end: true,
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            customer_external_id: "customer_external_id",
                            discounts: [
                                {
                                    coupon_id: "coupon_id",
                                    coupon_name: "coupon_name",
                                    discount_external_id: "discount_external_id",
                                    duration: "duration",
                                    is_active: true,
                                    started_at: "2024-01-15T09:30:00Z",
                                    subscription_external_id: "subscription_external_id",
                                },
                            ],
                            id: "id",
                            interval: "interval",
                            period_end: 1,
                            period_start: 1,
                            products: [
                                {
                                    billing_scheme: "billing_scheme",
                                    created_at: "2024-01-15T09:30:00Z",
                                    currency: "currency",
                                    environment_id: "environment_id",
                                    external_id: "external_id",
                                    id: "id",
                                    interval: "interval",
                                    name: "name",
                                    package_size: 1,
                                    price: 1,
                                    price_external_id: "price_external_id",
                                    price_id: "price_id",
                                    price_tier: [{}],
                                    quantity: 1.1,
                                    subscription_id: "subscription_id",
                                    updated_at: "2024-01-15T09:30:00Z",
                                    usage_type: "usage_type",
                                },
                            ],
                            status: "status",
                            subscription_external_id: "subscription_external_id",
                            total_price: 1,
                        },
                    ],
                    created_at: "2024-01-15T09:30:00Z",
                    default_payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    entity_traits: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            environment_id: "environment_id",
                            id: "id",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    environment_id: "environment_id",
                    id: "id",
                    keys: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            entity_id: "entity_id",
                            entity_type: "entity_type",
                            environment_id: "environment_id",
                            id: "id",
                            key: "key",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    last_seen_at: "2024-01-15T09:30:00Z",
                    logo_url: "logo_url",
                    metrics: [
                        {
                            account_id: "account_id",
                            captured_at_max: "2024-01-15T09:30:00Z",
                            captured_at_min: "2024-01-15T09:30:00Z",
                            company_id: "company_id",
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            event_subtype: "event_subtype",
                            month_reset: "month_reset",
                            period: "period",
                            value: 1,
                        },
                    ],
                    name: "name",
                    payment_methods: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            customer_external_id: "customer_external_id",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            payment_method_type: "payment_method_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    plan: { id: "id", name: "name" },
                    plans: [{ id: "id", name: "name" }],
                    rules: [
                        {
                            account_id: "account_id",
                            condition_groups: [
                                {
                                    conditions: [
                                        {
                                            account_id: "account_id",
                                            condition_type: "condition_type",
                                            environment_id: "environment_id",
                                            id: "id",
                                            operator: "operator",
                                            resource_ids: ["resource_ids"],
                                            trait_value: "trait_value",
                                        },
                                    ],
                                },
                            ],
                            conditions: [
                                {
                                    account_id: "account_id",
                                    condition_type: "condition_type",
                                    environment_id: "environment_id",
                                    id: "id",
                                    operator: "operator",
                                    resource_ids: ["resource_ids"],
                                    trait_value: "trait_value",
                                },
                            ],
                            environment_id: "environment_id",
                            id: "id",
                            name: "name",
                            priority: 1,
                            rule_type: "rule_type",
                            value: true,
                        },
                    ],
                    traits: { key: "value" },
                    updated_at: "2024-01-15T09:30:00Z",
                    user_count: 1,
                },
                company_id: "company_id",
                consumption_rate: 1.1,
                created_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                expiration_date: "2024-01-15T09:30:00Z",
                feature: {
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    event_subtype: "event_subtype",
                    feature_type: "feature_type",
                    icon: "icon",
                    id: "id",
                    lifecycle_phase: "lifecycle_phase",
                    maintainer_id: "maintainer_id",
                    name: "name",
                    plural_name: "plural_name",
                    singular_name: "singular_name",
                    trait_id: "trait_id",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                feature_id: "feature_id",
                id: "id",
                metric_period: "metric_period",
                metric_period_month_reset: "metric_period_month_reset",
                notes: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        external_user_id: "external_user_id",
                        external_user_name: "external_user_name",
                        id: "id",
                        note: "note",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                rule_id: "rule_id",
                rule_id_usage_exceeded: "rule_id_usage_exceeded",
                updated_at: "2024-01-15T09:30:00Z",
                value_bool: true,
                value_numeric: 1,
                value_trait: {
                    created_at: "2024-01-15T09:30:00Z",
                    display_name: "display_name",
                    entity_type: "entity_type",
                    hierarchy: ["hierarchy"],
                    id: "id",
                    trait_type: "trait_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                value_trait_id: "value_trait_id",
                value_type: "value_type",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .put("/company-overrides/company_override_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entitlements.updateCompanyOverride("company_override_id", {
            value_type: "boolean",
        });
        expect(response).toEqual({
            data: {
                company: {
                    add_ons: [
                        {
                            id: "id",
                            name: "name",
                        },
                    ],
                    billing_credit_balances: {
                        key: 1.1,
                    },
                    billing_subscription: {
                        cancel_at_period_end: true,
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        discounts: [
                            {
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                is_active: true,
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        id: "id",
                        interval: "interval",
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                    },
                    billing_subscriptions: [
                        {
                            cancel_at_period_end: true,
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            customer_external_id: "customer_external_id",
                            discounts: [
                                {
                                    coupon_id: "coupon_id",
                                    coupon_name: "coupon_name",
                                    discount_external_id: "discount_external_id",
                                    duration: "duration",
                                    is_active: true,
                                    started_at: "2024-01-15T09:30:00Z",
                                    subscription_external_id: "subscription_external_id",
                                },
                            ],
                            id: "id",
                            interval: "interval",
                            period_end: 1,
                            period_start: 1,
                            products: [
                                {
                                    billing_scheme: "billing_scheme",
                                    created_at: "2024-01-15T09:30:00Z",
                                    currency: "currency",
                                    environment_id: "environment_id",
                                    external_id: "external_id",
                                    id: "id",
                                    interval: "interval",
                                    name: "name",
                                    package_size: 1,
                                    price: 1,
                                    price_external_id: "price_external_id",
                                    price_id: "price_id",
                                    price_tier: [{}],
                                    quantity: 1.1,
                                    subscription_id: "subscription_id",
                                    updated_at: "2024-01-15T09:30:00Z",
                                    usage_type: "usage_type",
                                },
                            ],
                            status: "status",
                            subscription_external_id: "subscription_external_id",
                            total_price: 1,
                        },
                    ],
                    created_at: "2024-01-15T09:30:00Z",
                    default_payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    entity_traits: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            environment_id: "environment_id",
                            id: "id",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    environment_id: "environment_id",
                    id: "id",
                    keys: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            entity_id: "entity_id",
                            entity_type: "entity_type",
                            environment_id: "environment_id",
                            id: "id",
                            key: "key",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    last_seen_at: "2024-01-15T09:30:00Z",
                    logo_url: "logo_url",
                    metrics: [
                        {
                            account_id: "account_id",
                            captured_at_max: "2024-01-15T09:30:00Z",
                            captured_at_min: "2024-01-15T09:30:00Z",
                            company_id: "company_id",
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            event_subtype: "event_subtype",
                            month_reset: "month_reset",
                            period: "period",
                            value: 1,
                        },
                    ],
                    name: "name",
                    payment_methods: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            customer_external_id: "customer_external_id",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            payment_method_type: "payment_method_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    plan: {
                        id: "id",
                        name: "name",
                    },
                    plans: [
                        {
                            id: "id",
                            name: "name",
                        },
                    ],
                    rules: [
                        {
                            account_id: "account_id",
                            condition_groups: [
                                {
                                    conditions: [
                                        {
                                            account_id: "account_id",
                                            condition_type: "condition_type",
                                            environment_id: "environment_id",
                                            id: "id",
                                            operator: "operator",
                                            resource_ids: ["resource_ids"],
                                            trait_value: "trait_value",
                                        },
                                    ],
                                },
                            ],
                            conditions: [
                                {
                                    account_id: "account_id",
                                    condition_type: "condition_type",
                                    environment_id: "environment_id",
                                    id: "id",
                                    operator: "operator",
                                    resource_ids: ["resource_ids"],
                                    trait_value: "trait_value",
                                },
                            ],
                            environment_id: "environment_id",
                            id: "id",
                            name: "name",
                            priority: 1,
                            rule_type: "rule_type",
                            value: true,
                        },
                    ],
                    traits: {
                        key: "value",
                    },
                    updated_at: "2024-01-15T09:30:00Z",
                    user_count: 1,
                },
                company_id: "company_id",
                consumption_rate: 1.1,
                created_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                expiration_date: "2024-01-15T09:30:00Z",
                feature: {
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    event_subtype: "event_subtype",
                    feature_type: "feature_type",
                    icon: "icon",
                    id: "id",
                    lifecycle_phase: "lifecycle_phase",
                    maintainer_id: "maintainer_id",
                    name: "name",
                    plural_name: "plural_name",
                    singular_name: "singular_name",
                    trait_id: "trait_id",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                feature_id: "feature_id",
                id: "id",
                metric_period: "metric_period",
                metric_period_month_reset: "metric_period_month_reset",
                notes: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        external_user_id: "external_user_id",
                        external_user_name: "external_user_name",
                        id: "id",
                        note: "note",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                rule_id: "rule_id",
                rule_id_usage_exceeded: "rule_id_usage_exceeded",
                updated_at: "2024-01-15T09:30:00Z",
                value_bool: true,
                value_numeric: 1,
                value_trait: {
                    created_at: "2024-01-15T09:30:00Z",
                    display_name: "display_name",
                    entity_type: "entity_type",
                    hierarchy: ["hierarchy"],
                    id: "id",
                    trait_type: "trait_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                value_trait_id: "value_trait_id",
                value_type: "value_type",
            },
            params: {
                key: "value",
            },
        });
    });

    test("updateCompanyOverride (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { value_type: "boolean" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/company-overrides/company_override_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.updateCompanyOverride("company_override_id", {
                value_type: "boolean",
            });
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("updateCompanyOverride (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { value_type: "boolean" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/company-overrides/company_override_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.updateCompanyOverride("company_override_id", {
                value_type: "boolean",
            });
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("updateCompanyOverride (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { value_type: "boolean" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/company-overrides/company_override_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.updateCompanyOverride("company_override_id", {
                value_type: "boolean",
            });
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("updateCompanyOverride (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { value_type: "boolean" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/company-overrides/company_override_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.updateCompanyOverride("company_override_id", {
                value_type: "boolean",
            });
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("updateCompanyOverride (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { value_type: "boolean" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/company-overrides/company_override_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.updateCompanyOverride("company_override_id", {
                value_type: "boolean",
            });
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("deleteCompanyOverride (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { data: { deleted: true }, params: { key: "value" } };
        server
            .mockEndpoint()
            .delete("/company-overrides/company_override_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entitlements.deleteCompanyOverride("company_override_id");
        expect(response).toEqual({
            data: {
                deleted: true,
            },
            params: {
                key: "value",
            },
        });
    });

    test("deleteCompanyOverride (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .delete("/company-overrides/company_override_id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.deleteCompanyOverride("company_override_id");
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("deleteCompanyOverride (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .delete("/company-overrides/company_override_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.deleteCompanyOverride("company_override_id");
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("deleteCompanyOverride (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .delete("/company-overrides/company_override_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.deleteCompanyOverride("company_override_id");
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("deleteCompanyOverride (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .delete("/company-overrides/company_override_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.deleteCompanyOverride("company_override_id");
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("deleteCompanyOverride (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .delete("/company-overrides/company_override_id")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.deleteCompanyOverride("company_override_id");
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("countCompanyOverrides (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: { count: 1 },
            params: {
                company_id: "company_id",
                company_ids: ["company_ids"],
                feature_id: "feature_id",
                feature_ids: ["feature_ids"],
                ids: ["ids"],
                limit: 1,
                offset: 1,
                q: "q",
                without_expired: true,
            },
        };
        server
            .mockEndpoint()
            .get("/company-overrides/count")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entitlements.countCompanyOverrides({
            company_id: "company_id",
            feature_id: "feature_id",
            without_expired: true,
            q: "q",
            limit: 1,
            offset: 1,
        });
        expect(response).toEqual({
            data: {
                count: 1,
            },
            params: {
                company_id: "company_id",
                company_ids: ["company_ids"],
                feature_id: "feature_id",
                feature_ids: ["feature_ids"],
                ids: ["ids"],
                limit: 1,
                offset: 1,
                q: "q",
                without_expired: true,
            },
        });
    });

    test("countCompanyOverrides (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/company-overrides/count")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.countCompanyOverrides();
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("countCompanyOverrides (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/company-overrides/count")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.countCompanyOverrides();
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("countCompanyOverrides (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/company-overrides/count")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.countCompanyOverrides();
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("countCompanyOverrides (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/company-overrides/count")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.countCompanyOverrides();
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("countCompanyOverrides (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/company-overrides/count")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.countCompanyOverrides();
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("listFeatureCompanies (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    access: true,
                    allocation: 1,
                    allocation_type: "boolean",
                    company: {
                        add_ons: [{ id: "id", name: "name" }],
                        billing_subscriptions: [
                            {
                                cancel_at_period_end: true,
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                customer_external_id: "customer_external_id",
                                discounts: [
                                    {
                                        coupon_id: "coupon_id",
                                        coupon_name: "coupon_name",
                                        discount_external_id: "discount_external_id",
                                        duration: "duration",
                                        is_active: true,
                                        started_at: "2024-01-15T09:30:00Z",
                                        subscription_external_id: "subscription_external_id",
                                    },
                                ],
                                id: "id",
                                interval: "interval",
                                period_end: 1,
                                period_start: 1,
                                products: [
                                    {
                                        billing_scheme: "billing_scheme",
                                        created_at: "2024-01-15T09:30:00Z",
                                        currency: "currency",
                                        environment_id: "environment_id",
                                        external_id: "external_id",
                                        id: "id",
                                        interval: "interval",
                                        name: "name",
                                        package_size: 1,
                                        price: 1,
                                        price_external_id: "price_external_id",
                                        price_id: "price_id",
                                        price_tier: [{}],
                                        quantity: 1.1,
                                        subscription_id: "subscription_id",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        usage_type: "usage_type",
                                    },
                                ],
                                status: "status",
                                subscription_external_id: "subscription_external_id",
                                total_price: 1,
                            },
                        ],
                        created_at: "2024-01-15T09:30:00Z",
                        entity_traits: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                definition_id: "definition_id",
                                environment_id: "environment_id",
                                id: "id",
                                updated_at: "2024-01-15T09:30:00Z",
                                value: "value",
                            },
                        ],
                        environment_id: "environment_id",
                        id: "id",
                        keys: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                definition_id: "definition_id",
                                entity_id: "entity_id",
                                entity_type: "entity_type",
                                environment_id: "environment_id",
                                id: "id",
                                key: "key",
                                updated_at: "2024-01-15T09:30:00Z",
                                value: "value",
                            },
                        ],
                        metrics: [
                            {
                                account_id: "account_id",
                                captured_at_max: "2024-01-15T09:30:00Z",
                                captured_at_min: "2024-01-15T09:30:00Z",
                                company_id: "company_id",
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                event_subtype: "event_subtype",
                                month_reset: "month_reset",
                                period: "period",
                                value: 1,
                            },
                        ],
                        name: "name",
                        payment_methods: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                customer_external_id: "customer_external_id",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                payment_method_type: "payment_method_type",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        plans: [{ id: "id", name: "name" }],
                        rules: [
                            {
                                account_id: "account_id",
                                condition_groups: [
                                    {
                                        conditions: [
                                            {
                                                account_id: "account_id",
                                                condition_type: "condition_type",
                                                environment_id: "environment_id",
                                                id: "id",
                                                operator: "operator",
                                                resource_ids: ["resource_ids"],
                                                trait_value: "trait_value",
                                            },
                                        ],
                                    },
                                ],
                                conditions: [
                                    {
                                        account_id: "account_id",
                                        condition_type: "condition_type",
                                        environment_id: "environment_id",
                                        id: "id",
                                        operator: "operator",
                                        resource_ids: ["resource_ids"],
                                        trait_value: "trait_value",
                                    },
                                ],
                                environment_id: "environment_id",
                                id: "id",
                                name: "name",
                                priority: 1,
                                rule_type: "rule_type",
                                value: true,
                            },
                        ],
                        updated_at: "2024-01-15T09:30:00Z",
                        user_count: 1,
                    },
                    company_override: {
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        feature_id: "feature_id",
                        id: "id",
                        notes: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                external_user_id: "external_user_id",
                                external_user_name: "external_user_name",
                                id: "id",
                                note: "note",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        updated_at: "2024-01-15T09:30:00Z",
                        value_type: "value_type",
                    },
                    credit_consumption_rate: 1.1,
                    credit_grant_counts: { key: 1.1 },
                    credit_grant_details: [{ grant_reason: "free", quantity: 1.1 }],
                    credit_grant_reason: "free",
                    credit_remaining: 1.1,
                    credit_total: 1.1,
                    credit_type_icon: "credit_type_icon",
                    credit_used: 1.1,
                    effective_limit: 1,
                    effective_price: 1.1,
                    entitlement_expiration_date: "2024-01-15T09:30:00Z",
                    entitlement_id: "entitlement_id",
                    entitlement_source: "entitlement_source",
                    entitlement_type: "entitlement_type",
                    feature: {
                        created_at: "2024-01-15T09:30:00Z",
                        description: "description",
                        feature_type: "feature_type",
                        flags: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                default_value: true,
                                description: "description",
                                flag_type: "flag_type",
                                id: "id",
                                key: "key",
                                name: "name",
                                rules: [
                                    {
                                        condition_groups: [
                                            {
                                                conditions: [
                                                    {
                                                        condition_type: "condition_type",
                                                        created_at: "2024-01-15T09:30:00Z",
                                                        environment_id: "environment_id",
                                                        id: "id",
                                                        operator: "operator",
                                                        resource_ids: ["resource_ids"],
                                                        resources: [{ id: "id", name: "name" }],
                                                        rule_id: "rule_id",
                                                        trait_value: "trait_value",
                                                        updated_at: "2024-01-15T09:30:00Z",
                                                    },
                                                ],
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                rule_id: "rule_id",
                                                updated_at: "2024-01-15T09:30:00Z",
                                            },
                                        ],
                                        conditions: [
                                            {
                                                condition_type: "condition_type",
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                operator: "operator",
                                                resource_ids: ["resource_ids"],
                                                resources: [{ id: "id", name: "name" }],
                                                rule_id: "rule_id",
                                                trait_value: "trait_value",
                                                updated_at: "2024-01-15T09:30:00Z",
                                            },
                                        ],
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        name: "name",
                                        priority: 1,
                                        rule_type: "rule_type",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        value: true,
                                    },
                                ],
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        icon: "icon",
                        id: "id",
                        name: "name",
                        plans: [{ id: "id", name: "name" }],
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    has_valid_allocation: true,
                    is_unlimited: true,
                    metric_reset_at: "2024-01-15T09:30:00Z",
                    month_reset: "month_reset",
                    monthly_usage_based_price: {
                        billing_scheme: "billing_scheme",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        id: "id",
                        interval: "interval",
                        is_active: true,
                        package_size: 1,
                        price: 1,
                        price_external_id: "price_external_id",
                        price_id: "price_id",
                        price_tier: [{}],
                        product_external_id: "product_external_id",
                        product_id: "product_id",
                        product_name: "product_name",
                        updated_at: "2024-01-15T09:30:00Z",
                        usage_type: "usage_type",
                    },
                    overuse: 1,
                    percent_used: 1.1,
                    period: "period",
                    plan: {
                        created_at: "2024-01-15T09:30:00Z",
                        description: "description",
                        icon: "icon",
                        id: "id",
                        name: "name",
                        plan_type: "plan_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    plan_entitlement: {
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        feature_id: "feature_id",
                        id: "id",
                        plan_id: "plan_id",
                        rule_id: "rule_id",
                        updated_at: "2024-01-15T09:30:00Z",
                        value_type: "value_type",
                    },
                    price_behavior: "price_behavior",
                    soft_limit: 1,
                    usage: 1,
                    yearly_usage_based_price: {
                        billing_scheme: "billing_scheme",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        id: "id",
                        interval: "interval",
                        is_active: true,
                        package_size: 1,
                        price: 1,
                        price_external_id: "price_external_id",
                        price_id: "price_id",
                        price_tier: [{}],
                        product_external_id: "product_external_id",
                        product_id: "product_id",
                        product_name: "product_name",
                        updated_at: "2024-01-15T09:30:00Z",
                        usage_type: "usage_type",
                    },
                },
            ],
            params: { feature_id: "feature_id", limit: 1, offset: 1, q: "q" },
        };
        server.mockEndpoint().get("/feature-companies").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.entitlements.listFeatureCompanies({
            feature_id: "feature_id",
            q: "q",
            limit: 1,
            offset: 1,
        });
        expect(response).toEqual({
            data: [
                {
                    access: true,
                    allocation: 1,
                    allocation_type: "boolean",
                    company: {
                        add_ons: [
                            {
                                id: "id",
                                name: "name",
                            },
                        ],
                        billing_subscriptions: [
                            {
                                cancel_at_period_end: true,
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                customer_external_id: "customer_external_id",
                                discounts: [
                                    {
                                        coupon_id: "coupon_id",
                                        coupon_name: "coupon_name",
                                        discount_external_id: "discount_external_id",
                                        duration: "duration",
                                        is_active: true,
                                        started_at: "2024-01-15T09:30:00Z",
                                        subscription_external_id: "subscription_external_id",
                                    },
                                ],
                                id: "id",
                                interval: "interval",
                                period_end: 1,
                                period_start: 1,
                                products: [
                                    {
                                        billing_scheme: "billing_scheme",
                                        created_at: "2024-01-15T09:30:00Z",
                                        currency: "currency",
                                        environment_id: "environment_id",
                                        external_id: "external_id",
                                        id: "id",
                                        interval: "interval",
                                        name: "name",
                                        package_size: 1,
                                        price: 1,
                                        price_external_id: "price_external_id",
                                        price_id: "price_id",
                                        price_tier: [{}],
                                        quantity: 1.1,
                                        subscription_id: "subscription_id",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        usage_type: "usage_type",
                                    },
                                ],
                                status: "status",
                                subscription_external_id: "subscription_external_id",
                                total_price: 1,
                            },
                        ],
                        created_at: "2024-01-15T09:30:00Z",
                        entity_traits: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                definition_id: "definition_id",
                                environment_id: "environment_id",
                                id: "id",
                                updated_at: "2024-01-15T09:30:00Z",
                                value: "value",
                            },
                        ],
                        environment_id: "environment_id",
                        id: "id",
                        keys: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                definition_id: "definition_id",
                                entity_id: "entity_id",
                                entity_type: "entity_type",
                                environment_id: "environment_id",
                                id: "id",
                                key: "key",
                                updated_at: "2024-01-15T09:30:00Z",
                                value: "value",
                            },
                        ],
                        metrics: [
                            {
                                account_id: "account_id",
                                captured_at_max: "2024-01-15T09:30:00Z",
                                captured_at_min: "2024-01-15T09:30:00Z",
                                company_id: "company_id",
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                event_subtype: "event_subtype",
                                month_reset: "month_reset",
                                period: "period",
                                value: 1,
                            },
                        ],
                        name: "name",
                        payment_methods: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                customer_external_id: "customer_external_id",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                payment_method_type: "payment_method_type",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        plans: [
                            {
                                id: "id",
                                name: "name",
                            },
                        ],
                        rules: [
                            {
                                account_id: "account_id",
                                condition_groups: [
                                    {
                                        conditions: [
                                            {
                                                account_id: "account_id",
                                                condition_type: "condition_type",
                                                environment_id: "environment_id",
                                                id: "id",
                                                operator: "operator",
                                                resource_ids: ["resource_ids"],
                                                trait_value: "trait_value",
                                            },
                                        ],
                                    },
                                ],
                                conditions: [
                                    {
                                        account_id: "account_id",
                                        condition_type: "condition_type",
                                        environment_id: "environment_id",
                                        id: "id",
                                        operator: "operator",
                                        resource_ids: ["resource_ids"],
                                        trait_value: "trait_value",
                                    },
                                ],
                                environment_id: "environment_id",
                                id: "id",
                                name: "name",
                                priority: 1,
                                rule_type: "rule_type",
                                value: true,
                            },
                        ],
                        updated_at: "2024-01-15T09:30:00Z",
                        user_count: 1,
                    },
                    company_override: {
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        feature_id: "feature_id",
                        id: "id",
                        notes: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                external_user_id: "external_user_id",
                                external_user_name: "external_user_name",
                                id: "id",
                                note: "note",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        updated_at: "2024-01-15T09:30:00Z",
                        value_type: "value_type",
                    },
                    credit_consumption_rate: 1.1,
                    credit_grant_counts: {
                        key: 1.1,
                    },
                    credit_grant_details: [
                        {
                            grant_reason: "free",
                            quantity: 1.1,
                        },
                    ],
                    credit_grant_reason: "free",
                    credit_remaining: 1.1,
                    credit_total: 1.1,
                    credit_type_icon: "credit_type_icon",
                    credit_used: 1.1,
                    effective_limit: 1,
                    effective_price: 1.1,
                    entitlement_expiration_date: "2024-01-15T09:30:00Z",
                    entitlement_id: "entitlement_id",
                    entitlement_source: "entitlement_source",
                    entitlement_type: "entitlement_type",
                    feature: {
                        created_at: "2024-01-15T09:30:00Z",
                        description: "description",
                        feature_type: "feature_type",
                        flags: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                default_value: true,
                                description: "description",
                                flag_type: "flag_type",
                                id: "id",
                                key: "key",
                                name: "name",
                                rules: [
                                    {
                                        condition_groups: [
                                            {
                                                conditions: [
                                                    {
                                                        condition_type: "condition_type",
                                                        created_at: "2024-01-15T09:30:00Z",
                                                        environment_id: "environment_id",
                                                        id: "id",
                                                        operator: "operator",
                                                        resource_ids: ["resource_ids"],
                                                        resources: [
                                                            {
                                                                id: "id",
                                                                name: "name",
                                                            },
                                                        ],
                                                        rule_id: "rule_id",
                                                        trait_value: "trait_value",
                                                        updated_at: "2024-01-15T09:30:00Z",
                                                    },
                                                ],
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                rule_id: "rule_id",
                                                updated_at: "2024-01-15T09:30:00Z",
                                            },
                                        ],
                                        conditions: [
                                            {
                                                condition_type: "condition_type",
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                operator: "operator",
                                                resource_ids: ["resource_ids"],
                                                resources: [
                                                    {
                                                        id: "id",
                                                        name: "name",
                                                    },
                                                ],
                                                rule_id: "rule_id",
                                                trait_value: "trait_value",
                                                updated_at: "2024-01-15T09:30:00Z",
                                            },
                                        ],
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        name: "name",
                                        priority: 1,
                                        rule_type: "rule_type",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        value: true,
                                    },
                                ],
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        icon: "icon",
                        id: "id",
                        name: "name",
                        plans: [
                            {
                                id: "id",
                                name: "name",
                            },
                        ],
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    has_valid_allocation: true,
                    is_unlimited: true,
                    metric_reset_at: "2024-01-15T09:30:00Z",
                    month_reset: "month_reset",
                    monthly_usage_based_price: {
                        billing_scheme: "billing_scheme",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        id: "id",
                        interval: "interval",
                        is_active: true,
                        package_size: 1,
                        price: 1,
                        price_external_id: "price_external_id",
                        price_id: "price_id",
                        price_tier: [{}],
                        product_external_id: "product_external_id",
                        product_id: "product_id",
                        product_name: "product_name",
                        updated_at: "2024-01-15T09:30:00Z",
                        usage_type: "usage_type",
                    },
                    overuse: 1,
                    percent_used: 1.1,
                    period: "period",
                    plan: {
                        created_at: "2024-01-15T09:30:00Z",
                        description: "description",
                        icon: "icon",
                        id: "id",
                        name: "name",
                        plan_type: "plan_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    plan_entitlement: {
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        feature_id: "feature_id",
                        id: "id",
                        plan_id: "plan_id",
                        rule_id: "rule_id",
                        updated_at: "2024-01-15T09:30:00Z",
                        value_type: "value_type",
                    },
                    price_behavior: "price_behavior",
                    soft_limit: 1,
                    usage: 1,
                    yearly_usage_based_price: {
                        billing_scheme: "billing_scheme",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        id: "id",
                        interval: "interval",
                        is_active: true,
                        package_size: 1,
                        price: 1,
                        price_external_id: "price_external_id",
                        price_id: "price_id",
                        price_tier: [{}],
                        product_external_id: "product_external_id",
                        product_id: "product_id",
                        product_name: "product_name",
                        updated_at: "2024-01-15T09:30:00Z",
                        usage_type: "usage_type",
                    },
                },
            ],
            params: {
                feature_id: "feature_id",
                limit: 1,
                offset: 1,
                q: "q",
            },
        });
    });

    test("listFeatureCompanies (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/feature-companies").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.entitlements.listFeatureCompanies({
                feature_id: "feature_id",
            });
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("listFeatureCompanies (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/feature-companies").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.entitlements.listFeatureCompanies({
                feature_id: "feature_id",
            });
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("listFeatureCompanies (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/feature-companies").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.entitlements.listFeatureCompanies({
                feature_id: "feature_id",
            });
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("listFeatureCompanies (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/feature-companies").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.entitlements.listFeatureCompanies({
                feature_id: "feature_id",
            });
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("listFeatureCompanies (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/feature-companies").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.entitlements.listFeatureCompanies({
                feature_id: "feature_id",
            });
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("countFeatureCompanies (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: { count: 1 },
            params: { feature_id: "feature_id", limit: 1, offset: 1, q: "q" },
        };
        server
            .mockEndpoint()
            .get("/feature-companies/count")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entitlements.countFeatureCompanies({
            feature_id: "feature_id",
            q: "q",
            limit: 1,
            offset: 1,
        });
        expect(response).toEqual({
            data: {
                count: 1,
            },
            params: {
                feature_id: "feature_id",
                limit: 1,
                offset: 1,
                q: "q",
            },
        });
    });

    test("countFeatureCompanies (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/feature-companies/count")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.countFeatureCompanies({
                feature_id: "feature_id",
            });
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("countFeatureCompanies (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/feature-companies/count")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.countFeatureCompanies({
                feature_id: "feature_id",
            });
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("countFeatureCompanies (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/feature-companies/count")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.countFeatureCompanies({
                feature_id: "feature_id",
            });
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("countFeatureCompanies (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/feature-companies/count")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.countFeatureCompanies({
                feature_id: "feature_id",
            });
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("countFeatureCompanies (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/feature-companies/count")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.countFeatureCompanies({
                feature_id: "feature_id",
            });
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("listFeatureUsage (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    access: true,
                    allocation: 1,
                    allocation_type: "boolean",
                    company_override: {
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        feature_id: "feature_id",
                        id: "id",
                        notes: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                external_user_id: "external_user_id",
                                external_user_name: "external_user_name",
                                id: "id",
                                note: "note",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        updated_at: "2024-01-15T09:30:00Z",
                        value_type: "value_type",
                    },
                    credit_consumption_rate: 1.1,
                    credit_grant_counts: { key: 1.1 },
                    credit_grant_details: [{ grant_reason: "free", quantity: 1.1 }],
                    credit_grant_reason: "free",
                    credit_remaining: 1.1,
                    credit_total: 1.1,
                    credit_type_icon: "credit_type_icon",
                    credit_used: 1.1,
                    effective_limit: 1,
                    effective_price: 1.1,
                    entitlement_expiration_date: "2024-01-15T09:30:00Z",
                    entitlement_id: "entitlement_id",
                    entitlement_source: "entitlement_source",
                    entitlement_type: "entitlement_type",
                    feature: {
                        created_at: "2024-01-15T09:30:00Z",
                        description: "description",
                        feature_type: "feature_type",
                        flags: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                default_value: true,
                                description: "description",
                                flag_type: "flag_type",
                                id: "id",
                                key: "key",
                                name: "name",
                                rules: [
                                    {
                                        condition_groups: [
                                            {
                                                conditions: [
                                                    {
                                                        condition_type: "condition_type",
                                                        created_at: "2024-01-15T09:30:00Z",
                                                        environment_id: "environment_id",
                                                        id: "id",
                                                        operator: "operator",
                                                        resource_ids: ["resource_ids"],
                                                        resources: [{ id: "id", name: "name" }],
                                                        rule_id: "rule_id",
                                                        trait_value: "trait_value",
                                                        updated_at: "2024-01-15T09:30:00Z",
                                                    },
                                                ],
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                rule_id: "rule_id",
                                                updated_at: "2024-01-15T09:30:00Z",
                                            },
                                        ],
                                        conditions: [
                                            {
                                                condition_type: "condition_type",
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                operator: "operator",
                                                resource_ids: ["resource_ids"],
                                                resources: [{ id: "id", name: "name" }],
                                                rule_id: "rule_id",
                                                trait_value: "trait_value",
                                                updated_at: "2024-01-15T09:30:00Z",
                                            },
                                        ],
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        name: "name",
                                        priority: 1,
                                        rule_type: "rule_type",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        value: true,
                                    },
                                ],
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        icon: "icon",
                        id: "id",
                        name: "name",
                        plans: [{ id: "id", name: "name" }],
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    has_valid_allocation: true,
                    is_unlimited: true,
                    metric_reset_at: "2024-01-15T09:30:00Z",
                    month_reset: "month_reset",
                    monthly_usage_based_price: {
                        billing_scheme: "billing_scheme",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        id: "id",
                        interval: "interval",
                        is_active: true,
                        package_size: 1,
                        price: 1,
                        price_external_id: "price_external_id",
                        price_id: "price_id",
                        price_tier: [{}],
                        product_external_id: "product_external_id",
                        product_id: "product_id",
                        product_name: "product_name",
                        updated_at: "2024-01-15T09:30:00Z",
                        usage_type: "usage_type",
                    },
                    overuse: 1,
                    percent_used: 1.1,
                    period: "period",
                    plan: {
                        created_at: "2024-01-15T09:30:00Z",
                        description: "description",
                        icon: "icon",
                        id: "id",
                        name: "name",
                        plan_type: "plan_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    plan_entitlement: {
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        feature_id: "feature_id",
                        id: "id",
                        plan_id: "plan_id",
                        rule_id: "rule_id",
                        updated_at: "2024-01-15T09:30:00Z",
                        value_type: "value_type",
                    },
                    price_behavior: "price_behavior",
                    soft_limit: 1,
                    usage: 1,
                    yearly_usage_based_price: {
                        billing_scheme: "billing_scheme",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        id: "id",
                        interval: "interval",
                        is_active: true,
                        package_size: 1,
                        price: 1,
                        price_external_id: "price_external_id",
                        price_id: "price_id",
                        price_tier: [{}],
                        product_external_id: "product_external_id",
                        product_id: "product_id",
                        product_name: "product_name",
                        updated_at: "2024-01-15T09:30:00Z",
                        usage_type: "usage_type",
                    },
                },
            ],
            params: {
                company_id: "company_id",
                company_keys: { key: "value" },
                feature_ids: ["feature_ids"],
                limit: 1,
                offset: 1,
                q: "q",
                without_negative_entitlements: true,
            },
        };
        server.mockEndpoint().get("/feature-usage").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.entitlements.listFeatureUsage({
            company_id: "company_id",
            q: "q",
            without_negative_entitlements: true,
            limit: 1,
            offset: 1,
        });
        expect(response).toEqual({
            data: [
                {
                    access: true,
                    allocation: 1,
                    allocation_type: "boolean",
                    company_override: {
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        feature_id: "feature_id",
                        id: "id",
                        notes: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                external_user_id: "external_user_id",
                                external_user_name: "external_user_name",
                                id: "id",
                                note: "note",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        updated_at: "2024-01-15T09:30:00Z",
                        value_type: "value_type",
                    },
                    credit_consumption_rate: 1.1,
                    credit_grant_counts: {
                        key: 1.1,
                    },
                    credit_grant_details: [
                        {
                            grant_reason: "free",
                            quantity: 1.1,
                        },
                    ],
                    credit_grant_reason: "free",
                    credit_remaining: 1.1,
                    credit_total: 1.1,
                    credit_type_icon: "credit_type_icon",
                    credit_used: 1.1,
                    effective_limit: 1,
                    effective_price: 1.1,
                    entitlement_expiration_date: "2024-01-15T09:30:00Z",
                    entitlement_id: "entitlement_id",
                    entitlement_source: "entitlement_source",
                    entitlement_type: "entitlement_type",
                    feature: {
                        created_at: "2024-01-15T09:30:00Z",
                        description: "description",
                        feature_type: "feature_type",
                        flags: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                default_value: true,
                                description: "description",
                                flag_type: "flag_type",
                                id: "id",
                                key: "key",
                                name: "name",
                                rules: [
                                    {
                                        condition_groups: [
                                            {
                                                conditions: [
                                                    {
                                                        condition_type: "condition_type",
                                                        created_at: "2024-01-15T09:30:00Z",
                                                        environment_id: "environment_id",
                                                        id: "id",
                                                        operator: "operator",
                                                        resource_ids: ["resource_ids"],
                                                        resources: [
                                                            {
                                                                id: "id",
                                                                name: "name",
                                                            },
                                                        ],
                                                        rule_id: "rule_id",
                                                        trait_value: "trait_value",
                                                        updated_at: "2024-01-15T09:30:00Z",
                                                    },
                                                ],
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                rule_id: "rule_id",
                                                updated_at: "2024-01-15T09:30:00Z",
                                            },
                                        ],
                                        conditions: [
                                            {
                                                condition_type: "condition_type",
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                operator: "operator",
                                                resource_ids: ["resource_ids"],
                                                resources: [
                                                    {
                                                        id: "id",
                                                        name: "name",
                                                    },
                                                ],
                                                rule_id: "rule_id",
                                                trait_value: "trait_value",
                                                updated_at: "2024-01-15T09:30:00Z",
                                            },
                                        ],
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        name: "name",
                                        priority: 1,
                                        rule_type: "rule_type",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        value: true,
                                    },
                                ],
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        icon: "icon",
                        id: "id",
                        name: "name",
                        plans: [
                            {
                                id: "id",
                                name: "name",
                            },
                        ],
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    has_valid_allocation: true,
                    is_unlimited: true,
                    metric_reset_at: "2024-01-15T09:30:00Z",
                    month_reset: "month_reset",
                    monthly_usage_based_price: {
                        billing_scheme: "billing_scheme",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        id: "id",
                        interval: "interval",
                        is_active: true,
                        package_size: 1,
                        price: 1,
                        price_external_id: "price_external_id",
                        price_id: "price_id",
                        price_tier: [{}],
                        product_external_id: "product_external_id",
                        product_id: "product_id",
                        product_name: "product_name",
                        updated_at: "2024-01-15T09:30:00Z",
                        usage_type: "usage_type",
                    },
                    overuse: 1,
                    percent_used: 1.1,
                    period: "period",
                    plan: {
                        created_at: "2024-01-15T09:30:00Z",
                        description: "description",
                        icon: "icon",
                        id: "id",
                        name: "name",
                        plan_type: "plan_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    plan_entitlement: {
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        feature_id: "feature_id",
                        id: "id",
                        plan_id: "plan_id",
                        rule_id: "rule_id",
                        updated_at: "2024-01-15T09:30:00Z",
                        value_type: "value_type",
                    },
                    price_behavior: "price_behavior",
                    soft_limit: 1,
                    usage: 1,
                    yearly_usage_based_price: {
                        billing_scheme: "billing_scheme",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        id: "id",
                        interval: "interval",
                        is_active: true,
                        package_size: 1,
                        price: 1,
                        price_external_id: "price_external_id",
                        price_id: "price_id",
                        price_tier: [{}],
                        product_external_id: "product_external_id",
                        product_id: "product_id",
                        product_name: "product_name",
                        updated_at: "2024-01-15T09:30:00Z",
                        usage_type: "usage_type",
                    },
                },
            ],
            params: {
                company_id: "company_id",
                company_keys: {
                    key: "value",
                },
                feature_ids: ["feature_ids"],
                limit: 1,
                offset: 1,
                q: "q",
                without_negative_entitlements: true,
            },
        });
    });

    test("listFeatureUsage (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/feature-usage").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.entitlements.listFeatureUsage();
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("listFeatureUsage (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/feature-usage").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.entitlements.listFeatureUsage();
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("listFeatureUsage (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/feature-usage").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.entitlements.listFeatureUsage();
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("listFeatureUsage (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/feature-usage").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.entitlements.listFeatureUsage();
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("listFeatureUsage (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/feature-usage").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.entitlements.listFeatureUsage();
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("countFeatureUsage (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: { count: 1 },
            params: {
                company_id: "company_id",
                company_keys: { key: "value" },
                feature_ids: ["feature_ids"],
                limit: 1,
                offset: 1,
                q: "q",
                without_negative_entitlements: true,
            },
        };
        server
            .mockEndpoint()
            .get("/feature-usage/count")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entitlements.countFeatureUsage({
            company_id: "company_id",
            q: "q",
            without_negative_entitlements: true,
            limit: 1,
            offset: 1,
        });
        expect(response).toEqual({
            data: {
                count: 1,
            },
            params: {
                company_id: "company_id",
                company_keys: {
                    key: "value",
                },
                feature_ids: ["feature_ids"],
                limit: 1,
                offset: 1,
                q: "q",
                without_negative_entitlements: true,
            },
        });
    });

    test("countFeatureUsage (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/feature-usage/count")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.countFeatureUsage();
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("countFeatureUsage (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/feature-usage/count")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.countFeatureUsage();
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("countFeatureUsage (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/feature-usage/count")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.countFeatureUsage();
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("countFeatureUsage (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/feature-usage/count")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.countFeatureUsage();
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("countFeatureUsage (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/feature-usage/count")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.countFeatureUsage();
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("listFeatureUsers (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    access: true,
                    allocation: 1,
                    allocation_type: "boolean",
                    company: {
                        add_ons: [{ id: "id", name: "name" }],
                        billing_subscriptions: [
                            {
                                cancel_at_period_end: true,
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                customer_external_id: "customer_external_id",
                                discounts: [
                                    {
                                        coupon_id: "coupon_id",
                                        coupon_name: "coupon_name",
                                        discount_external_id: "discount_external_id",
                                        duration: "duration",
                                        is_active: true,
                                        started_at: "2024-01-15T09:30:00Z",
                                        subscription_external_id: "subscription_external_id",
                                    },
                                ],
                                id: "id",
                                interval: "interval",
                                period_end: 1,
                                period_start: 1,
                                products: [
                                    {
                                        billing_scheme: "billing_scheme",
                                        created_at: "2024-01-15T09:30:00Z",
                                        currency: "currency",
                                        environment_id: "environment_id",
                                        external_id: "external_id",
                                        id: "id",
                                        interval: "interval",
                                        name: "name",
                                        package_size: 1,
                                        price: 1,
                                        price_external_id: "price_external_id",
                                        price_id: "price_id",
                                        price_tier: [{}],
                                        quantity: 1.1,
                                        subscription_id: "subscription_id",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        usage_type: "usage_type",
                                    },
                                ],
                                status: "status",
                                subscription_external_id: "subscription_external_id",
                                total_price: 1,
                            },
                        ],
                        created_at: "2024-01-15T09:30:00Z",
                        entity_traits: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                definition_id: "definition_id",
                                environment_id: "environment_id",
                                id: "id",
                                updated_at: "2024-01-15T09:30:00Z",
                                value: "value",
                            },
                        ],
                        environment_id: "environment_id",
                        id: "id",
                        keys: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                definition_id: "definition_id",
                                entity_id: "entity_id",
                                entity_type: "entity_type",
                                environment_id: "environment_id",
                                id: "id",
                                key: "key",
                                updated_at: "2024-01-15T09:30:00Z",
                                value: "value",
                            },
                        ],
                        metrics: [
                            {
                                account_id: "account_id",
                                captured_at_max: "2024-01-15T09:30:00Z",
                                captured_at_min: "2024-01-15T09:30:00Z",
                                company_id: "company_id",
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                event_subtype: "event_subtype",
                                month_reset: "month_reset",
                                period: "period",
                                value: 1,
                            },
                        ],
                        name: "name",
                        payment_methods: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                customer_external_id: "customer_external_id",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                payment_method_type: "payment_method_type",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        plans: [{ id: "id", name: "name" }],
                        rules: [
                            {
                                account_id: "account_id",
                                condition_groups: [
                                    {
                                        conditions: [
                                            {
                                                account_id: "account_id",
                                                condition_type: "condition_type",
                                                environment_id: "environment_id",
                                                id: "id",
                                                operator: "operator",
                                                resource_ids: ["resource_ids"],
                                                trait_value: "trait_value",
                                            },
                                        ],
                                    },
                                ],
                                conditions: [
                                    {
                                        account_id: "account_id",
                                        condition_type: "condition_type",
                                        environment_id: "environment_id",
                                        id: "id",
                                        operator: "operator",
                                        resource_ids: ["resource_ids"],
                                        trait_value: "trait_value",
                                    },
                                ],
                                environment_id: "environment_id",
                                id: "id",
                                name: "name",
                                priority: 1,
                                rule_type: "rule_type",
                                value: true,
                            },
                        ],
                        updated_at: "2024-01-15T09:30:00Z",
                        user_count: 1,
                    },
                    entitlement_id: "entitlement_id",
                    entitlement_type: "entitlement_type",
                    feature: {
                        created_at: "2024-01-15T09:30:00Z",
                        description: "description",
                        feature_type: "feature_type",
                        flags: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                default_value: true,
                                description: "description",
                                flag_type: "flag_type",
                                id: "id",
                                key: "key",
                                name: "name",
                                rules: [
                                    {
                                        condition_groups: [
                                            {
                                                conditions: [
                                                    {
                                                        condition_type: "condition_type",
                                                        created_at: "2024-01-15T09:30:00Z",
                                                        environment_id: "environment_id",
                                                        id: "id",
                                                        operator: "operator",
                                                        resource_ids: ["resource_ids"],
                                                        resources: [{ id: "id", name: "name" }],
                                                        rule_id: "rule_id",
                                                        trait_value: "trait_value",
                                                        updated_at: "2024-01-15T09:30:00Z",
                                                    },
                                                ],
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                rule_id: "rule_id",
                                                updated_at: "2024-01-15T09:30:00Z",
                                            },
                                        ],
                                        conditions: [
                                            {
                                                condition_type: "condition_type",
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                operator: "operator",
                                                resource_ids: ["resource_ids"],
                                                resources: [{ id: "id", name: "name" }],
                                                rule_id: "rule_id",
                                                trait_value: "trait_value",
                                                updated_at: "2024-01-15T09:30:00Z",
                                            },
                                        ],
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        name: "name",
                                        priority: 1,
                                        rule_type: "rule_type",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        value: true,
                                    },
                                ],
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        icon: "icon",
                        id: "id",
                        name: "name",
                        plans: [{ id: "id", name: "name" }],
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    metric_reset_at: "2024-01-15T09:30:00Z",
                    month_reset: "month_reset",
                    period: "period",
                    plan: {
                        created_at: "2024-01-15T09:30:00Z",
                        description: "description",
                        icon: "icon",
                        id: "id",
                        name: "name",
                        plan_type: "plan_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    usage: 1,
                    user: {
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        id: "id",
                        name: "name",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                },
            ],
            params: { feature_id: "feature_id", limit: 1, offset: 1, q: "q" },
        };
        server.mockEndpoint().get("/feature-users").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.entitlements.listFeatureUsers({
            feature_id: "feature_id",
            q: "q",
            limit: 1,
            offset: 1,
        });
        expect(response).toEqual({
            data: [
                {
                    access: true,
                    allocation: 1,
                    allocation_type: "boolean",
                    company: {
                        add_ons: [
                            {
                                id: "id",
                                name: "name",
                            },
                        ],
                        billing_subscriptions: [
                            {
                                cancel_at_period_end: true,
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                customer_external_id: "customer_external_id",
                                discounts: [
                                    {
                                        coupon_id: "coupon_id",
                                        coupon_name: "coupon_name",
                                        discount_external_id: "discount_external_id",
                                        duration: "duration",
                                        is_active: true,
                                        started_at: "2024-01-15T09:30:00Z",
                                        subscription_external_id: "subscription_external_id",
                                    },
                                ],
                                id: "id",
                                interval: "interval",
                                period_end: 1,
                                period_start: 1,
                                products: [
                                    {
                                        billing_scheme: "billing_scheme",
                                        created_at: "2024-01-15T09:30:00Z",
                                        currency: "currency",
                                        environment_id: "environment_id",
                                        external_id: "external_id",
                                        id: "id",
                                        interval: "interval",
                                        name: "name",
                                        package_size: 1,
                                        price: 1,
                                        price_external_id: "price_external_id",
                                        price_id: "price_id",
                                        price_tier: [{}],
                                        quantity: 1.1,
                                        subscription_id: "subscription_id",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        usage_type: "usage_type",
                                    },
                                ],
                                status: "status",
                                subscription_external_id: "subscription_external_id",
                                total_price: 1,
                            },
                        ],
                        created_at: "2024-01-15T09:30:00Z",
                        entity_traits: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                definition_id: "definition_id",
                                environment_id: "environment_id",
                                id: "id",
                                updated_at: "2024-01-15T09:30:00Z",
                                value: "value",
                            },
                        ],
                        environment_id: "environment_id",
                        id: "id",
                        keys: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                definition_id: "definition_id",
                                entity_id: "entity_id",
                                entity_type: "entity_type",
                                environment_id: "environment_id",
                                id: "id",
                                key: "key",
                                updated_at: "2024-01-15T09:30:00Z",
                                value: "value",
                            },
                        ],
                        metrics: [
                            {
                                account_id: "account_id",
                                captured_at_max: "2024-01-15T09:30:00Z",
                                captured_at_min: "2024-01-15T09:30:00Z",
                                company_id: "company_id",
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                event_subtype: "event_subtype",
                                month_reset: "month_reset",
                                period: "period",
                                value: 1,
                            },
                        ],
                        name: "name",
                        payment_methods: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                customer_external_id: "customer_external_id",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                payment_method_type: "payment_method_type",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        plans: [
                            {
                                id: "id",
                                name: "name",
                            },
                        ],
                        rules: [
                            {
                                account_id: "account_id",
                                condition_groups: [
                                    {
                                        conditions: [
                                            {
                                                account_id: "account_id",
                                                condition_type: "condition_type",
                                                environment_id: "environment_id",
                                                id: "id",
                                                operator: "operator",
                                                resource_ids: ["resource_ids"],
                                                trait_value: "trait_value",
                                            },
                                        ],
                                    },
                                ],
                                conditions: [
                                    {
                                        account_id: "account_id",
                                        condition_type: "condition_type",
                                        environment_id: "environment_id",
                                        id: "id",
                                        operator: "operator",
                                        resource_ids: ["resource_ids"],
                                        trait_value: "trait_value",
                                    },
                                ],
                                environment_id: "environment_id",
                                id: "id",
                                name: "name",
                                priority: 1,
                                rule_type: "rule_type",
                                value: true,
                            },
                        ],
                        updated_at: "2024-01-15T09:30:00Z",
                        user_count: 1,
                    },
                    entitlement_id: "entitlement_id",
                    entitlement_type: "entitlement_type",
                    feature: {
                        created_at: "2024-01-15T09:30:00Z",
                        description: "description",
                        feature_type: "feature_type",
                        flags: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                default_value: true,
                                description: "description",
                                flag_type: "flag_type",
                                id: "id",
                                key: "key",
                                name: "name",
                                rules: [
                                    {
                                        condition_groups: [
                                            {
                                                conditions: [
                                                    {
                                                        condition_type: "condition_type",
                                                        created_at: "2024-01-15T09:30:00Z",
                                                        environment_id: "environment_id",
                                                        id: "id",
                                                        operator: "operator",
                                                        resource_ids: ["resource_ids"],
                                                        resources: [
                                                            {
                                                                id: "id",
                                                                name: "name",
                                                            },
                                                        ],
                                                        rule_id: "rule_id",
                                                        trait_value: "trait_value",
                                                        updated_at: "2024-01-15T09:30:00Z",
                                                    },
                                                ],
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                rule_id: "rule_id",
                                                updated_at: "2024-01-15T09:30:00Z",
                                            },
                                        ],
                                        conditions: [
                                            {
                                                condition_type: "condition_type",
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                operator: "operator",
                                                resource_ids: ["resource_ids"],
                                                resources: [
                                                    {
                                                        id: "id",
                                                        name: "name",
                                                    },
                                                ],
                                                rule_id: "rule_id",
                                                trait_value: "trait_value",
                                                updated_at: "2024-01-15T09:30:00Z",
                                            },
                                        ],
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        name: "name",
                                        priority: 1,
                                        rule_type: "rule_type",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        value: true,
                                    },
                                ],
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        icon: "icon",
                        id: "id",
                        name: "name",
                        plans: [
                            {
                                id: "id",
                                name: "name",
                            },
                        ],
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    metric_reset_at: "2024-01-15T09:30:00Z",
                    month_reset: "month_reset",
                    period: "period",
                    plan: {
                        created_at: "2024-01-15T09:30:00Z",
                        description: "description",
                        icon: "icon",
                        id: "id",
                        name: "name",
                        plan_type: "plan_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    usage: 1,
                    user: {
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        id: "id",
                        name: "name",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                },
            ],
            params: {
                feature_id: "feature_id",
                limit: 1,
                offset: 1,
                q: "q",
            },
        });
    });

    test("listFeatureUsers (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/feature-users").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.entitlements.listFeatureUsers({
                feature_id: "feature_id",
            });
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("listFeatureUsers (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/feature-users").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.entitlements.listFeatureUsers({
                feature_id: "feature_id",
            });
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("listFeatureUsers (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/feature-users").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.entitlements.listFeatureUsers({
                feature_id: "feature_id",
            });
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("listFeatureUsers (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/feature-users").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.entitlements.listFeatureUsers({
                feature_id: "feature_id",
            });
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("listFeatureUsers (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/feature-users").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.entitlements.listFeatureUsers({
                feature_id: "feature_id",
            });
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("countFeatureUsers (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: { count: 1 },
            params: { feature_id: "feature_id", limit: 1, offset: 1, q: "q" },
        };
        server
            .mockEndpoint()
            .get("/feature-users/count")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entitlements.countFeatureUsers({
            feature_id: "feature_id",
            q: "q",
            limit: 1,
            offset: 1,
        });
        expect(response).toEqual({
            data: {
                count: 1,
            },
            params: {
                feature_id: "feature_id",
                limit: 1,
                offset: 1,
                q: "q",
            },
        });
    });

    test("countFeatureUsers (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/feature-users/count")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.countFeatureUsers({
                feature_id: "feature_id",
            });
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("countFeatureUsers (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/feature-users/count")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.countFeatureUsers({
                feature_id: "feature_id",
            });
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("countFeatureUsers (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/feature-users/count")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.countFeatureUsers({
                feature_id: "feature_id",
            });
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("countFeatureUsers (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/feature-users/count")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.countFeatureUsers({
                feature_id: "feature_id",
            });
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("countFeatureUsers (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/feature-users/count")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.countFeatureUsers({
                feature_id: "feature_id",
            });
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("listPlanEntitlements (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    billing_threshold: 1,
                    consumption_rate: 1.1,
                    created_at: "2024-01-15T09:30:00Z",
                    environment_id: "environment_id",
                    feature: {
                        created_at: "2024-01-15T09:30:00Z",
                        description: "description",
                        feature_type: "feature_type",
                        icon: "icon",
                        id: "id",
                        name: "name",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    feature_id: "feature_id",
                    id: "id",
                    metered_monthly_price: {
                        billing_scheme: "billing_scheme",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        id: "id",
                        interval: "interval",
                        is_active: true,
                        package_size: 1,
                        price: 1,
                        price_external_id: "price_external_id",
                        price_id: "price_id",
                        price_tier: [{}],
                        product_external_id: "product_external_id",
                        product_id: "product_id",
                        product_name: "product_name",
                        updated_at: "2024-01-15T09:30:00Z",
                        usage_type: "usage_type",
                    },
                    metered_yearly_price: {
                        billing_scheme: "billing_scheme",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        id: "id",
                        interval: "interval",
                        is_active: true,
                        package_size: 1,
                        price: 1,
                        price_external_id: "price_external_id",
                        price_id: "price_id",
                        price_tier: [{}],
                        product_external_id: "product_external_id",
                        product_id: "product_id",
                        product_name: "product_name",
                        updated_at: "2024-01-15T09:30:00Z",
                        usage_type: "usage_type",
                    },
                    metric_period: "metric_period",
                    metric_period_month_reset: "metric_period_month_reset",
                    plan: {
                        created_at: "2024-01-15T09:30:00Z",
                        description: "description",
                        icon: "icon",
                        id: "id",
                        name: "name",
                        plan_type: "plan_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    plan_id: "plan_id",
                    price_behavior: "price_behavior",
                    rule_id: "rule_id",
                    rule_id_usage_exceeded: "rule_id_usage_exceeded",
                    soft_limit: 1,
                    updated_at: "2024-01-15T09:30:00Z",
                    usage_based_product: {
                        account_id: "account_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        is_active: true,
                        name: "name",
                        price: 1.1,
                        product_id: "product_id",
                        quantity: 1.1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    value_bool: true,
                    value_credit: {
                        burn_strategy: "burn_strategy",
                        created_at: "2024-01-15T09:30:00Z",
                        default_expiry_unit: "default_expiry_unit",
                        default_rollover_policy: "default_rollover_policy",
                        description: "description",
                        id: "id",
                        name: "name",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    value_numeric: 1,
                    value_trait: {
                        created_at: "2024-01-15T09:30:00Z",
                        display_name: "display_name",
                        entity_type: "entity_type",
                        hierarchy: ["hierarchy"],
                        id: "id",
                        trait_type: "trait_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    value_trait_id: "value_trait_id",
                    value_type: "value_type",
                },
            ],
            params: {
                feature_id: "feature_id",
                feature_ids: ["feature_ids"],
                ids: ["ids"],
                limit: 1,
                offset: 1,
                plan_id: "plan_id",
                plan_ids: ["plan_ids"],
                q: "q",
                with_metered_products: true,
            },
        };
        server.mockEndpoint().get("/plan-entitlements").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.entitlements.listPlanEntitlements({
            feature_id: "feature_id",
            plan_id: "plan_id",
            q: "q",
            with_metered_products: true,
            limit: 1,
            offset: 1,
        });
        expect(response).toEqual({
            data: [
                {
                    billing_threshold: 1,
                    consumption_rate: 1.1,
                    created_at: "2024-01-15T09:30:00Z",
                    environment_id: "environment_id",
                    feature: {
                        created_at: "2024-01-15T09:30:00Z",
                        description: "description",
                        feature_type: "feature_type",
                        icon: "icon",
                        id: "id",
                        name: "name",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    feature_id: "feature_id",
                    id: "id",
                    metered_monthly_price: {
                        billing_scheme: "billing_scheme",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        id: "id",
                        interval: "interval",
                        is_active: true,
                        package_size: 1,
                        price: 1,
                        price_external_id: "price_external_id",
                        price_id: "price_id",
                        price_tier: [{}],
                        product_external_id: "product_external_id",
                        product_id: "product_id",
                        product_name: "product_name",
                        updated_at: "2024-01-15T09:30:00Z",
                        usage_type: "usage_type",
                    },
                    metered_yearly_price: {
                        billing_scheme: "billing_scheme",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        id: "id",
                        interval: "interval",
                        is_active: true,
                        package_size: 1,
                        price: 1,
                        price_external_id: "price_external_id",
                        price_id: "price_id",
                        price_tier: [{}],
                        product_external_id: "product_external_id",
                        product_id: "product_id",
                        product_name: "product_name",
                        updated_at: "2024-01-15T09:30:00Z",
                        usage_type: "usage_type",
                    },
                    metric_period: "metric_period",
                    metric_period_month_reset: "metric_period_month_reset",
                    plan: {
                        created_at: "2024-01-15T09:30:00Z",
                        description: "description",
                        icon: "icon",
                        id: "id",
                        name: "name",
                        plan_type: "plan_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    plan_id: "plan_id",
                    price_behavior: "price_behavior",
                    rule_id: "rule_id",
                    rule_id_usage_exceeded: "rule_id_usage_exceeded",
                    soft_limit: 1,
                    updated_at: "2024-01-15T09:30:00Z",
                    usage_based_product: {
                        account_id: "account_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        is_active: true,
                        name: "name",
                        price: 1.1,
                        product_id: "product_id",
                        quantity: 1.1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    value_bool: true,
                    value_credit: {
                        burn_strategy: "burn_strategy",
                        created_at: "2024-01-15T09:30:00Z",
                        default_expiry_unit: "default_expiry_unit",
                        default_rollover_policy: "default_rollover_policy",
                        description: "description",
                        id: "id",
                        name: "name",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    value_numeric: 1,
                    value_trait: {
                        created_at: "2024-01-15T09:30:00Z",
                        display_name: "display_name",
                        entity_type: "entity_type",
                        hierarchy: ["hierarchy"],
                        id: "id",
                        trait_type: "trait_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    value_trait_id: "value_trait_id",
                    value_type: "value_type",
                },
            ],
            params: {
                feature_id: "feature_id",
                feature_ids: ["feature_ids"],
                ids: ["ids"],
                limit: 1,
                offset: 1,
                plan_id: "plan_id",
                plan_ids: ["plan_ids"],
                q: "q",
                with_metered_products: true,
            },
        });
    });

    test("listPlanEntitlements (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/plan-entitlements").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.entitlements.listPlanEntitlements();
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("listPlanEntitlements (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/plan-entitlements").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.entitlements.listPlanEntitlements();
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("listPlanEntitlements (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/plan-entitlements").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.entitlements.listPlanEntitlements();
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("listPlanEntitlements (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/plan-entitlements").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.entitlements.listPlanEntitlements();
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("listPlanEntitlements (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/plan-entitlements").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.entitlements.listPlanEntitlements();
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("createPlanEntitlement (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { feature_id: "feature_id", plan_id: "plan_id", value_type: "boolean" };
        const rawResponseBody = {
            data: {
                billing_threshold: 1,
                consumption_rate: 1.1,
                created_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                feature: {
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    event_subtype: "event_subtype",
                    feature_type: "feature_type",
                    icon: "icon",
                    id: "id",
                    lifecycle_phase: "lifecycle_phase",
                    maintainer_id: "maintainer_id",
                    name: "name",
                    plural_name: "plural_name",
                    singular_name: "singular_name",
                    trait_id: "trait_id",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                feature_id: "feature_id",
                id: "id",
                metered_monthly_price: {
                    billing_scheme: "billing_scheme",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    id: "id",
                    interval: "interval",
                    is_active: true,
                    meter_event_name: "meter_event_name",
                    meter_event_payload_key: "meter_event_payload_key",
                    meter_id: "meter_id",
                    package_size: 1,
                    price: 1,
                    price_decimal: "price_decimal",
                    price_external_id: "price_external_id",
                    price_id: "price_id",
                    price_tier: [{}],
                    product_external_id: "product_external_id",
                    product_id: "product_id",
                    product_name: "product_name",
                    tiers_mode: "tiers_mode",
                    updated_at: "2024-01-15T09:30:00Z",
                    usage_type: "usage_type",
                },
                metered_yearly_price: {
                    billing_scheme: "billing_scheme",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    id: "id",
                    interval: "interval",
                    is_active: true,
                    meter_event_name: "meter_event_name",
                    meter_event_payload_key: "meter_event_payload_key",
                    meter_id: "meter_id",
                    package_size: 1,
                    price: 1,
                    price_decimal: "price_decimal",
                    price_external_id: "price_external_id",
                    price_id: "price_id",
                    price_tier: [{}],
                    product_external_id: "product_external_id",
                    product_id: "product_id",
                    product_name: "product_name",
                    tiers_mode: "tiers_mode",
                    updated_at: "2024-01-15T09:30:00Z",
                    usage_type: "usage_type",
                },
                metric_period: "metric_period",
                metric_period_month_reset: "metric_period_month_reset",
                plan: {
                    audience_type: "audience_type",
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    icon: "icon",
                    id: "id",
                    name: "name",
                    plan_type: "plan_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                plan_id: "plan_id",
                price_behavior: "price_behavior",
                rule_id: "rule_id",
                rule_id_usage_exceeded: "rule_id_usage_exceeded",
                soft_limit: 1,
                updated_at: "2024-01-15T09:30:00Z",
                usage_based_product: {
                    account_id: "account_id",
                    created_at: "2024-01-15T09:30:00Z",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    is_active: true,
                    name: "name",
                    price: 1.1,
                    price_decimal: "price_decimal",
                    product_id: "product_id",
                    quantity: 1.1,
                    updated_at: "2024-01-15T09:30:00Z",
                },
                value_bool: true,
                value_credit: {
                    burn_strategy: "burn_strategy",
                    created_at: "2024-01-15T09:30:00Z",
                    default_expiry_unit: "default_expiry_unit",
                    default_expiry_unit_count: 1,
                    default_rollover_policy: "default_rollover_policy",
                    description: "description",
                    icon: "icon",
                    id: "id",
                    name: "name",
                    plural_name: "plural_name",
                    price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    product: {
                        account_id: "account_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        is_active: true,
                        name: "name",
                        price: 1.1,
                        product_id: "product_id",
                        quantity: 1.1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    singular_name: "singular_name",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                value_numeric: 1,
                value_trait: {
                    created_at: "2024-01-15T09:30:00Z",
                    display_name: "display_name",
                    entity_type: "entity_type",
                    hierarchy: ["hierarchy"],
                    id: "id",
                    trait_type: "trait_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                value_trait_id: "value_trait_id",
                value_type: "value_type",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/plan-entitlements")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entitlements.createPlanEntitlement({
            feature_id: "feature_id",
            plan_id: "plan_id",
            value_type: "boolean",
        });
        expect(response).toEqual({
            data: {
                billing_threshold: 1,
                consumption_rate: 1.1,
                created_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                feature: {
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    event_subtype: "event_subtype",
                    feature_type: "feature_type",
                    icon: "icon",
                    id: "id",
                    lifecycle_phase: "lifecycle_phase",
                    maintainer_id: "maintainer_id",
                    name: "name",
                    plural_name: "plural_name",
                    singular_name: "singular_name",
                    trait_id: "trait_id",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                feature_id: "feature_id",
                id: "id",
                metered_monthly_price: {
                    billing_scheme: "billing_scheme",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    id: "id",
                    interval: "interval",
                    is_active: true,
                    meter_event_name: "meter_event_name",
                    meter_event_payload_key: "meter_event_payload_key",
                    meter_id: "meter_id",
                    package_size: 1,
                    price: 1,
                    price_decimal: "price_decimal",
                    price_external_id: "price_external_id",
                    price_id: "price_id",
                    price_tier: [{}],
                    product_external_id: "product_external_id",
                    product_id: "product_id",
                    product_name: "product_name",
                    tiers_mode: "tiers_mode",
                    updated_at: "2024-01-15T09:30:00Z",
                    usage_type: "usage_type",
                },
                metered_yearly_price: {
                    billing_scheme: "billing_scheme",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    id: "id",
                    interval: "interval",
                    is_active: true,
                    meter_event_name: "meter_event_name",
                    meter_event_payload_key: "meter_event_payload_key",
                    meter_id: "meter_id",
                    package_size: 1,
                    price: 1,
                    price_decimal: "price_decimal",
                    price_external_id: "price_external_id",
                    price_id: "price_id",
                    price_tier: [{}],
                    product_external_id: "product_external_id",
                    product_id: "product_id",
                    product_name: "product_name",
                    tiers_mode: "tiers_mode",
                    updated_at: "2024-01-15T09:30:00Z",
                    usage_type: "usage_type",
                },
                metric_period: "metric_period",
                metric_period_month_reset: "metric_period_month_reset",
                plan: {
                    audience_type: "audience_type",
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    icon: "icon",
                    id: "id",
                    name: "name",
                    plan_type: "plan_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                plan_id: "plan_id",
                price_behavior: "price_behavior",
                rule_id: "rule_id",
                rule_id_usage_exceeded: "rule_id_usage_exceeded",
                soft_limit: 1,
                updated_at: "2024-01-15T09:30:00Z",
                usage_based_product: {
                    account_id: "account_id",
                    created_at: "2024-01-15T09:30:00Z",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    is_active: true,
                    name: "name",
                    price: 1.1,
                    price_decimal: "price_decimal",
                    product_id: "product_id",
                    quantity: 1.1,
                    updated_at: "2024-01-15T09:30:00Z",
                },
                value_bool: true,
                value_credit: {
                    burn_strategy: "burn_strategy",
                    created_at: "2024-01-15T09:30:00Z",
                    default_expiry_unit: "default_expiry_unit",
                    default_expiry_unit_count: 1,
                    default_rollover_policy: "default_rollover_policy",
                    description: "description",
                    icon: "icon",
                    id: "id",
                    name: "name",
                    plural_name: "plural_name",
                    price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    product: {
                        account_id: "account_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        is_active: true,
                        name: "name",
                        price: 1.1,
                        product_id: "product_id",
                        quantity: 1.1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    singular_name: "singular_name",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                value_numeric: 1,
                value_trait: {
                    created_at: "2024-01-15T09:30:00Z",
                    display_name: "display_name",
                    entity_type: "entity_type",
                    hierarchy: ["hierarchy"],
                    id: "id",
                    trait_type: "trait_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                value_trait_id: "value_trait_id",
                value_type: "value_type",
            },
            params: {
                key: "value",
            },
        });
    });

    test("createPlanEntitlement (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { feature_id: "feature_id", plan_id: "plan_id", value_type: "boolean" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/plan-entitlements")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.createPlanEntitlement({
                feature_id: "feature_id",
                plan_id: "plan_id",
                value_type: "boolean",
            });
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("createPlanEntitlement (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { feature_id: "feature_id", plan_id: "plan_id", value_type: "boolean" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/plan-entitlements")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.createPlanEntitlement({
                feature_id: "feature_id",
                plan_id: "plan_id",
                value_type: "boolean",
            });
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("createPlanEntitlement (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { feature_id: "feature_id", plan_id: "plan_id", value_type: "boolean" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/plan-entitlements")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.createPlanEntitlement({
                feature_id: "feature_id",
                plan_id: "plan_id",
                value_type: "boolean",
            });
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("createPlanEntitlement (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { feature_id: "feature_id", plan_id: "plan_id", value_type: "boolean" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/plan-entitlements")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.createPlanEntitlement({
                feature_id: "feature_id",
                plan_id: "plan_id",
                value_type: "boolean",
            });
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("createPlanEntitlement (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { feature_id: "feature_id", plan_id: "plan_id", value_type: "boolean" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/plan-entitlements")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.createPlanEntitlement({
                feature_id: "feature_id",
                plan_id: "plan_id",
                value_type: "boolean",
            });
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("getPlanEntitlement (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                billing_threshold: 1,
                consumption_rate: 1.1,
                created_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                feature: {
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    event_subtype: "event_subtype",
                    feature_type: "feature_type",
                    icon: "icon",
                    id: "id",
                    lifecycle_phase: "lifecycle_phase",
                    maintainer_id: "maintainer_id",
                    name: "name",
                    plural_name: "plural_name",
                    singular_name: "singular_name",
                    trait_id: "trait_id",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                feature_id: "feature_id",
                id: "id",
                metered_monthly_price: {
                    billing_scheme: "billing_scheme",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    id: "id",
                    interval: "interval",
                    is_active: true,
                    meter_event_name: "meter_event_name",
                    meter_event_payload_key: "meter_event_payload_key",
                    meter_id: "meter_id",
                    package_size: 1,
                    price: 1,
                    price_decimal: "price_decimal",
                    price_external_id: "price_external_id",
                    price_id: "price_id",
                    price_tier: [{}],
                    product_external_id: "product_external_id",
                    product_id: "product_id",
                    product_name: "product_name",
                    tiers_mode: "tiers_mode",
                    updated_at: "2024-01-15T09:30:00Z",
                    usage_type: "usage_type",
                },
                metered_yearly_price: {
                    billing_scheme: "billing_scheme",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    id: "id",
                    interval: "interval",
                    is_active: true,
                    meter_event_name: "meter_event_name",
                    meter_event_payload_key: "meter_event_payload_key",
                    meter_id: "meter_id",
                    package_size: 1,
                    price: 1,
                    price_decimal: "price_decimal",
                    price_external_id: "price_external_id",
                    price_id: "price_id",
                    price_tier: [{}],
                    product_external_id: "product_external_id",
                    product_id: "product_id",
                    product_name: "product_name",
                    tiers_mode: "tiers_mode",
                    updated_at: "2024-01-15T09:30:00Z",
                    usage_type: "usage_type",
                },
                metric_period: "metric_period",
                metric_period_month_reset: "metric_period_month_reset",
                plan: {
                    audience_type: "audience_type",
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    icon: "icon",
                    id: "id",
                    name: "name",
                    plan_type: "plan_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                plan_id: "plan_id",
                price_behavior: "price_behavior",
                rule_id: "rule_id",
                rule_id_usage_exceeded: "rule_id_usage_exceeded",
                soft_limit: 1,
                updated_at: "2024-01-15T09:30:00Z",
                usage_based_product: {
                    account_id: "account_id",
                    created_at: "2024-01-15T09:30:00Z",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    is_active: true,
                    name: "name",
                    price: 1.1,
                    price_decimal: "price_decimal",
                    product_id: "product_id",
                    quantity: 1.1,
                    updated_at: "2024-01-15T09:30:00Z",
                },
                value_bool: true,
                value_credit: {
                    burn_strategy: "burn_strategy",
                    created_at: "2024-01-15T09:30:00Z",
                    default_expiry_unit: "default_expiry_unit",
                    default_expiry_unit_count: 1,
                    default_rollover_policy: "default_rollover_policy",
                    description: "description",
                    icon: "icon",
                    id: "id",
                    name: "name",
                    plural_name: "plural_name",
                    price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    product: {
                        account_id: "account_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        is_active: true,
                        name: "name",
                        price: 1.1,
                        product_id: "product_id",
                        quantity: 1.1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    singular_name: "singular_name",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                value_numeric: 1,
                value_trait: {
                    created_at: "2024-01-15T09:30:00Z",
                    display_name: "display_name",
                    entity_type: "entity_type",
                    hierarchy: ["hierarchy"],
                    id: "id",
                    trait_type: "trait_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                value_trait_id: "value_trait_id",
                value_type: "value_type",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .get("/plan-entitlements/plan_entitlement_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entitlements.getPlanEntitlement("plan_entitlement_id");
        expect(response).toEqual({
            data: {
                billing_threshold: 1,
                consumption_rate: 1.1,
                created_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                feature: {
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    event_subtype: "event_subtype",
                    feature_type: "feature_type",
                    icon: "icon",
                    id: "id",
                    lifecycle_phase: "lifecycle_phase",
                    maintainer_id: "maintainer_id",
                    name: "name",
                    plural_name: "plural_name",
                    singular_name: "singular_name",
                    trait_id: "trait_id",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                feature_id: "feature_id",
                id: "id",
                metered_monthly_price: {
                    billing_scheme: "billing_scheme",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    id: "id",
                    interval: "interval",
                    is_active: true,
                    meter_event_name: "meter_event_name",
                    meter_event_payload_key: "meter_event_payload_key",
                    meter_id: "meter_id",
                    package_size: 1,
                    price: 1,
                    price_decimal: "price_decimal",
                    price_external_id: "price_external_id",
                    price_id: "price_id",
                    price_tier: [{}],
                    product_external_id: "product_external_id",
                    product_id: "product_id",
                    product_name: "product_name",
                    tiers_mode: "tiers_mode",
                    updated_at: "2024-01-15T09:30:00Z",
                    usage_type: "usage_type",
                },
                metered_yearly_price: {
                    billing_scheme: "billing_scheme",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    id: "id",
                    interval: "interval",
                    is_active: true,
                    meter_event_name: "meter_event_name",
                    meter_event_payload_key: "meter_event_payload_key",
                    meter_id: "meter_id",
                    package_size: 1,
                    price: 1,
                    price_decimal: "price_decimal",
                    price_external_id: "price_external_id",
                    price_id: "price_id",
                    price_tier: [{}],
                    product_external_id: "product_external_id",
                    product_id: "product_id",
                    product_name: "product_name",
                    tiers_mode: "tiers_mode",
                    updated_at: "2024-01-15T09:30:00Z",
                    usage_type: "usage_type",
                },
                metric_period: "metric_period",
                metric_period_month_reset: "metric_period_month_reset",
                plan: {
                    audience_type: "audience_type",
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    icon: "icon",
                    id: "id",
                    name: "name",
                    plan_type: "plan_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                plan_id: "plan_id",
                price_behavior: "price_behavior",
                rule_id: "rule_id",
                rule_id_usage_exceeded: "rule_id_usage_exceeded",
                soft_limit: 1,
                updated_at: "2024-01-15T09:30:00Z",
                usage_based_product: {
                    account_id: "account_id",
                    created_at: "2024-01-15T09:30:00Z",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    is_active: true,
                    name: "name",
                    price: 1.1,
                    price_decimal: "price_decimal",
                    product_id: "product_id",
                    quantity: 1.1,
                    updated_at: "2024-01-15T09:30:00Z",
                },
                value_bool: true,
                value_credit: {
                    burn_strategy: "burn_strategy",
                    created_at: "2024-01-15T09:30:00Z",
                    default_expiry_unit: "default_expiry_unit",
                    default_expiry_unit_count: 1,
                    default_rollover_policy: "default_rollover_policy",
                    description: "description",
                    icon: "icon",
                    id: "id",
                    name: "name",
                    plural_name: "plural_name",
                    price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    product: {
                        account_id: "account_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        is_active: true,
                        name: "name",
                        price: 1.1,
                        product_id: "product_id",
                        quantity: 1.1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    singular_name: "singular_name",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                value_numeric: 1,
                value_trait: {
                    created_at: "2024-01-15T09:30:00Z",
                    display_name: "display_name",
                    entity_type: "entity_type",
                    hierarchy: ["hierarchy"],
                    id: "id",
                    trait_type: "trait_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                value_trait_id: "value_trait_id",
                value_type: "value_type",
            },
            params: {
                key: "value",
            },
        });
    });

    test("getPlanEntitlement (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/plan-entitlements/plan_entitlement_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.getPlanEntitlement("plan_entitlement_id");
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("getPlanEntitlement (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/plan-entitlements/plan_entitlement_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.getPlanEntitlement("plan_entitlement_id");
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("getPlanEntitlement (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/plan-entitlements/plan_entitlement_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.getPlanEntitlement("plan_entitlement_id");
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("getPlanEntitlement (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/plan-entitlements/plan_entitlement_id")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.getPlanEntitlement("plan_entitlement_id");
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("updatePlanEntitlement (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { value_type: "boolean" };
        const rawResponseBody = {
            data: {
                billing_threshold: 1,
                consumption_rate: 1.1,
                created_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                feature: {
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    event_subtype: "event_subtype",
                    feature_type: "feature_type",
                    icon: "icon",
                    id: "id",
                    lifecycle_phase: "lifecycle_phase",
                    maintainer_id: "maintainer_id",
                    name: "name",
                    plural_name: "plural_name",
                    singular_name: "singular_name",
                    trait_id: "trait_id",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                feature_id: "feature_id",
                id: "id",
                metered_monthly_price: {
                    billing_scheme: "billing_scheme",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    id: "id",
                    interval: "interval",
                    is_active: true,
                    meter_event_name: "meter_event_name",
                    meter_event_payload_key: "meter_event_payload_key",
                    meter_id: "meter_id",
                    package_size: 1,
                    price: 1,
                    price_decimal: "price_decimal",
                    price_external_id: "price_external_id",
                    price_id: "price_id",
                    price_tier: [{}],
                    product_external_id: "product_external_id",
                    product_id: "product_id",
                    product_name: "product_name",
                    tiers_mode: "tiers_mode",
                    updated_at: "2024-01-15T09:30:00Z",
                    usage_type: "usage_type",
                },
                metered_yearly_price: {
                    billing_scheme: "billing_scheme",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    id: "id",
                    interval: "interval",
                    is_active: true,
                    meter_event_name: "meter_event_name",
                    meter_event_payload_key: "meter_event_payload_key",
                    meter_id: "meter_id",
                    package_size: 1,
                    price: 1,
                    price_decimal: "price_decimal",
                    price_external_id: "price_external_id",
                    price_id: "price_id",
                    price_tier: [{}],
                    product_external_id: "product_external_id",
                    product_id: "product_id",
                    product_name: "product_name",
                    tiers_mode: "tiers_mode",
                    updated_at: "2024-01-15T09:30:00Z",
                    usage_type: "usage_type",
                },
                metric_period: "metric_period",
                metric_period_month_reset: "metric_period_month_reset",
                plan: {
                    audience_type: "audience_type",
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    icon: "icon",
                    id: "id",
                    name: "name",
                    plan_type: "plan_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                plan_id: "plan_id",
                price_behavior: "price_behavior",
                rule_id: "rule_id",
                rule_id_usage_exceeded: "rule_id_usage_exceeded",
                soft_limit: 1,
                updated_at: "2024-01-15T09:30:00Z",
                usage_based_product: {
                    account_id: "account_id",
                    created_at: "2024-01-15T09:30:00Z",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    is_active: true,
                    name: "name",
                    price: 1.1,
                    price_decimal: "price_decimal",
                    product_id: "product_id",
                    quantity: 1.1,
                    updated_at: "2024-01-15T09:30:00Z",
                },
                value_bool: true,
                value_credit: {
                    burn_strategy: "burn_strategy",
                    created_at: "2024-01-15T09:30:00Z",
                    default_expiry_unit: "default_expiry_unit",
                    default_expiry_unit_count: 1,
                    default_rollover_policy: "default_rollover_policy",
                    description: "description",
                    icon: "icon",
                    id: "id",
                    name: "name",
                    plural_name: "plural_name",
                    price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    product: {
                        account_id: "account_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        is_active: true,
                        name: "name",
                        price: 1.1,
                        product_id: "product_id",
                        quantity: 1.1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    singular_name: "singular_name",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                value_numeric: 1,
                value_trait: {
                    created_at: "2024-01-15T09:30:00Z",
                    display_name: "display_name",
                    entity_type: "entity_type",
                    hierarchy: ["hierarchy"],
                    id: "id",
                    trait_type: "trait_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                value_trait_id: "value_trait_id",
                value_type: "value_type",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .put("/plan-entitlements/plan_entitlement_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entitlements.updatePlanEntitlement("plan_entitlement_id", {
            value_type: "boolean",
        });
        expect(response).toEqual({
            data: {
                billing_threshold: 1,
                consumption_rate: 1.1,
                created_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                feature: {
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    event_subtype: "event_subtype",
                    feature_type: "feature_type",
                    icon: "icon",
                    id: "id",
                    lifecycle_phase: "lifecycle_phase",
                    maintainer_id: "maintainer_id",
                    name: "name",
                    plural_name: "plural_name",
                    singular_name: "singular_name",
                    trait_id: "trait_id",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                feature_id: "feature_id",
                id: "id",
                metered_monthly_price: {
                    billing_scheme: "billing_scheme",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    id: "id",
                    interval: "interval",
                    is_active: true,
                    meter_event_name: "meter_event_name",
                    meter_event_payload_key: "meter_event_payload_key",
                    meter_id: "meter_id",
                    package_size: 1,
                    price: 1,
                    price_decimal: "price_decimal",
                    price_external_id: "price_external_id",
                    price_id: "price_id",
                    price_tier: [{}],
                    product_external_id: "product_external_id",
                    product_id: "product_id",
                    product_name: "product_name",
                    tiers_mode: "tiers_mode",
                    updated_at: "2024-01-15T09:30:00Z",
                    usage_type: "usage_type",
                },
                metered_yearly_price: {
                    billing_scheme: "billing_scheme",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    id: "id",
                    interval: "interval",
                    is_active: true,
                    meter_event_name: "meter_event_name",
                    meter_event_payload_key: "meter_event_payload_key",
                    meter_id: "meter_id",
                    package_size: 1,
                    price: 1,
                    price_decimal: "price_decimal",
                    price_external_id: "price_external_id",
                    price_id: "price_id",
                    price_tier: [{}],
                    product_external_id: "product_external_id",
                    product_id: "product_id",
                    product_name: "product_name",
                    tiers_mode: "tiers_mode",
                    updated_at: "2024-01-15T09:30:00Z",
                    usage_type: "usage_type",
                },
                metric_period: "metric_period",
                metric_period_month_reset: "metric_period_month_reset",
                plan: {
                    audience_type: "audience_type",
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    icon: "icon",
                    id: "id",
                    name: "name",
                    plan_type: "plan_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                plan_id: "plan_id",
                price_behavior: "price_behavior",
                rule_id: "rule_id",
                rule_id_usage_exceeded: "rule_id_usage_exceeded",
                soft_limit: 1,
                updated_at: "2024-01-15T09:30:00Z",
                usage_based_product: {
                    account_id: "account_id",
                    created_at: "2024-01-15T09:30:00Z",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    is_active: true,
                    name: "name",
                    price: 1.1,
                    price_decimal: "price_decimal",
                    product_id: "product_id",
                    quantity: 1.1,
                    updated_at: "2024-01-15T09:30:00Z",
                },
                value_bool: true,
                value_credit: {
                    burn_strategy: "burn_strategy",
                    created_at: "2024-01-15T09:30:00Z",
                    default_expiry_unit: "default_expiry_unit",
                    default_expiry_unit_count: 1,
                    default_rollover_policy: "default_rollover_policy",
                    description: "description",
                    icon: "icon",
                    id: "id",
                    name: "name",
                    plural_name: "plural_name",
                    price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    product: {
                        account_id: "account_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        is_active: true,
                        name: "name",
                        price: 1.1,
                        product_id: "product_id",
                        quantity: 1.1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    singular_name: "singular_name",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                value_numeric: 1,
                value_trait: {
                    created_at: "2024-01-15T09:30:00Z",
                    display_name: "display_name",
                    entity_type: "entity_type",
                    hierarchy: ["hierarchy"],
                    id: "id",
                    trait_type: "trait_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                value_trait_id: "value_trait_id",
                value_type: "value_type",
            },
            params: {
                key: "value",
            },
        });
    });

    test("updatePlanEntitlement (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { value_type: "boolean" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/plan-entitlements/plan_entitlement_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.updatePlanEntitlement("plan_entitlement_id", {
                value_type: "boolean",
            });
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("updatePlanEntitlement (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { value_type: "boolean" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/plan-entitlements/plan_entitlement_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.updatePlanEntitlement("plan_entitlement_id", {
                value_type: "boolean",
            });
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("updatePlanEntitlement (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { value_type: "boolean" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/plan-entitlements/plan_entitlement_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.updatePlanEntitlement("plan_entitlement_id", {
                value_type: "boolean",
            });
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("updatePlanEntitlement (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { value_type: "boolean" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/plan-entitlements/plan_entitlement_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.updatePlanEntitlement("plan_entitlement_id", {
                value_type: "boolean",
            });
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("updatePlanEntitlement (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { value_type: "boolean" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/plan-entitlements/plan_entitlement_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.updatePlanEntitlement("plan_entitlement_id", {
                value_type: "boolean",
            });
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("deletePlanEntitlement (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { data: { deleted: true }, params: { key: "value" } };
        server
            .mockEndpoint()
            .delete("/plan-entitlements/plan_entitlement_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entitlements.deletePlanEntitlement("plan_entitlement_id");
        expect(response).toEqual({
            data: {
                deleted: true,
            },
            params: {
                key: "value",
            },
        });
    });

    test("deletePlanEntitlement (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .delete("/plan-entitlements/plan_entitlement_id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.deletePlanEntitlement("plan_entitlement_id");
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("deletePlanEntitlement (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .delete("/plan-entitlements/plan_entitlement_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.deletePlanEntitlement("plan_entitlement_id");
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("deletePlanEntitlement (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .delete("/plan-entitlements/plan_entitlement_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.deletePlanEntitlement("plan_entitlement_id");
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("deletePlanEntitlement (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .delete("/plan-entitlements/plan_entitlement_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.deletePlanEntitlement("plan_entitlement_id");
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("deletePlanEntitlement (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .delete("/plan-entitlements/plan_entitlement_id")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.deletePlanEntitlement("plan_entitlement_id");
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("countPlanEntitlements (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: { count: 1 },
            params: {
                feature_id: "feature_id",
                feature_ids: ["feature_ids"],
                ids: ["ids"],
                limit: 1,
                offset: 1,
                plan_id: "plan_id",
                plan_ids: ["plan_ids"],
                q: "q",
                with_metered_products: true,
            },
        };
        server
            .mockEndpoint()
            .get("/plan-entitlements/count")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.entitlements.countPlanEntitlements({
            feature_id: "feature_id",
            plan_id: "plan_id",
            q: "q",
            with_metered_products: true,
            limit: 1,
            offset: 1,
        });
        expect(response).toEqual({
            data: {
                count: 1,
            },
            params: {
                feature_id: "feature_id",
                feature_ids: ["feature_ids"],
                ids: ["ids"],
                limit: 1,
                offset: 1,
                plan_id: "plan_id",
                plan_ids: ["plan_ids"],
                q: "q",
                with_metered_products: true,
            },
        });
    });

    test("countPlanEntitlements (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/plan-entitlements/count")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.countPlanEntitlements();
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("countPlanEntitlements (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/plan-entitlements/count")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.countPlanEntitlements();
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("countPlanEntitlements (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/plan-entitlements/count")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.countPlanEntitlements();
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("countPlanEntitlements (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/plan-entitlements/count")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.countPlanEntitlements();
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("countPlanEntitlements (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/plan-entitlements/count")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.entitlements.countPlanEntitlements();
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("getFeatureUsageByCompany (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                features: [
                    {
                        access: true,
                        allocation: 1,
                        allocation_type: "boolean",
                        company_override: {
                            company: {
                                add_ons: [
                                    { id: "id", name: "name" },
                                    { id: "id", name: "name" },
                                ],
                                billing_credit_balances: { billing_credit_balances: 1.1 },
                                billing_subscription: {
                                    cancel_at_period_end: true,
                                    created_at: "2024-01-15T09:30:00Z",
                                    currency: "currency",
                                    customer_external_id: "customer_external_id",
                                    discounts: [],
                                    id: "id",
                                    interval: "interval",
                                    period_end: 1,
                                    period_start: 1,
                                    products: [],
                                    status: "status",
                                    subscription_external_id: "subscription_external_id",
                                    total_price: 1,
                                },
                                billing_subscriptions: [
                                    {
                                        cancel_at_period_end: true,
                                        created_at: "2024-01-15T09:30:00Z",
                                        currency: "currency",
                                        customer_external_id: "customer_external_id",
                                        discounts: [],
                                        id: "id",
                                        interval: "interval",
                                        period_end: 1,
                                        period_start: 1,
                                        products: [],
                                        status: "status",
                                        subscription_external_id: "subscription_external_id",
                                        total_price: 1,
                                    },
                                    {
                                        cancel_at_period_end: true,
                                        created_at: "2024-01-15T09:30:00Z",
                                        currency: "currency",
                                        customer_external_id: "customer_external_id",
                                        discounts: [],
                                        id: "id",
                                        interval: "interval",
                                        period_end: 1,
                                        period_start: 1,
                                        products: [],
                                        status: "status",
                                        subscription_external_id: "subscription_external_id",
                                        total_price: 1,
                                    },
                                ],
                                created_at: "2024-01-15T09:30:00Z",
                                default_payment_method: {
                                    created_at: "2024-01-15T09:30:00Z",
                                    customer_external_id: "customer_external_id",
                                    environment_id: "environment_id",
                                    external_id: "external_id",
                                    id: "id",
                                    payment_method_type: "payment_method_type",
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                                entity_traits: [
                                    {
                                        created_at: "2024-01-15T09:30:00Z",
                                        definition_id: "definition_id",
                                        environment_id: "environment_id",
                                        id: "id",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        value: "value",
                                    },
                                    {
                                        created_at: "2024-01-15T09:30:00Z",
                                        definition_id: "definition_id",
                                        environment_id: "environment_id",
                                        id: "id",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        value: "value",
                                    },
                                ],
                                environment_id: "environment_id",
                                id: "id",
                                keys: [
                                    {
                                        created_at: "2024-01-15T09:30:00Z",
                                        definition_id: "definition_id",
                                        entity_id: "entity_id",
                                        entity_type: "entity_type",
                                        environment_id: "environment_id",
                                        id: "id",
                                        key: "key",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        value: "value",
                                    },
                                    {
                                        created_at: "2024-01-15T09:30:00Z",
                                        definition_id: "definition_id",
                                        entity_id: "entity_id",
                                        entity_type: "entity_type",
                                        environment_id: "environment_id",
                                        id: "id",
                                        key: "key",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        value: "value",
                                    },
                                ],
                                last_seen_at: "2024-01-15T09:30:00Z",
                                logo_url: "logo_url",
                                metrics: [
                                    {
                                        account_id: "account_id",
                                        captured_at_max: "2024-01-15T09:30:00Z",
                                        captured_at_min: "2024-01-15T09:30:00Z",
                                        company_id: "company_id",
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        event_subtype: "event_subtype",
                                        month_reset: "month_reset",
                                        period: "period",
                                        value: 1,
                                    },
                                    {
                                        account_id: "account_id",
                                        captured_at_max: "2024-01-15T09:30:00Z",
                                        captured_at_min: "2024-01-15T09:30:00Z",
                                        company_id: "company_id",
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        event_subtype: "event_subtype",
                                        month_reset: "month_reset",
                                        period: "period",
                                        value: 1,
                                    },
                                ],
                                name: "name",
                                payment_methods: [
                                    {
                                        created_at: "2024-01-15T09:30:00Z",
                                        customer_external_id: "customer_external_id",
                                        environment_id: "environment_id",
                                        external_id: "external_id",
                                        id: "id",
                                        payment_method_type: "payment_method_type",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                    {
                                        created_at: "2024-01-15T09:30:00Z",
                                        customer_external_id: "customer_external_id",
                                        environment_id: "environment_id",
                                        external_id: "external_id",
                                        id: "id",
                                        payment_method_type: "payment_method_type",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                ],
                                plan: { id: "id", name: "name" },
                                plans: [
                                    { id: "id", name: "name" },
                                    { id: "id", name: "name" },
                                ],
                                rules: [
                                    {
                                        account_id: "account_id",
                                        condition_groups: [],
                                        conditions: [],
                                        environment_id: "environment_id",
                                        id: "id",
                                        name: "name",
                                        priority: 1,
                                        rule_type: "rule_type",
                                        value: true,
                                    },
                                    {
                                        account_id: "account_id",
                                        condition_groups: [],
                                        conditions: [],
                                        environment_id: "environment_id",
                                        id: "id",
                                        name: "name",
                                        priority: 1,
                                        rule_type: "rule_type",
                                        value: true,
                                    },
                                ],
                                traits: { traits: { key: "value" } },
                                updated_at: "2024-01-15T09:30:00Z",
                                user_count: 1,
                            },
                            company_id: "company_id",
                            consumption_rate: 1.1,
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            expiration_date: "2024-01-15T09:30:00Z",
                            feature: {
                                created_at: "2024-01-15T09:30:00Z",
                                description: "description",
                                event_subtype: "event_subtype",
                                feature_type: "feature_type",
                                icon: "icon",
                                id: "id",
                                lifecycle_phase: "lifecycle_phase",
                                maintainer_id: "maintainer_id",
                                name: "name",
                                plural_name: "plural_name",
                                singular_name: "singular_name",
                                trait_id: "trait_id",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            feature_id: "feature_id",
                            id: "id",
                            metric_period: "metric_period",
                            metric_period_month_reset: "metric_period_month_reset",
                            notes: [
                                {
                                    created_at: "2024-01-15T09:30:00Z",
                                    external_user_id: "external_user_id",
                                    external_user_name: "external_user_name",
                                    id: "id",
                                    note: "note",
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                                {
                                    created_at: "2024-01-15T09:30:00Z",
                                    external_user_id: "external_user_id",
                                    external_user_name: "external_user_name",
                                    id: "id",
                                    note: "note",
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                            ],
                            rule_id: "rule_id",
                            rule_id_usage_exceeded: "rule_id_usage_exceeded",
                            updated_at: "2024-01-15T09:30:00Z",
                            value_bool: true,
                            value_numeric: 1,
                            value_trait: {
                                created_at: "2024-01-15T09:30:00Z",
                                display_name: "display_name",
                                entity_type: "entity_type",
                                hierarchy: ["hierarchy", "hierarchy"],
                                id: "id",
                                trait_type: "trait_type",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            value_trait_id: "value_trait_id",
                            value_type: "value_type",
                        },
                        credit_consumption_rate: 1.1,
                        credit_grant_counts: { credit_grant_counts: 1.1 },
                        credit_grant_details: [
                            {
                                credit_type_icon: "credit_type_icon",
                                expires_at: "2024-01-15T09:30:00Z",
                                grant_reason: "free",
                                quantity: 1.1,
                            },
                            {
                                credit_type_icon: "credit_type_icon",
                                expires_at: "2024-01-15T09:30:00Z",
                                grant_reason: "free",
                                quantity: 1.1,
                            },
                        ],
                        credit_grant_reason: "free",
                        credit_remaining: 1.1,
                        credit_total: 1.1,
                        credit_type_icon: "credit_type_icon",
                        credit_used: 1.1,
                        effective_limit: 1,
                        effective_price: 1.1,
                        entitlement_expiration_date: "2024-01-15T09:30:00Z",
                        entitlement_id: "entitlement_id",
                        entitlement_source: "entitlement_source",
                        entitlement_type: "entitlement_type",
                        feature: {
                            created_at: "2024-01-15T09:30:00Z",
                            description: "description",
                            event_subtype: "event_subtype",
                            event_summary: {
                                company_count: 1,
                                environment_id: "environment_id",
                                event_count: 1,
                                event_subtype: "event_subtype",
                                last_seen_at: "2024-01-15T09:30:00Z",
                                user_count: 1,
                            },
                            feature_type: "feature_type",
                            flags: [
                                {
                                    created_at: "2024-01-15T09:30:00Z",
                                    default_value: true,
                                    description: "description",
                                    feature: {
                                        created_at: "2024-01-15T09:30:00Z",
                                        description: "description",
                                        feature_type: "feature_type",
                                        icon: "icon",
                                        id: "id",
                                        name: "name",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                    feature_id: "feature_id",
                                    flag_type: "flag_type",
                                    id: "id",
                                    key: "key",
                                    last_checked_at: "2024-01-15T09:30:00Z",
                                    maintainer_id: "maintainer_id",
                                    name: "name",
                                    rules: [
                                        {
                                            condition_groups: [],
                                            conditions: [],
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            name: "name",
                                            priority: 1,
                                            rule_type: "rule_type",
                                            updated_at: "2024-01-15T09:30:00Z",
                                            value: true,
                                        },
                                        {
                                            condition_groups: [],
                                            conditions: [],
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            name: "name",
                                            priority: 1,
                                            rule_type: "rule_type",
                                            updated_at: "2024-01-15T09:30:00Z",
                                            value: true,
                                        },
                                    ],
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                                {
                                    created_at: "2024-01-15T09:30:00Z",
                                    default_value: true,
                                    description: "description",
                                    feature: {
                                        created_at: "2024-01-15T09:30:00Z",
                                        description: "description",
                                        feature_type: "feature_type",
                                        icon: "icon",
                                        id: "id",
                                        name: "name",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                    feature_id: "feature_id",
                                    flag_type: "flag_type",
                                    id: "id",
                                    key: "key",
                                    last_checked_at: "2024-01-15T09:30:00Z",
                                    maintainer_id: "maintainer_id",
                                    name: "name",
                                    rules: [
                                        {
                                            condition_groups: [],
                                            conditions: [],
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            name: "name",
                                            priority: 1,
                                            rule_type: "rule_type",
                                            updated_at: "2024-01-15T09:30:00Z",
                                            value: true,
                                        },
                                        {
                                            condition_groups: [],
                                            conditions: [],
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            name: "name",
                                            priority: 1,
                                            rule_type: "rule_type",
                                            updated_at: "2024-01-15T09:30:00Z",
                                            value: true,
                                        },
                                    ],
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                            ],
                            icon: "icon",
                            id: "id",
                            lifecycle_phase: "lifecycle_phase",
                            maintainer_id: "maintainer_id",
                            name: "name",
                            plans: [
                                { description: "description", id: "id", image_url: "image_url", name: "name" },
                                { description: "description", id: "id", image_url: "image_url", name: "name" },
                            ],
                            plural_name: "plural_name",
                            singular_name: "singular_name",
                            trait: {
                                created_at: "2024-01-15T09:30:00Z",
                                display_name: "display_name",
                                entity_type: "entity_type",
                                hierarchy: ["hierarchy", "hierarchy"],
                                id: "id",
                                trait_type: "trait_type",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            trait_id: "trait_id",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        has_valid_allocation: true,
                        is_unlimited: true,
                        metric_reset_at: "2024-01-15T09:30:00Z",
                        month_reset: "month_reset",
                        monthly_usage_based_price: {
                            billing_scheme: "billing_scheme",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            id: "id",
                            interval: "interval",
                            is_active: true,
                            meter_event_name: "meter_event_name",
                            meter_event_payload_key: "meter_event_payload_key",
                            meter_id: "meter_id",
                            package_size: 1,
                            price: 1,
                            price_decimal: "price_decimal",
                            price_external_id: "price_external_id",
                            price_id: "price_id",
                            price_tier: [
                                {
                                    flat_amount: 1,
                                    per_unit_price: 1,
                                    per_unit_price_decimal: "per_unit_price_decimal",
                                    up_to: 1,
                                },
                                {
                                    flat_amount: 1,
                                    per_unit_price: 1,
                                    per_unit_price_decimal: "per_unit_price_decimal",
                                    up_to: 1,
                                },
                            ],
                            product_external_id: "product_external_id",
                            product_id: "product_id",
                            product_name: "product_name",
                            tiers_mode: "tiers_mode",
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_type: "usage_type",
                        },
                        overuse: 1,
                        percent_used: 1.1,
                        period: "period",
                        plan: {
                            audience_type: "audience_type",
                            created_at: "2024-01-15T09:30:00Z",
                            description: "description",
                            icon: "icon",
                            id: "id",
                            name: "name",
                            plan_type: "plan_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        plan_entitlement: {
                            billing_threshold: 1,
                            consumption_rate: 1.1,
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            feature: {
                                created_at: "2024-01-15T09:30:00Z",
                                description: "description",
                                event_subtype: "event_subtype",
                                feature_type: "feature_type",
                                icon: "icon",
                                id: "id",
                                lifecycle_phase: "lifecycle_phase",
                                maintainer_id: "maintainer_id",
                                name: "name",
                                plural_name: "plural_name",
                                singular_name: "singular_name",
                                trait_id: "trait_id",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            feature_id: "feature_id",
                            id: "id",
                            metered_monthly_price: {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                id: "id",
                                interval: "interval",
                                is_active: true,
                                meter_event_name: "meter_event_name",
                                meter_event_payload_key: "meter_event_payload_key",
                                meter_id: "meter_id",
                                package_size: 1,
                                price: 1,
                                price_decimal: "price_decimal",
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}, {}],
                                product_external_id: "product_external_id",
                                product_id: "product_id",
                                product_name: "product_name",
                                tiers_mode: "tiers_mode",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                            metered_yearly_price: {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                id: "id",
                                interval: "interval",
                                is_active: true,
                                meter_event_name: "meter_event_name",
                                meter_event_payload_key: "meter_event_payload_key",
                                meter_id: "meter_id",
                                package_size: 1,
                                price: 1,
                                price_decimal: "price_decimal",
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}, {}],
                                product_external_id: "product_external_id",
                                product_id: "product_id",
                                product_name: "product_name",
                                tiers_mode: "tiers_mode",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                            metric_period: "metric_period",
                            metric_period_month_reset: "metric_period_month_reset",
                            plan: {
                                audience_type: "audience_type",
                                created_at: "2024-01-15T09:30:00Z",
                                description: "description",
                                icon: "icon",
                                id: "id",
                                name: "name",
                                plan_type: "plan_type",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            plan_id: "plan_id",
                            price_behavior: "price_behavior",
                            rule_id: "rule_id",
                            rule_id_usage_exceeded: "rule_id_usage_exceeded",
                            soft_limit: 1,
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_based_product: {
                                account_id: "account_id",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                is_active: true,
                                name: "name",
                                price: 1.1,
                                price_decimal: "price_decimal",
                                product_id: "product_id",
                                quantity: 1.1,
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            value_bool: true,
                            value_credit: {
                                burn_strategy: "burn_strategy",
                                created_at: "2024-01-15T09:30:00Z",
                                default_expiry_unit: "default_expiry_unit",
                                default_expiry_unit_count: 1,
                                default_rollover_policy: "default_rollover_policy",
                                description: "description",
                                icon: "icon",
                                id: "id",
                                name: "name",
                                plural_name: "plural_name",
                                price: {
                                    currency: "currency",
                                    external_price_id: "external_price_id",
                                    id: "id",
                                    interval: "interval",
                                    price: 1,
                                    scheme: "scheme",
                                },
                                product: {
                                    account_id: "account_id",
                                    created_at: "2024-01-15T09:30:00Z",
                                    environment_id: "environment_id",
                                    external_id: "external_id",
                                    is_active: true,
                                    name: "name",
                                    price: 1.1,
                                    product_id: "product_id",
                                    quantity: 1.1,
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                                singular_name: "singular_name",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            value_numeric: 1,
                            value_trait: {
                                created_at: "2024-01-15T09:30:00Z",
                                display_name: "display_name",
                                entity_type: "entity_type",
                                hierarchy: ["hierarchy", "hierarchy"],
                                id: "id",
                                trait_type: "trait_type",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            value_trait_id: "value_trait_id",
                            value_type: "value_type",
                        },
                        price_behavior: "price_behavior",
                        soft_limit: 1,
                        usage: 1,
                        yearly_usage_based_price: {
                            billing_scheme: "billing_scheme",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            id: "id",
                            interval: "interval",
                            is_active: true,
                            meter_event_name: "meter_event_name",
                            meter_event_payload_key: "meter_event_payload_key",
                            meter_id: "meter_id",
                            package_size: 1,
                            price: 1,
                            price_decimal: "price_decimal",
                            price_external_id: "price_external_id",
                            price_id: "price_id",
                            price_tier: [
                                {
                                    flat_amount: 1,
                                    per_unit_price: 1,
                                    per_unit_price_decimal: "per_unit_price_decimal",
                                    up_to: 1,
                                },
                                {
                                    flat_amount: 1,
                                    per_unit_price: 1,
                                    per_unit_price_decimal: "per_unit_price_decimal",
                                    up_to: 1,
                                },
                            ],
                            product_external_id: "product_external_id",
                            product_id: "product_id",
                            product_name: "product_name",
                            tiers_mode: "tiers_mode",
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_type: "usage_type",
                        },
                    },
                    {
                        access: true,
                        allocation: 1,
                        allocation_type: "boolean",
                        company_override: {
                            company: {
                                add_ons: [
                                    { id: "id", name: "name" },
                                    { id: "id", name: "name" },
                                ],
                                billing_credit_balances: { billing_credit_balances: 1.1 },
                                billing_subscription: {
                                    cancel_at_period_end: true,
                                    created_at: "2024-01-15T09:30:00Z",
                                    currency: "currency",
                                    customer_external_id: "customer_external_id",
                                    discounts: [],
                                    id: "id",
                                    interval: "interval",
                                    period_end: 1,
                                    period_start: 1,
                                    products: [],
                                    status: "status",
                                    subscription_external_id: "subscription_external_id",
                                    total_price: 1,
                                },
                                billing_subscriptions: [
                                    {
                                        cancel_at_period_end: true,
                                        created_at: "2024-01-15T09:30:00Z",
                                        currency: "currency",
                                        customer_external_id: "customer_external_id",
                                        discounts: [],
                                        id: "id",
                                        interval: "interval",
                                        period_end: 1,
                                        period_start: 1,
                                        products: [],
                                        status: "status",
                                        subscription_external_id: "subscription_external_id",
                                        total_price: 1,
                                    },
                                    {
                                        cancel_at_period_end: true,
                                        created_at: "2024-01-15T09:30:00Z",
                                        currency: "currency",
                                        customer_external_id: "customer_external_id",
                                        discounts: [],
                                        id: "id",
                                        interval: "interval",
                                        period_end: 1,
                                        period_start: 1,
                                        products: [],
                                        status: "status",
                                        subscription_external_id: "subscription_external_id",
                                        total_price: 1,
                                    },
                                ],
                                created_at: "2024-01-15T09:30:00Z",
                                default_payment_method: {
                                    created_at: "2024-01-15T09:30:00Z",
                                    customer_external_id: "customer_external_id",
                                    environment_id: "environment_id",
                                    external_id: "external_id",
                                    id: "id",
                                    payment_method_type: "payment_method_type",
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                                entity_traits: [
                                    {
                                        created_at: "2024-01-15T09:30:00Z",
                                        definition_id: "definition_id",
                                        environment_id: "environment_id",
                                        id: "id",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        value: "value",
                                    },
                                    {
                                        created_at: "2024-01-15T09:30:00Z",
                                        definition_id: "definition_id",
                                        environment_id: "environment_id",
                                        id: "id",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        value: "value",
                                    },
                                ],
                                environment_id: "environment_id",
                                id: "id",
                                keys: [
                                    {
                                        created_at: "2024-01-15T09:30:00Z",
                                        definition_id: "definition_id",
                                        entity_id: "entity_id",
                                        entity_type: "entity_type",
                                        environment_id: "environment_id",
                                        id: "id",
                                        key: "key",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        value: "value",
                                    },
                                    {
                                        created_at: "2024-01-15T09:30:00Z",
                                        definition_id: "definition_id",
                                        entity_id: "entity_id",
                                        entity_type: "entity_type",
                                        environment_id: "environment_id",
                                        id: "id",
                                        key: "key",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        value: "value",
                                    },
                                ],
                                last_seen_at: "2024-01-15T09:30:00Z",
                                logo_url: "logo_url",
                                metrics: [
                                    {
                                        account_id: "account_id",
                                        captured_at_max: "2024-01-15T09:30:00Z",
                                        captured_at_min: "2024-01-15T09:30:00Z",
                                        company_id: "company_id",
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        event_subtype: "event_subtype",
                                        month_reset: "month_reset",
                                        period: "period",
                                        value: 1,
                                    },
                                    {
                                        account_id: "account_id",
                                        captured_at_max: "2024-01-15T09:30:00Z",
                                        captured_at_min: "2024-01-15T09:30:00Z",
                                        company_id: "company_id",
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        event_subtype: "event_subtype",
                                        month_reset: "month_reset",
                                        period: "period",
                                        value: 1,
                                    },
                                ],
                                name: "name",
                                payment_methods: [
                                    {
                                        created_at: "2024-01-15T09:30:00Z",
                                        customer_external_id: "customer_external_id",
                                        environment_id: "environment_id",
                                        external_id: "external_id",
                                        id: "id",
                                        payment_method_type: "payment_method_type",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                    {
                                        created_at: "2024-01-15T09:30:00Z",
                                        customer_external_id: "customer_external_id",
                                        environment_id: "environment_id",
                                        external_id: "external_id",
                                        id: "id",
                                        payment_method_type: "payment_method_type",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                ],
                                plan: { id: "id", name: "name" },
                                plans: [
                                    { id: "id", name: "name" },
                                    { id: "id", name: "name" },
                                ],
                                rules: [
                                    {
                                        account_id: "account_id",
                                        condition_groups: [],
                                        conditions: [],
                                        environment_id: "environment_id",
                                        id: "id",
                                        name: "name",
                                        priority: 1,
                                        rule_type: "rule_type",
                                        value: true,
                                    },
                                    {
                                        account_id: "account_id",
                                        condition_groups: [],
                                        conditions: [],
                                        environment_id: "environment_id",
                                        id: "id",
                                        name: "name",
                                        priority: 1,
                                        rule_type: "rule_type",
                                        value: true,
                                    },
                                ],
                                traits: { traits: { key: "value" } },
                                updated_at: "2024-01-15T09:30:00Z",
                                user_count: 1,
                            },
                            company_id: "company_id",
                            consumption_rate: 1.1,
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            expiration_date: "2024-01-15T09:30:00Z",
                            feature: {
                                created_at: "2024-01-15T09:30:00Z",
                                description: "description",
                                event_subtype: "event_subtype",
                                feature_type: "feature_type",
                                icon: "icon",
                                id: "id",
                                lifecycle_phase: "lifecycle_phase",
                                maintainer_id: "maintainer_id",
                                name: "name",
                                plural_name: "plural_name",
                                singular_name: "singular_name",
                                trait_id: "trait_id",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            feature_id: "feature_id",
                            id: "id",
                            metric_period: "metric_period",
                            metric_period_month_reset: "metric_period_month_reset",
                            notes: [
                                {
                                    created_at: "2024-01-15T09:30:00Z",
                                    external_user_id: "external_user_id",
                                    external_user_name: "external_user_name",
                                    id: "id",
                                    note: "note",
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                                {
                                    created_at: "2024-01-15T09:30:00Z",
                                    external_user_id: "external_user_id",
                                    external_user_name: "external_user_name",
                                    id: "id",
                                    note: "note",
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                            ],
                            rule_id: "rule_id",
                            rule_id_usage_exceeded: "rule_id_usage_exceeded",
                            updated_at: "2024-01-15T09:30:00Z",
                            value_bool: true,
                            value_numeric: 1,
                            value_trait: {
                                created_at: "2024-01-15T09:30:00Z",
                                display_name: "display_name",
                                entity_type: "entity_type",
                                hierarchy: ["hierarchy", "hierarchy"],
                                id: "id",
                                trait_type: "trait_type",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            value_trait_id: "value_trait_id",
                            value_type: "value_type",
                        },
                        credit_consumption_rate: 1.1,
                        credit_grant_counts: { credit_grant_counts: 1.1 },
                        credit_grant_details: [
                            {
                                credit_type_icon: "credit_type_icon",
                                expires_at: "2024-01-15T09:30:00Z",
                                grant_reason: "free",
                                quantity: 1.1,
                            },
                            {
                                credit_type_icon: "credit_type_icon",
                                expires_at: "2024-01-15T09:30:00Z",
                                grant_reason: "free",
                                quantity: 1.1,
                            },
                        ],
                        credit_grant_reason: "free",
                        credit_remaining: 1.1,
                        credit_total: 1.1,
                        credit_type_icon: "credit_type_icon",
                        credit_used: 1.1,
                        effective_limit: 1,
                        effective_price: 1.1,
                        entitlement_expiration_date: "2024-01-15T09:30:00Z",
                        entitlement_id: "entitlement_id",
                        entitlement_source: "entitlement_source",
                        entitlement_type: "entitlement_type",
                        feature: {
                            created_at: "2024-01-15T09:30:00Z",
                            description: "description",
                            event_subtype: "event_subtype",
                            event_summary: {
                                company_count: 1,
                                environment_id: "environment_id",
                                event_count: 1,
                                event_subtype: "event_subtype",
                                last_seen_at: "2024-01-15T09:30:00Z",
                                user_count: 1,
                            },
                            feature_type: "feature_type",
                            flags: [
                                {
                                    created_at: "2024-01-15T09:30:00Z",
                                    default_value: true,
                                    description: "description",
                                    feature: {
                                        created_at: "2024-01-15T09:30:00Z",
                                        description: "description",
                                        feature_type: "feature_type",
                                        icon: "icon",
                                        id: "id",
                                        name: "name",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                    feature_id: "feature_id",
                                    flag_type: "flag_type",
                                    id: "id",
                                    key: "key",
                                    last_checked_at: "2024-01-15T09:30:00Z",
                                    maintainer_id: "maintainer_id",
                                    name: "name",
                                    rules: [
                                        {
                                            condition_groups: [],
                                            conditions: [],
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            name: "name",
                                            priority: 1,
                                            rule_type: "rule_type",
                                            updated_at: "2024-01-15T09:30:00Z",
                                            value: true,
                                        },
                                        {
                                            condition_groups: [],
                                            conditions: [],
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            name: "name",
                                            priority: 1,
                                            rule_type: "rule_type",
                                            updated_at: "2024-01-15T09:30:00Z",
                                            value: true,
                                        },
                                    ],
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                                {
                                    created_at: "2024-01-15T09:30:00Z",
                                    default_value: true,
                                    description: "description",
                                    feature: {
                                        created_at: "2024-01-15T09:30:00Z",
                                        description: "description",
                                        feature_type: "feature_type",
                                        icon: "icon",
                                        id: "id",
                                        name: "name",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                    feature_id: "feature_id",
                                    flag_type: "flag_type",
                                    id: "id",
                                    key: "key",
                                    last_checked_at: "2024-01-15T09:30:00Z",
                                    maintainer_id: "maintainer_id",
                                    name: "name",
                                    rules: [
                                        {
                                            condition_groups: [],
                                            conditions: [],
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            name: "name",
                                            priority: 1,
                                            rule_type: "rule_type",
                                            updated_at: "2024-01-15T09:30:00Z",
                                            value: true,
                                        },
                                        {
                                            condition_groups: [],
                                            conditions: [],
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            name: "name",
                                            priority: 1,
                                            rule_type: "rule_type",
                                            updated_at: "2024-01-15T09:30:00Z",
                                            value: true,
                                        },
                                    ],
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                            ],
                            icon: "icon",
                            id: "id",
                            lifecycle_phase: "lifecycle_phase",
                            maintainer_id: "maintainer_id",
                            name: "name",
                            plans: [
                                { description: "description", id: "id", image_url: "image_url", name: "name" },
                                { description: "description", id: "id", image_url: "image_url", name: "name" },
                            ],
                            plural_name: "plural_name",
                            singular_name: "singular_name",
                            trait: {
                                created_at: "2024-01-15T09:30:00Z",
                                display_name: "display_name",
                                entity_type: "entity_type",
                                hierarchy: ["hierarchy", "hierarchy"],
                                id: "id",
                                trait_type: "trait_type",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            trait_id: "trait_id",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        has_valid_allocation: true,
                        is_unlimited: true,
                        metric_reset_at: "2024-01-15T09:30:00Z",
                        month_reset: "month_reset",
                        monthly_usage_based_price: {
                            billing_scheme: "billing_scheme",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            id: "id",
                            interval: "interval",
                            is_active: true,
                            meter_event_name: "meter_event_name",
                            meter_event_payload_key: "meter_event_payload_key",
                            meter_id: "meter_id",
                            package_size: 1,
                            price: 1,
                            price_decimal: "price_decimal",
                            price_external_id: "price_external_id",
                            price_id: "price_id",
                            price_tier: [
                                {
                                    flat_amount: 1,
                                    per_unit_price: 1,
                                    per_unit_price_decimal: "per_unit_price_decimal",
                                    up_to: 1,
                                },
                                {
                                    flat_amount: 1,
                                    per_unit_price: 1,
                                    per_unit_price_decimal: "per_unit_price_decimal",
                                    up_to: 1,
                                },
                            ],
                            product_external_id: "product_external_id",
                            product_id: "product_id",
                            product_name: "product_name",
                            tiers_mode: "tiers_mode",
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_type: "usage_type",
                        },
                        overuse: 1,
                        percent_used: 1.1,
                        period: "period",
                        plan: {
                            audience_type: "audience_type",
                            created_at: "2024-01-15T09:30:00Z",
                            description: "description",
                            icon: "icon",
                            id: "id",
                            name: "name",
                            plan_type: "plan_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        plan_entitlement: {
                            billing_threshold: 1,
                            consumption_rate: 1.1,
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            feature: {
                                created_at: "2024-01-15T09:30:00Z",
                                description: "description",
                                event_subtype: "event_subtype",
                                feature_type: "feature_type",
                                icon: "icon",
                                id: "id",
                                lifecycle_phase: "lifecycle_phase",
                                maintainer_id: "maintainer_id",
                                name: "name",
                                plural_name: "plural_name",
                                singular_name: "singular_name",
                                trait_id: "trait_id",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            feature_id: "feature_id",
                            id: "id",
                            metered_monthly_price: {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                id: "id",
                                interval: "interval",
                                is_active: true,
                                meter_event_name: "meter_event_name",
                                meter_event_payload_key: "meter_event_payload_key",
                                meter_id: "meter_id",
                                package_size: 1,
                                price: 1,
                                price_decimal: "price_decimal",
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}, {}],
                                product_external_id: "product_external_id",
                                product_id: "product_id",
                                product_name: "product_name",
                                tiers_mode: "tiers_mode",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                            metered_yearly_price: {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                id: "id",
                                interval: "interval",
                                is_active: true,
                                meter_event_name: "meter_event_name",
                                meter_event_payload_key: "meter_event_payload_key",
                                meter_id: "meter_id",
                                package_size: 1,
                                price: 1,
                                price_decimal: "price_decimal",
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}, {}],
                                product_external_id: "product_external_id",
                                product_id: "product_id",
                                product_name: "product_name",
                                tiers_mode: "tiers_mode",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                            metric_period: "metric_period",
                            metric_period_month_reset: "metric_period_month_reset",
                            plan: {
                                audience_type: "audience_type",
                                created_at: "2024-01-15T09:30:00Z",
                                description: "description",
                                icon: "icon",
                                id: "id",
                                name: "name",
                                plan_type: "plan_type",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            plan_id: "plan_id",
                            price_behavior: "price_behavior",
                            rule_id: "rule_id",
                            rule_id_usage_exceeded: "rule_id_usage_exceeded",
                            soft_limit: 1,
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_based_product: {
                                account_id: "account_id",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                is_active: true,
                                name: "name",
                                price: 1.1,
                                price_decimal: "price_decimal",
                                product_id: "product_id",
                                quantity: 1.1,
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            value_bool: true,
                            value_credit: {
                                burn_strategy: "burn_strategy",
                                created_at: "2024-01-15T09:30:00Z",
                                default_expiry_unit: "default_expiry_unit",
                                default_expiry_unit_count: 1,
                                default_rollover_policy: "default_rollover_policy",
                                description: "description",
                                icon: "icon",
                                id: "id",
                                name: "name",
                                plural_name: "plural_name",
                                price: {
                                    currency: "currency",
                                    external_price_id: "external_price_id",
                                    id: "id",
                                    interval: "interval",
                                    price: 1,
                                    scheme: "scheme",
                                },
                                product: {
                                    account_id: "account_id",
                                    created_at: "2024-01-15T09:30:00Z",
                                    environment_id: "environment_id",
                                    external_id: "external_id",
                                    is_active: true,
                                    name: "name",
                                    price: 1.1,
                                    product_id: "product_id",
                                    quantity: 1.1,
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                                singular_name: "singular_name",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            value_numeric: 1,
                            value_trait: {
                                created_at: "2024-01-15T09:30:00Z",
                                display_name: "display_name",
                                entity_type: "entity_type",
                                hierarchy: ["hierarchy", "hierarchy"],
                                id: "id",
                                trait_type: "trait_type",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            value_trait_id: "value_trait_id",
                            value_type: "value_type",
                        },
                        price_behavior: "price_behavior",
                        soft_limit: 1,
                        usage: 1,
                        yearly_usage_based_price: {
                            billing_scheme: "billing_scheme",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            id: "id",
                            interval: "interval",
                            is_active: true,
                            meter_event_name: "meter_event_name",
                            meter_event_payload_key: "meter_event_payload_key",
                            meter_id: "meter_id",
                            package_size: 1,
                            price: 1,
                            price_decimal: "price_decimal",
                            price_external_id: "price_external_id",
                            price_id: "price_id",
                            price_tier: [
                                {
                                    flat_amount: 1,
                                    per_unit_price: 1,
                                    per_unit_price_decimal: "per_unit_price_decimal",
                                    up_to: 1,
                                },
                                {
                                    flat_amount: 1,
                                    per_unit_price: 1,
                                    per_unit_price_decimal: "per_unit_price_decimal",
                                    up_to: 1,
                                },
                            ],
                            product_external_id: "product_external_id",
                            product_id: "product_id",
                            product_name: "product_name",
                            tiers_mode: "tiers_mode",
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_type: "usage_type",
                        },
                    },
                ],
            },
            params: { keys: { keys: "keys" } },
        };
        server.mockEndpoint().get("/usage-by-company").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.entitlements.getFeatureUsageByCompany({
            keys: {
                keys: "keys",
            },
        });
        expect(response).toEqual({
            data: {
                features: [
                    {
                        access: true,
                        allocation: 1,
                        allocation_type: "boolean",
                        company_override: {
                            company: {
                                add_ons: [
                                    {
                                        id: "id",
                                        name: "name",
                                    },
                                    {
                                        id: "id",
                                        name: "name",
                                    },
                                ],
                                billing_credit_balances: {
                                    billing_credit_balances: 1.1,
                                },
                                billing_subscription: {
                                    cancel_at_period_end: true,
                                    created_at: "2024-01-15T09:30:00Z",
                                    currency: "currency",
                                    customer_external_id: "customer_external_id",
                                    discounts: [],
                                    id: "id",
                                    interval: "interval",
                                    period_end: 1,
                                    period_start: 1,
                                    products: [],
                                    status: "status",
                                    subscription_external_id: "subscription_external_id",
                                    total_price: 1,
                                },
                                billing_subscriptions: [
                                    {
                                        cancel_at_period_end: true,
                                        created_at: "2024-01-15T09:30:00Z",
                                        currency: "currency",
                                        customer_external_id: "customer_external_id",
                                        discounts: [],
                                        id: "id",
                                        interval: "interval",
                                        period_end: 1,
                                        period_start: 1,
                                        products: [],
                                        status: "status",
                                        subscription_external_id: "subscription_external_id",
                                        total_price: 1,
                                    },
                                    {
                                        cancel_at_period_end: true,
                                        created_at: "2024-01-15T09:30:00Z",
                                        currency: "currency",
                                        customer_external_id: "customer_external_id",
                                        discounts: [],
                                        id: "id",
                                        interval: "interval",
                                        period_end: 1,
                                        period_start: 1,
                                        products: [],
                                        status: "status",
                                        subscription_external_id: "subscription_external_id",
                                        total_price: 1,
                                    },
                                ],
                                created_at: "2024-01-15T09:30:00Z",
                                default_payment_method: {
                                    created_at: "2024-01-15T09:30:00Z",
                                    customer_external_id: "customer_external_id",
                                    environment_id: "environment_id",
                                    external_id: "external_id",
                                    id: "id",
                                    payment_method_type: "payment_method_type",
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                                entity_traits: [
                                    {
                                        created_at: "2024-01-15T09:30:00Z",
                                        definition_id: "definition_id",
                                        environment_id: "environment_id",
                                        id: "id",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        value: "value",
                                    },
                                    {
                                        created_at: "2024-01-15T09:30:00Z",
                                        definition_id: "definition_id",
                                        environment_id: "environment_id",
                                        id: "id",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        value: "value",
                                    },
                                ],
                                environment_id: "environment_id",
                                id: "id",
                                keys: [
                                    {
                                        created_at: "2024-01-15T09:30:00Z",
                                        definition_id: "definition_id",
                                        entity_id: "entity_id",
                                        entity_type: "entity_type",
                                        environment_id: "environment_id",
                                        id: "id",
                                        key: "key",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        value: "value",
                                    },
                                    {
                                        created_at: "2024-01-15T09:30:00Z",
                                        definition_id: "definition_id",
                                        entity_id: "entity_id",
                                        entity_type: "entity_type",
                                        environment_id: "environment_id",
                                        id: "id",
                                        key: "key",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        value: "value",
                                    },
                                ],
                                last_seen_at: "2024-01-15T09:30:00Z",
                                logo_url: "logo_url",
                                metrics: [
                                    {
                                        account_id: "account_id",
                                        captured_at_max: "2024-01-15T09:30:00Z",
                                        captured_at_min: "2024-01-15T09:30:00Z",
                                        company_id: "company_id",
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        event_subtype: "event_subtype",
                                        month_reset: "month_reset",
                                        period: "period",
                                        value: 1,
                                    },
                                    {
                                        account_id: "account_id",
                                        captured_at_max: "2024-01-15T09:30:00Z",
                                        captured_at_min: "2024-01-15T09:30:00Z",
                                        company_id: "company_id",
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        event_subtype: "event_subtype",
                                        month_reset: "month_reset",
                                        period: "period",
                                        value: 1,
                                    },
                                ],
                                name: "name",
                                payment_methods: [
                                    {
                                        created_at: "2024-01-15T09:30:00Z",
                                        customer_external_id: "customer_external_id",
                                        environment_id: "environment_id",
                                        external_id: "external_id",
                                        id: "id",
                                        payment_method_type: "payment_method_type",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                    {
                                        created_at: "2024-01-15T09:30:00Z",
                                        customer_external_id: "customer_external_id",
                                        environment_id: "environment_id",
                                        external_id: "external_id",
                                        id: "id",
                                        payment_method_type: "payment_method_type",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                ],
                                plan: {
                                    id: "id",
                                    name: "name",
                                },
                                plans: [
                                    {
                                        id: "id",
                                        name: "name",
                                    },
                                    {
                                        id: "id",
                                        name: "name",
                                    },
                                ],
                                rules: [
                                    {
                                        account_id: "account_id",
                                        condition_groups: [],
                                        conditions: [],
                                        environment_id: "environment_id",
                                        id: "id",
                                        name: "name",
                                        priority: 1,
                                        rule_type: "rule_type",
                                        value: true,
                                    },
                                    {
                                        account_id: "account_id",
                                        condition_groups: [],
                                        conditions: [],
                                        environment_id: "environment_id",
                                        id: "id",
                                        name: "name",
                                        priority: 1,
                                        rule_type: "rule_type",
                                        value: true,
                                    },
                                ],
                                traits: {
                                    traits: {
                                        key: "value",
                                    },
                                },
                                updated_at: "2024-01-15T09:30:00Z",
                                user_count: 1,
                            },
                            company_id: "company_id",
                            consumption_rate: 1.1,
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            expiration_date: "2024-01-15T09:30:00Z",
                            feature: {
                                created_at: "2024-01-15T09:30:00Z",
                                description: "description",
                                event_subtype: "event_subtype",
                                feature_type: "feature_type",
                                icon: "icon",
                                id: "id",
                                lifecycle_phase: "lifecycle_phase",
                                maintainer_id: "maintainer_id",
                                name: "name",
                                plural_name: "plural_name",
                                singular_name: "singular_name",
                                trait_id: "trait_id",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            feature_id: "feature_id",
                            id: "id",
                            metric_period: "metric_period",
                            metric_period_month_reset: "metric_period_month_reset",
                            notes: [
                                {
                                    created_at: "2024-01-15T09:30:00Z",
                                    external_user_id: "external_user_id",
                                    external_user_name: "external_user_name",
                                    id: "id",
                                    note: "note",
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                                {
                                    created_at: "2024-01-15T09:30:00Z",
                                    external_user_id: "external_user_id",
                                    external_user_name: "external_user_name",
                                    id: "id",
                                    note: "note",
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                            ],
                            rule_id: "rule_id",
                            rule_id_usage_exceeded: "rule_id_usage_exceeded",
                            updated_at: "2024-01-15T09:30:00Z",
                            value_bool: true,
                            value_numeric: 1,
                            value_trait: {
                                created_at: "2024-01-15T09:30:00Z",
                                display_name: "display_name",
                                entity_type: "entity_type",
                                hierarchy: ["hierarchy", "hierarchy"],
                                id: "id",
                                trait_type: "trait_type",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            value_trait_id: "value_trait_id",
                            value_type: "value_type",
                        },
                        credit_consumption_rate: 1.1,
                        credit_grant_counts: {
                            credit_grant_counts: 1.1,
                        },
                        credit_grant_details: [
                            {
                                credit_type_icon: "credit_type_icon",
                                expires_at: "2024-01-15T09:30:00Z",
                                grant_reason: "free",
                                quantity: 1.1,
                            },
                            {
                                credit_type_icon: "credit_type_icon",
                                expires_at: "2024-01-15T09:30:00Z",
                                grant_reason: "free",
                                quantity: 1.1,
                            },
                        ],
                        credit_grant_reason: "free",
                        credit_remaining: 1.1,
                        credit_total: 1.1,
                        credit_type_icon: "credit_type_icon",
                        credit_used: 1.1,
                        effective_limit: 1,
                        effective_price: 1.1,
                        entitlement_expiration_date: "2024-01-15T09:30:00Z",
                        entitlement_id: "entitlement_id",
                        entitlement_source: "entitlement_source",
                        entitlement_type: "entitlement_type",
                        feature: {
                            created_at: "2024-01-15T09:30:00Z",
                            description: "description",
                            event_subtype: "event_subtype",
                            event_summary: {
                                company_count: 1,
                                environment_id: "environment_id",
                                event_count: 1,
                                event_subtype: "event_subtype",
                                last_seen_at: "2024-01-15T09:30:00Z",
                                user_count: 1,
                            },
                            feature_type: "feature_type",
                            flags: [
                                {
                                    created_at: "2024-01-15T09:30:00Z",
                                    default_value: true,
                                    description: "description",
                                    feature: {
                                        created_at: "2024-01-15T09:30:00Z",
                                        description: "description",
                                        feature_type: "feature_type",
                                        icon: "icon",
                                        id: "id",
                                        name: "name",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                    feature_id: "feature_id",
                                    flag_type: "flag_type",
                                    id: "id",
                                    key: "key",
                                    last_checked_at: "2024-01-15T09:30:00Z",
                                    maintainer_id: "maintainer_id",
                                    name: "name",
                                    rules: [
                                        {
                                            condition_groups: [],
                                            conditions: [],
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            name: "name",
                                            priority: 1,
                                            rule_type: "rule_type",
                                            updated_at: "2024-01-15T09:30:00Z",
                                            value: true,
                                        },
                                        {
                                            condition_groups: [],
                                            conditions: [],
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            name: "name",
                                            priority: 1,
                                            rule_type: "rule_type",
                                            updated_at: "2024-01-15T09:30:00Z",
                                            value: true,
                                        },
                                    ],
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                                {
                                    created_at: "2024-01-15T09:30:00Z",
                                    default_value: true,
                                    description: "description",
                                    feature: {
                                        created_at: "2024-01-15T09:30:00Z",
                                        description: "description",
                                        feature_type: "feature_type",
                                        icon: "icon",
                                        id: "id",
                                        name: "name",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                    feature_id: "feature_id",
                                    flag_type: "flag_type",
                                    id: "id",
                                    key: "key",
                                    last_checked_at: "2024-01-15T09:30:00Z",
                                    maintainer_id: "maintainer_id",
                                    name: "name",
                                    rules: [
                                        {
                                            condition_groups: [],
                                            conditions: [],
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            name: "name",
                                            priority: 1,
                                            rule_type: "rule_type",
                                            updated_at: "2024-01-15T09:30:00Z",
                                            value: true,
                                        },
                                        {
                                            condition_groups: [],
                                            conditions: [],
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            name: "name",
                                            priority: 1,
                                            rule_type: "rule_type",
                                            updated_at: "2024-01-15T09:30:00Z",
                                            value: true,
                                        },
                                    ],
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                            ],
                            icon: "icon",
                            id: "id",
                            lifecycle_phase: "lifecycle_phase",
                            maintainer_id: "maintainer_id",
                            name: "name",
                            plans: [
                                {
                                    description: "description",
                                    id: "id",
                                    image_url: "image_url",
                                    name: "name",
                                },
                                {
                                    description: "description",
                                    id: "id",
                                    image_url: "image_url",
                                    name: "name",
                                },
                            ],
                            plural_name: "plural_name",
                            singular_name: "singular_name",
                            trait: {
                                created_at: "2024-01-15T09:30:00Z",
                                display_name: "display_name",
                                entity_type: "entity_type",
                                hierarchy: ["hierarchy", "hierarchy"],
                                id: "id",
                                trait_type: "trait_type",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            trait_id: "trait_id",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        has_valid_allocation: true,
                        is_unlimited: true,
                        metric_reset_at: "2024-01-15T09:30:00Z",
                        month_reset: "month_reset",
                        monthly_usage_based_price: {
                            billing_scheme: "billing_scheme",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            id: "id",
                            interval: "interval",
                            is_active: true,
                            meter_event_name: "meter_event_name",
                            meter_event_payload_key: "meter_event_payload_key",
                            meter_id: "meter_id",
                            package_size: 1,
                            price: 1,
                            price_decimal: "price_decimal",
                            price_external_id: "price_external_id",
                            price_id: "price_id",
                            price_tier: [
                                {
                                    flat_amount: 1,
                                    per_unit_price: 1,
                                    per_unit_price_decimal: "per_unit_price_decimal",
                                    up_to: 1,
                                },
                                {
                                    flat_amount: 1,
                                    per_unit_price: 1,
                                    per_unit_price_decimal: "per_unit_price_decimal",
                                    up_to: 1,
                                },
                            ],
                            product_external_id: "product_external_id",
                            product_id: "product_id",
                            product_name: "product_name",
                            tiers_mode: "tiers_mode",
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_type: "usage_type",
                        },
                        overuse: 1,
                        percent_used: 1.1,
                        period: "period",
                        plan: {
                            audience_type: "audience_type",
                            created_at: "2024-01-15T09:30:00Z",
                            description: "description",
                            icon: "icon",
                            id: "id",
                            name: "name",
                            plan_type: "plan_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        plan_entitlement: {
                            billing_threshold: 1,
                            consumption_rate: 1.1,
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            feature: {
                                created_at: "2024-01-15T09:30:00Z",
                                description: "description",
                                event_subtype: "event_subtype",
                                feature_type: "feature_type",
                                icon: "icon",
                                id: "id",
                                lifecycle_phase: "lifecycle_phase",
                                maintainer_id: "maintainer_id",
                                name: "name",
                                plural_name: "plural_name",
                                singular_name: "singular_name",
                                trait_id: "trait_id",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            feature_id: "feature_id",
                            id: "id",
                            metered_monthly_price: {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                id: "id",
                                interval: "interval",
                                is_active: true,
                                meter_event_name: "meter_event_name",
                                meter_event_payload_key: "meter_event_payload_key",
                                meter_id: "meter_id",
                                package_size: 1,
                                price: 1,
                                price_decimal: "price_decimal",
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}, {}],
                                product_external_id: "product_external_id",
                                product_id: "product_id",
                                product_name: "product_name",
                                tiers_mode: "tiers_mode",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                            metered_yearly_price: {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                id: "id",
                                interval: "interval",
                                is_active: true,
                                meter_event_name: "meter_event_name",
                                meter_event_payload_key: "meter_event_payload_key",
                                meter_id: "meter_id",
                                package_size: 1,
                                price: 1,
                                price_decimal: "price_decimal",
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}, {}],
                                product_external_id: "product_external_id",
                                product_id: "product_id",
                                product_name: "product_name",
                                tiers_mode: "tiers_mode",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                            metric_period: "metric_period",
                            metric_period_month_reset: "metric_period_month_reset",
                            plan: {
                                audience_type: "audience_type",
                                created_at: "2024-01-15T09:30:00Z",
                                description: "description",
                                icon: "icon",
                                id: "id",
                                name: "name",
                                plan_type: "plan_type",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            plan_id: "plan_id",
                            price_behavior: "price_behavior",
                            rule_id: "rule_id",
                            rule_id_usage_exceeded: "rule_id_usage_exceeded",
                            soft_limit: 1,
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_based_product: {
                                account_id: "account_id",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                is_active: true,
                                name: "name",
                                price: 1.1,
                                price_decimal: "price_decimal",
                                product_id: "product_id",
                                quantity: 1.1,
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            value_bool: true,
                            value_credit: {
                                burn_strategy: "burn_strategy",
                                created_at: "2024-01-15T09:30:00Z",
                                default_expiry_unit: "default_expiry_unit",
                                default_expiry_unit_count: 1,
                                default_rollover_policy: "default_rollover_policy",
                                description: "description",
                                icon: "icon",
                                id: "id",
                                name: "name",
                                plural_name: "plural_name",
                                price: {
                                    currency: "currency",
                                    external_price_id: "external_price_id",
                                    id: "id",
                                    interval: "interval",
                                    price: 1,
                                    scheme: "scheme",
                                },
                                product: {
                                    account_id: "account_id",
                                    created_at: "2024-01-15T09:30:00Z",
                                    environment_id: "environment_id",
                                    external_id: "external_id",
                                    is_active: true,
                                    name: "name",
                                    price: 1.1,
                                    product_id: "product_id",
                                    quantity: 1.1,
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                                singular_name: "singular_name",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            value_numeric: 1,
                            value_trait: {
                                created_at: "2024-01-15T09:30:00Z",
                                display_name: "display_name",
                                entity_type: "entity_type",
                                hierarchy: ["hierarchy", "hierarchy"],
                                id: "id",
                                trait_type: "trait_type",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            value_trait_id: "value_trait_id",
                            value_type: "value_type",
                        },
                        price_behavior: "price_behavior",
                        soft_limit: 1,
                        usage: 1,
                        yearly_usage_based_price: {
                            billing_scheme: "billing_scheme",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            id: "id",
                            interval: "interval",
                            is_active: true,
                            meter_event_name: "meter_event_name",
                            meter_event_payload_key: "meter_event_payload_key",
                            meter_id: "meter_id",
                            package_size: 1,
                            price: 1,
                            price_decimal: "price_decimal",
                            price_external_id: "price_external_id",
                            price_id: "price_id",
                            price_tier: [
                                {
                                    flat_amount: 1,
                                    per_unit_price: 1,
                                    per_unit_price_decimal: "per_unit_price_decimal",
                                    up_to: 1,
                                },
                                {
                                    flat_amount: 1,
                                    per_unit_price: 1,
                                    per_unit_price_decimal: "per_unit_price_decimal",
                                    up_to: 1,
                                },
                            ],
                            product_external_id: "product_external_id",
                            product_id: "product_id",
                            product_name: "product_name",
                            tiers_mode: "tiers_mode",
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_type: "usage_type",
                        },
                    },
                    {
                        access: true,
                        allocation: 1,
                        allocation_type: "boolean",
                        company_override: {
                            company: {
                                add_ons: [
                                    {
                                        id: "id",
                                        name: "name",
                                    },
                                    {
                                        id: "id",
                                        name: "name",
                                    },
                                ],
                                billing_credit_balances: {
                                    billing_credit_balances: 1.1,
                                },
                                billing_subscription: {
                                    cancel_at_period_end: true,
                                    created_at: "2024-01-15T09:30:00Z",
                                    currency: "currency",
                                    customer_external_id: "customer_external_id",
                                    discounts: [],
                                    id: "id",
                                    interval: "interval",
                                    period_end: 1,
                                    period_start: 1,
                                    products: [],
                                    status: "status",
                                    subscription_external_id: "subscription_external_id",
                                    total_price: 1,
                                },
                                billing_subscriptions: [
                                    {
                                        cancel_at_period_end: true,
                                        created_at: "2024-01-15T09:30:00Z",
                                        currency: "currency",
                                        customer_external_id: "customer_external_id",
                                        discounts: [],
                                        id: "id",
                                        interval: "interval",
                                        period_end: 1,
                                        period_start: 1,
                                        products: [],
                                        status: "status",
                                        subscription_external_id: "subscription_external_id",
                                        total_price: 1,
                                    },
                                    {
                                        cancel_at_period_end: true,
                                        created_at: "2024-01-15T09:30:00Z",
                                        currency: "currency",
                                        customer_external_id: "customer_external_id",
                                        discounts: [],
                                        id: "id",
                                        interval: "interval",
                                        period_end: 1,
                                        period_start: 1,
                                        products: [],
                                        status: "status",
                                        subscription_external_id: "subscription_external_id",
                                        total_price: 1,
                                    },
                                ],
                                created_at: "2024-01-15T09:30:00Z",
                                default_payment_method: {
                                    created_at: "2024-01-15T09:30:00Z",
                                    customer_external_id: "customer_external_id",
                                    environment_id: "environment_id",
                                    external_id: "external_id",
                                    id: "id",
                                    payment_method_type: "payment_method_type",
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                                entity_traits: [
                                    {
                                        created_at: "2024-01-15T09:30:00Z",
                                        definition_id: "definition_id",
                                        environment_id: "environment_id",
                                        id: "id",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        value: "value",
                                    },
                                    {
                                        created_at: "2024-01-15T09:30:00Z",
                                        definition_id: "definition_id",
                                        environment_id: "environment_id",
                                        id: "id",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        value: "value",
                                    },
                                ],
                                environment_id: "environment_id",
                                id: "id",
                                keys: [
                                    {
                                        created_at: "2024-01-15T09:30:00Z",
                                        definition_id: "definition_id",
                                        entity_id: "entity_id",
                                        entity_type: "entity_type",
                                        environment_id: "environment_id",
                                        id: "id",
                                        key: "key",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        value: "value",
                                    },
                                    {
                                        created_at: "2024-01-15T09:30:00Z",
                                        definition_id: "definition_id",
                                        entity_id: "entity_id",
                                        entity_type: "entity_type",
                                        environment_id: "environment_id",
                                        id: "id",
                                        key: "key",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        value: "value",
                                    },
                                ],
                                last_seen_at: "2024-01-15T09:30:00Z",
                                logo_url: "logo_url",
                                metrics: [
                                    {
                                        account_id: "account_id",
                                        captured_at_max: "2024-01-15T09:30:00Z",
                                        captured_at_min: "2024-01-15T09:30:00Z",
                                        company_id: "company_id",
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        event_subtype: "event_subtype",
                                        month_reset: "month_reset",
                                        period: "period",
                                        value: 1,
                                    },
                                    {
                                        account_id: "account_id",
                                        captured_at_max: "2024-01-15T09:30:00Z",
                                        captured_at_min: "2024-01-15T09:30:00Z",
                                        company_id: "company_id",
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        event_subtype: "event_subtype",
                                        month_reset: "month_reset",
                                        period: "period",
                                        value: 1,
                                    },
                                ],
                                name: "name",
                                payment_methods: [
                                    {
                                        created_at: "2024-01-15T09:30:00Z",
                                        customer_external_id: "customer_external_id",
                                        environment_id: "environment_id",
                                        external_id: "external_id",
                                        id: "id",
                                        payment_method_type: "payment_method_type",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                    {
                                        created_at: "2024-01-15T09:30:00Z",
                                        customer_external_id: "customer_external_id",
                                        environment_id: "environment_id",
                                        external_id: "external_id",
                                        id: "id",
                                        payment_method_type: "payment_method_type",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                ],
                                plan: {
                                    id: "id",
                                    name: "name",
                                },
                                plans: [
                                    {
                                        id: "id",
                                        name: "name",
                                    },
                                    {
                                        id: "id",
                                        name: "name",
                                    },
                                ],
                                rules: [
                                    {
                                        account_id: "account_id",
                                        condition_groups: [],
                                        conditions: [],
                                        environment_id: "environment_id",
                                        id: "id",
                                        name: "name",
                                        priority: 1,
                                        rule_type: "rule_type",
                                        value: true,
                                    },
                                    {
                                        account_id: "account_id",
                                        condition_groups: [],
                                        conditions: [],
                                        environment_id: "environment_id",
                                        id: "id",
                                        name: "name",
                                        priority: 1,
                                        rule_type: "rule_type",
                                        value: true,
                                    },
                                ],
                                traits: {
                                    traits: {
                                        key: "value",
                                    },
                                },
                                updated_at: "2024-01-15T09:30:00Z",
                                user_count: 1,
                            },
                            company_id: "company_id",
                            consumption_rate: 1.1,
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            expiration_date: "2024-01-15T09:30:00Z",
                            feature: {
                                created_at: "2024-01-15T09:30:00Z",
                                description: "description",
                                event_subtype: "event_subtype",
                                feature_type: "feature_type",
                                icon: "icon",
                                id: "id",
                                lifecycle_phase: "lifecycle_phase",
                                maintainer_id: "maintainer_id",
                                name: "name",
                                plural_name: "plural_name",
                                singular_name: "singular_name",
                                trait_id: "trait_id",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            feature_id: "feature_id",
                            id: "id",
                            metric_period: "metric_period",
                            metric_period_month_reset: "metric_period_month_reset",
                            notes: [
                                {
                                    created_at: "2024-01-15T09:30:00Z",
                                    external_user_id: "external_user_id",
                                    external_user_name: "external_user_name",
                                    id: "id",
                                    note: "note",
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                                {
                                    created_at: "2024-01-15T09:30:00Z",
                                    external_user_id: "external_user_id",
                                    external_user_name: "external_user_name",
                                    id: "id",
                                    note: "note",
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                            ],
                            rule_id: "rule_id",
                            rule_id_usage_exceeded: "rule_id_usage_exceeded",
                            updated_at: "2024-01-15T09:30:00Z",
                            value_bool: true,
                            value_numeric: 1,
                            value_trait: {
                                created_at: "2024-01-15T09:30:00Z",
                                display_name: "display_name",
                                entity_type: "entity_type",
                                hierarchy: ["hierarchy", "hierarchy"],
                                id: "id",
                                trait_type: "trait_type",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            value_trait_id: "value_trait_id",
                            value_type: "value_type",
                        },
                        credit_consumption_rate: 1.1,
                        credit_grant_counts: {
                            credit_grant_counts: 1.1,
                        },
                        credit_grant_details: [
                            {
                                credit_type_icon: "credit_type_icon",
                                expires_at: "2024-01-15T09:30:00Z",
                                grant_reason: "free",
                                quantity: 1.1,
                            },
                            {
                                credit_type_icon: "credit_type_icon",
                                expires_at: "2024-01-15T09:30:00Z",
                                grant_reason: "free",
                                quantity: 1.1,
                            },
                        ],
                        credit_grant_reason: "free",
                        credit_remaining: 1.1,
                        credit_total: 1.1,
                        credit_type_icon: "credit_type_icon",
                        credit_used: 1.1,
                        effective_limit: 1,
                        effective_price: 1.1,
                        entitlement_expiration_date: "2024-01-15T09:30:00Z",
                        entitlement_id: "entitlement_id",
                        entitlement_source: "entitlement_source",
                        entitlement_type: "entitlement_type",
                        feature: {
                            created_at: "2024-01-15T09:30:00Z",
                            description: "description",
                            event_subtype: "event_subtype",
                            event_summary: {
                                company_count: 1,
                                environment_id: "environment_id",
                                event_count: 1,
                                event_subtype: "event_subtype",
                                last_seen_at: "2024-01-15T09:30:00Z",
                                user_count: 1,
                            },
                            feature_type: "feature_type",
                            flags: [
                                {
                                    created_at: "2024-01-15T09:30:00Z",
                                    default_value: true,
                                    description: "description",
                                    feature: {
                                        created_at: "2024-01-15T09:30:00Z",
                                        description: "description",
                                        feature_type: "feature_type",
                                        icon: "icon",
                                        id: "id",
                                        name: "name",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                    feature_id: "feature_id",
                                    flag_type: "flag_type",
                                    id: "id",
                                    key: "key",
                                    last_checked_at: "2024-01-15T09:30:00Z",
                                    maintainer_id: "maintainer_id",
                                    name: "name",
                                    rules: [
                                        {
                                            condition_groups: [],
                                            conditions: [],
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            name: "name",
                                            priority: 1,
                                            rule_type: "rule_type",
                                            updated_at: "2024-01-15T09:30:00Z",
                                            value: true,
                                        },
                                        {
                                            condition_groups: [],
                                            conditions: [],
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            name: "name",
                                            priority: 1,
                                            rule_type: "rule_type",
                                            updated_at: "2024-01-15T09:30:00Z",
                                            value: true,
                                        },
                                    ],
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                                {
                                    created_at: "2024-01-15T09:30:00Z",
                                    default_value: true,
                                    description: "description",
                                    feature: {
                                        created_at: "2024-01-15T09:30:00Z",
                                        description: "description",
                                        feature_type: "feature_type",
                                        icon: "icon",
                                        id: "id",
                                        name: "name",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                    feature_id: "feature_id",
                                    flag_type: "flag_type",
                                    id: "id",
                                    key: "key",
                                    last_checked_at: "2024-01-15T09:30:00Z",
                                    maintainer_id: "maintainer_id",
                                    name: "name",
                                    rules: [
                                        {
                                            condition_groups: [],
                                            conditions: [],
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            name: "name",
                                            priority: 1,
                                            rule_type: "rule_type",
                                            updated_at: "2024-01-15T09:30:00Z",
                                            value: true,
                                        },
                                        {
                                            condition_groups: [],
                                            conditions: [],
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            name: "name",
                                            priority: 1,
                                            rule_type: "rule_type",
                                            updated_at: "2024-01-15T09:30:00Z",
                                            value: true,
                                        },
                                    ],
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                            ],
                            icon: "icon",
                            id: "id",
                            lifecycle_phase: "lifecycle_phase",
                            maintainer_id: "maintainer_id",
                            name: "name",
                            plans: [
                                {
                                    description: "description",
                                    id: "id",
                                    image_url: "image_url",
                                    name: "name",
                                },
                                {
                                    description: "description",
                                    id: "id",
                                    image_url: "image_url",
                                    name: "name",
                                },
                            ],
                            plural_name: "plural_name",
                            singular_name: "singular_name",
                            trait: {
                                created_at: "2024-01-15T09:30:00Z",
                                display_name: "display_name",
                                entity_type: "entity_type",
                                hierarchy: ["hierarchy", "hierarchy"],
                                id: "id",
                                trait_type: "trait_type",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            trait_id: "trait_id",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        has_valid_allocation: true,
                        is_unlimited: true,
                        metric_reset_at: "2024-01-15T09:30:00Z",
                        month_reset: "month_reset",
                        monthly_usage_based_price: {
                            billing_scheme: "billing_scheme",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            id: "id",
                            interval: "interval",
                            is_active: true,
                            meter_event_name: "meter_event_name",
                            meter_event_payload_key: "meter_event_payload_key",
                            meter_id: "meter_id",
                            package_size: 1,
                            price: 1,
                            price_decimal: "price_decimal",
                            price_external_id: "price_external_id",
                            price_id: "price_id",
                            price_tier: [
                                {
                                    flat_amount: 1,
                                    per_unit_price: 1,
                                    per_unit_price_decimal: "per_unit_price_decimal",
                                    up_to: 1,
                                },
                                {
                                    flat_amount: 1,
                                    per_unit_price: 1,
                                    per_unit_price_decimal: "per_unit_price_decimal",
                                    up_to: 1,
                                },
                            ],
                            product_external_id: "product_external_id",
                            product_id: "product_id",
                            product_name: "product_name",
                            tiers_mode: "tiers_mode",
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_type: "usage_type",
                        },
                        overuse: 1,
                        percent_used: 1.1,
                        period: "period",
                        plan: {
                            audience_type: "audience_type",
                            created_at: "2024-01-15T09:30:00Z",
                            description: "description",
                            icon: "icon",
                            id: "id",
                            name: "name",
                            plan_type: "plan_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        plan_entitlement: {
                            billing_threshold: 1,
                            consumption_rate: 1.1,
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            feature: {
                                created_at: "2024-01-15T09:30:00Z",
                                description: "description",
                                event_subtype: "event_subtype",
                                feature_type: "feature_type",
                                icon: "icon",
                                id: "id",
                                lifecycle_phase: "lifecycle_phase",
                                maintainer_id: "maintainer_id",
                                name: "name",
                                plural_name: "plural_name",
                                singular_name: "singular_name",
                                trait_id: "trait_id",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            feature_id: "feature_id",
                            id: "id",
                            metered_monthly_price: {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                id: "id",
                                interval: "interval",
                                is_active: true,
                                meter_event_name: "meter_event_name",
                                meter_event_payload_key: "meter_event_payload_key",
                                meter_id: "meter_id",
                                package_size: 1,
                                price: 1,
                                price_decimal: "price_decimal",
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}, {}],
                                product_external_id: "product_external_id",
                                product_id: "product_id",
                                product_name: "product_name",
                                tiers_mode: "tiers_mode",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                            metered_yearly_price: {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                id: "id",
                                interval: "interval",
                                is_active: true,
                                meter_event_name: "meter_event_name",
                                meter_event_payload_key: "meter_event_payload_key",
                                meter_id: "meter_id",
                                package_size: 1,
                                price: 1,
                                price_decimal: "price_decimal",
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}, {}],
                                product_external_id: "product_external_id",
                                product_id: "product_id",
                                product_name: "product_name",
                                tiers_mode: "tiers_mode",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                            metric_period: "metric_period",
                            metric_period_month_reset: "metric_period_month_reset",
                            plan: {
                                audience_type: "audience_type",
                                created_at: "2024-01-15T09:30:00Z",
                                description: "description",
                                icon: "icon",
                                id: "id",
                                name: "name",
                                plan_type: "plan_type",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            plan_id: "plan_id",
                            price_behavior: "price_behavior",
                            rule_id: "rule_id",
                            rule_id_usage_exceeded: "rule_id_usage_exceeded",
                            soft_limit: 1,
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_based_product: {
                                account_id: "account_id",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                is_active: true,
                                name: "name",
                                price: 1.1,
                                price_decimal: "price_decimal",
                                product_id: "product_id",
                                quantity: 1.1,
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            value_bool: true,
                            value_credit: {
                                burn_strategy: "burn_strategy",
                                created_at: "2024-01-15T09:30:00Z",
                                default_expiry_unit: "default_expiry_unit",
                                default_expiry_unit_count: 1,
                                default_rollover_policy: "default_rollover_policy",
                                description: "description",
                                icon: "icon",
                                id: "id",
                                name: "name",
                                plural_name: "plural_name",
                                price: {
                                    currency: "currency",
                                    external_price_id: "external_price_id",
                                    id: "id",
                                    interval: "interval",
                                    price: 1,
                                    scheme: "scheme",
                                },
                                product: {
                                    account_id: "account_id",
                                    created_at: "2024-01-15T09:30:00Z",
                                    environment_id: "environment_id",
                                    external_id: "external_id",
                                    is_active: true,
                                    name: "name",
                                    price: 1.1,
                                    product_id: "product_id",
                                    quantity: 1.1,
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                                singular_name: "singular_name",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            value_numeric: 1,
                            value_trait: {
                                created_at: "2024-01-15T09:30:00Z",
                                display_name: "display_name",
                                entity_type: "entity_type",
                                hierarchy: ["hierarchy", "hierarchy"],
                                id: "id",
                                trait_type: "trait_type",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                            value_trait_id: "value_trait_id",
                            value_type: "value_type",
                        },
                        price_behavior: "price_behavior",
                        soft_limit: 1,
                        usage: 1,
                        yearly_usage_based_price: {
                            billing_scheme: "billing_scheme",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            id: "id",
                            interval: "interval",
                            is_active: true,
                            meter_event_name: "meter_event_name",
                            meter_event_payload_key: "meter_event_payload_key",
                            meter_id: "meter_id",
                            package_size: 1,
                            price: 1,
                            price_decimal: "price_decimal",
                            price_external_id: "price_external_id",
                            price_id: "price_id",
                            price_tier: [
                                {
                                    flat_amount: 1,
                                    per_unit_price: 1,
                                    per_unit_price_decimal: "per_unit_price_decimal",
                                    up_to: 1,
                                },
                                {
                                    flat_amount: 1,
                                    per_unit_price: 1,
                                    per_unit_price_decimal: "per_unit_price_decimal",
                                    up_to: 1,
                                },
                            ],
                            product_external_id: "product_external_id",
                            product_id: "product_id",
                            product_name: "product_name",
                            tiers_mode: "tiers_mode",
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_type: "usage_type",
                        },
                    },
                ],
            },
            params: {
                keys: {
                    keys: "keys",
                },
            },
        });
    });

    test("getFeatureUsageByCompany (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/usage-by-company").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.entitlements.getFeatureUsageByCompany({
                keys: {
                    keys: "keys",
                },
            });
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("getFeatureUsageByCompany (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/usage-by-company").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.entitlements.getFeatureUsageByCompany({
                keys: {
                    keys: "keys",
                },
            });
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("getFeatureUsageByCompany (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/usage-by-company").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.entitlements.getFeatureUsageByCompany({
                keys: {
                    keys: "keys",
                },
            });
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("getFeatureUsageByCompany (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/usage-by-company").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.entitlements.getFeatureUsageByCompany({
                keys: {
                    keys: "keys",
                },
            });
        }).rejects.toThrow(Schematic.InternalServerError);
    });
});
