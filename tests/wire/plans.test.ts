// This file was auto-generated by Fern from our API Definition.

import * as Schematic from "../../src/api/index";
import { SchematicClient } from "../../src/Client";
import { mockServerPool } from "../mock-server/MockServerPool";

describe("Plans", () => {
    test("updateCompanyPlans (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { add_on_ids: ["add_on_ids"] };
        const rawResponseBody = {
            data: {
                add_ons: [{ id: "id", name: "name" }],
                billing_credit_balances: { key: 1.1 },
                billing_subscription: {
                    cancel_at: 1,
                    cancel_at_period_end: true,
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    customer_external_id: "customer_external_id",
                    default_payment_method_id: "default_payment_method_id",
                    discounts: [
                        {
                            coupon_id: "coupon_id",
                            coupon_name: "coupon_name",
                            discount_external_id: "discount_external_id",
                            duration: "duration",
                            is_active: true,
                            started_at: "2024-01-15T09:30:00Z",
                            subscription_external_id: "subscription_external_id",
                        },
                    ],
                    expired_at: "2024-01-15T09:30:00Z",
                    id: "id",
                    interval: "interval",
                    latest_invoice: {
                        amount_due: 1,
                        amount_paid: 1,
                        amount_remaining: 1,
                        collection_method: "collection_method",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        id: "id",
                        subtotal: 1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    metadata: { key: "value" },
                    payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    period_end: 1,
                    period_start: 1,
                    products: [
                        {
                            billing_scheme: "billing_scheme",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            interval: "interval",
                            name: "name",
                            package_size: 1,
                            price: 1,
                            price_external_id: "price_external_id",
                            price_id: "price_id",
                            price_tier: [{}],
                            quantity: 1.1,
                            subscription_id: "subscription_id",
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_type: "usage_type",
                        },
                    ],
                    status: "status",
                    subscription_external_id: "subscription_external_id",
                    total_price: 1,
                    trial_end: 1,
                    trial_end_setting: "trial_end_setting",
                },
                billing_subscriptions: [
                    {
                        cancel_at_period_end: true,
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        discounts: [
                            {
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                is_active: true,
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        id: "id",
                        interval: "interval",
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                default_payment_method: {
                    account_last4: "account_last4",
                    account_name: "account_name",
                    bank_name: "bank_name",
                    billing_email: "billing_email",
                    billing_name: "billing_name",
                    card_brand: "card_brand",
                    card_exp_month: 1,
                    card_exp_year: 1,
                    card_last4: "card_last4",
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    customer_external_id: "customer_external_id",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    id: "id",
                    payment_method_type: "payment_method_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                entity_traits: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        environment_id: "environment_id",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                environment_id: "environment_id",
                id: "id",
                keys: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        entity_id: "entity_id",
                        entity_type: "entity_type",
                        environment_id: "environment_id",
                        id: "id",
                        key: "key",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                last_seen_at: "2024-01-15T09:30:00Z",
                logo_url: "logo_url",
                metrics: [
                    {
                        account_id: "account_id",
                        captured_at_max: "2024-01-15T09:30:00Z",
                        captured_at_min: "2024-01-15T09:30:00Z",
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        event_subtype: "event_subtype",
                        month_reset: "month_reset",
                        period: "period",
                        value: 1,
                    },
                ],
                name: "name",
                payment_methods: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                plan: {
                    added_on: "2024-01-15T09:30:00Z",
                    billing_product_external_id: "billing_product_external_id",
                    billing_product_id: "billing_product_id",
                    description: "description",
                    id: "id",
                    image_url: "image_url",
                    name: "name",
                    plan_period: "plan_period",
                    plan_price: 1,
                },
                plans: [{ id: "id", name: "name" }],
                rules: [
                    {
                        account_id: "account_id",
                        condition_groups: [
                            {
                                conditions: [
                                    {
                                        account_id: "account_id",
                                        condition_type: "condition_type",
                                        environment_id: "environment_id",
                                        id: "id",
                                        operator: "operator",
                                        resource_ids: ["resource_ids"],
                                        trait_value: "trait_value",
                                    },
                                ],
                            },
                        ],
                        conditions: [
                            {
                                account_id: "account_id",
                                condition_type: "condition_type",
                                environment_id: "environment_id",
                                id: "id",
                                operator: "operator",
                                resource_ids: ["resource_ids"],
                                trait_value: "trait_value",
                            },
                        ],
                        environment_id: "environment_id",
                        id: "id",
                        name: "name",
                        priority: 1,
                        rule_type: "rule_type",
                        value: true,
                    },
                ],
                traits: { key: "value" },
                updated_at: "2024-01-15T09:30:00Z",
                user_count: 1,
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .put("/company-plans/company_plan_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.plans.updateCompanyPlans("company_plan_id", {
            add_on_ids: ["add_on_ids"],
        });
        expect(response).toEqual({
            data: {
                add_ons: [
                    {
                        id: "id",
                        name: "name",
                    },
                ],
                billing_credit_balances: {
                    key: 1.1,
                },
                billing_subscription: {
                    cancel_at: 1,
                    cancel_at_period_end: true,
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    customer_external_id: "customer_external_id",
                    default_payment_method_id: "default_payment_method_id",
                    discounts: [
                        {
                            coupon_id: "coupon_id",
                            coupon_name: "coupon_name",
                            discount_external_id: "discount_external_id",
                            duration: "duration",
                            is_active: true,
                            started_at: "2024-01-15T09:30:00Z",
                            subscription_external_id: "subscription_external_id",
                        },
                    ],
                    expired_at: "2024-01-15T09:30:00Z",
                    id: "id",
                    interval: "interval",
                    latest_invoice: {
                        amount_due: 1,
                        amount_paid: 1,
                        amount_remaining: 1,
                        collection_method: "collection_method",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        id: "id",
                        subtotal: 1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    metadata: {
                        key: "value",
                    },
                    payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    period_end: 1,
                    period_start: 1,
                    products: [
                        {
                            billing_scheme: "billing_scheme",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            interval: "interval",
                            name: "name",
                            package_size: 1,
                            price: 1,
                            price_external_id: "price_external_id",
                            price_id: "price_id",
                            price_tier: [{}],
                            quantity: 1.1,
                            subscription_id: "subscription_id",
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_type: "usage_type",
                        },
                    ],
                    status: "status",
                    subscription_external_id: "subscription_external_id",
                    total_price: 1,
                    trial_end: 1,
                    trial_end_setting: "trial_end_setting",
                },
                billing_subscriptions: [
                    {
                        cancel_at_period_end: true,
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        discounts: [
                            {
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                is_active: true,
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        id: "id",
                        interval: "interval",
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                default_payment_method: {
                    account_last4: "account_last4",
                    account_name: "account_name",
                    bank_name: "bank_name",
                    billing_email: "billing_email",
                    billing_name: "billing_name",
                    card_brand: "card_brand",
                    card_exp_month: 1,
                    card_exp_year: 1,
                    card_last4: "card_last4",
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    customer_external_id: "customer_external_id",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    id: "id",
                    payment_method_type: "payment_method_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                entity_traits: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        environment_id: "environment_id",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                environment_id: "environment_id",
                id: "id",
                keys: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        entity_id: "entity_id",
                        entity_type: "entity_type",
                        environment_id: "environment_id",
                        id: "id",
                        key: "key",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                last_seen_at: "2024-01-15T09:30:00Z",
                logo_url: "logo_url",
                metrics: [
                    {
                        account_id: "account_id",
                        captured_at_max: "2024-01-15T09:30:00Z",
                        captured_at_min: "2024-01-15T09:30:00Z",
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        event_subtype: "event_subtype",
                        month_reset: "month_reset",
                        period: "period",
                        value: 1,
                    },
                ],
                name: "name",
                payment_methods: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                plan: {
                    added_on: "2024-01-15T09:30:00Z",
                    billing_product_external_id: "billing_product_external_id",
                    billing_product_id: "billing_product_id",
                    description: "description",
                    id: "id",
                    image_url: "image_url",
                    name: "name",
                    plan_period: "plan_period",
                    plan_price: 1,
                },
                plans: [
                    {
                        id: "id",
                        name: "name",
                    },
                ],
                rules: [
                    {
                        account_id: "account_id",
                        condition_groups: [
                            {
                                conditions: [
                                    {
                                        account_id: "account_id",
                                        condition_type: "condition_type",
                                        environment_id: "environment_id",
                                        id: "id",
                                        operator: "operator",
                                        resource_ids: ["resource_ids"],
                                        trait_value: "trait_value",
                                    },
                                ],
                            },
                        ],
                        conditions: [
                            {
                                account_id: "account_id",
                                condition_type: "condition_type",
                                environment_id: "environment_id",
                                id: "id",
                                operator: "operator",
                                resource_ids: ["resource_ids"],
                                trait_value: "trait_value",
                            },
                        ],
                        environment_id: "environment_id",
                        id: "id",
                        name: "name",
                        priority: 1,
                        rule_type: "rule_type",
                        value: true,
                    },
                ],
                traits: {
                    key: "value",
                },
                updated_at: "2024-01-15T09:30:00Z",
                user_count: 1,
            },
            params: {
                key: "value",
            },
        });
    });

    test("updateCompanyPlans (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { add_on_ids: ["add_on_ids", "add_on_ids"] };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/company-plans/company_plan_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.updateCompanyPlans("company_plan_id", {
                add_on_ids: ["add_on_ids", "add_on_ids"],
            });
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("updateCompanyPlans (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { add_on_ids: ["add_on_ids", "add_on_ids"] };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/company-plans/company_plan_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.updateCompanyPlans("company_plan_id", {
                add_on_ids: ["add_on_ids", "add_on_ids"],
            });
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("updateCompanyPlans (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { add_on_ids: ["add_on_ids", "add_on_ids"] };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/company-plans/company_plan_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.updateCompanyPlans("company_plan_id", {
                add_on_ids: ["add_on_ids", "add_on_ids"],
            });
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("updateCompanyPlans (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { add_on_ids: ["add_on_ids", "add_on_ids"] };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/company-plans/company_plan_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.updateCompanyPlans("company_plan_id", {
                add_on_ids: ["add_on_ids", "add_on_ids"],
            });
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("updateCompanyPlans (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { add_on_ids: ["add_on_ids", "add_on_ids"] };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/company-plans/company_plan_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.updateCompanyPlans("company_plan_id", {
                add_on_ids: ["add_on_ids", "add_on_ids"],
            });
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("getAudience (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                condition_groups: [
                    {
                        conditions: [
                            {
                                condition_type: "condition_type",
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                id: "id",
                                operator: "operator",
                                resource_ids: ["resource_ids"],
                                resources: [{ id: "id", name: "name" }],
                                rule_id: "rule_id",
                                trait_value: "trait_value",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        id: "id",
                        rule_id: "rule_id",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                conditions: [
                    {
                        condition_type: "condition_type",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        id: "id",
                        operator: "operator",
                        resource_ids: ["resource_ids"],
                        resources: [{ id: "id", name: "name" }],
                        rule_id: "rule_id",
                        trait_value: "trait_value",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                flag_id: "flag_id",
                id: "id",
                name: "name",
                plan_id: "plan_id",
                priority: 1,
                rule_type: "rule_type",
                updated_at: "2024-01-15T09:30:00Z",
                value: true,
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .get("/plan-audiences/plan_audience_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.plans.getAudience("plan_audience_id");
        expect(response).toEqual({
            data: {
                condition_groups: [
                    {
                        conditions: [
                            {
                                condition_type: "condition_type",
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                id: "id",
                                operator: "operator",
                                resource_ids: ["resource_ids"],
                                resources: [
                                    {
                                        id: "id",
                                        name: "name",
                                    },
                                ],
                                rule_id: "rule_id",
                                trait_value: "trait_value",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        id: "id",
                        rule_id: "rule_id",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                conditions: [
                    {
                        condition_type: "condition_type",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        id: "id",
                        operator: "operator",
                        resource_ids: ["resource_ids"],
                        resources: [
                            {
                                id: "id",
                                name: "name",
                            },
                        ],
                        rule_id: "rule_id",
                        trait_value: "trait_value",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                flag_id: "flag_id",
                id: "id",
                name: "name",
                plan_id: "plan_id",
                priority: 1,
                rule_type: "rule_type",
                updated_at: "2024-01-15T09:30:00Z",
                value: true,
            },
            params: {
                key: "value",
            },
        });
    });

    test("getAudience (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/plan-audiences/plan_audience_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.getAudience("plan_audience_id");
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("getAudience (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/plan-audiences/plan_audience_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.getAudience("plan_audience_id");
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("getAudience (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/plan-audiences/plan_audience_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.getAudience("plan_audience_id");
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("getAudience (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/plan-audiences/plan_audience_id")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.getAudience("plan_audience_id");
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("updateAudience (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            condition_groups: [
                { conditions: [{ condition_type: "company", operator: "eq", resource_ids: ["resource_ids"] }] },
            ],
            conditions: [{ condition_type: "company", operator: "eq", resource_ids: ["resource_ids"] }],
        };
        const rawResponseBody = {
            data: {
                condition_groups: [
                    {
                        conditions: [
                            {
                                condition_type: "condition_type",
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                id: "id",
                                operator: "operator",
                                resource_ids: ["resource_ids"],
                                resources: [{ id: "id", name: "name" }],
                                rule_id: "rule_id",
                                trait_value: "trait_value",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        id: "id",
                        rule_id: "rule_id",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                conditions: [
                    {
                        condition_type: "condition_type",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        id: "id",
                        operator: "operator",
                        resource_ids: ["resource_ids"],
                        resources: [{ id: "id", name: "name" }],
                        rule_id: "rule_id",
                        trait_value: "trait_value",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                flag_id: "flag_id",
                id: "id",
                name: "name",
                plan_id: "plan_id",
                priority: 1,
                rule_type: "rule_type",
                updated_at: "2024-01-15T09:30:00Z",
                value: true,
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .put("/plan-audiences/plan_audience_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.plans.updateAudience("plan_audience_id", {
            condition_groups: [
                {
                    conditions: [
                        {
                            condition_type: "company",
                            operator: "eq",
                            resource_ids: ["resource_ids"],
                        },
                    ],
                },
            ],
            conditions: [
                {
                    condition_type: "company",
                    operator: "eq",
                    resource_ids: ["resource_ids"],
                },
            ],
        });
        expect(response).toEqual({
            data: {
                condition_groups: [
                    {
                        conditions: [
                            {
                                condition_type: "condition_type",
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                id: "id",
                                operator: "operator",
                                resource_ids: ["resource_ids"],
                                resources: [
                                    {
                                        id: "id",
                                        name: "name",
                                    },
                                ],
                                rule_id: "rule_id",
                                trait_value: "trait_value",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        id: "id",
                        rule_id: "rule_id",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                conditions: [
                    {
                        condition_type: "condition_type",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        id: "id",
                        operator: "operator",
                        resource_ids: ["resource_ids"],
                        resources: [
                            {
                                id: "id",
                                name: "name",
                            },
                        ],
                        rule_id: "rule_id",
                        trait_value: "trait_value",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                flag_id: "flag_id",
                id: "id",
                name: "name",
                plan_id: "plan_id",
                priority: 1,
                rule_type: "rule_type",
                updated_at: "2024-01-15T09:30:00Z",
                value: true,
            },
            params: {
                key: "value",
            },
        });
    });

    test("updateAudience (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            condition_groups: [
                {
                    conditions: [
                        { condition_type: "company", operator: "eq", resource_ids: ["resource_ids", "resource_ids"] },
                        { condition_type: "company", operator: "eq", resource_ids: ["resource_ids", "resource_ids"] },
                    ],
                },
                {
                    conditions: [
                        { condition_type: "company", operator: "eq", resource_ids: ["resource_ids", "resource_ids"] },
                        { condition_type: "company", operator: "eq", resource_ids: ["resource_ids", "resource_ids"] },
                    ],
                },
            ],
            conditions: [
                { condition_type: "company", operator: "eq", resource_ids: ["resource_ids", "resource_ids"] },
                { condition_type: "company", operator: "eq", resource_ids: ["resource_ids", "resource_ids"] },
            ],
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/plan-audiences/plan_audience_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.updateAudience("plan_audience_id", {
                condition_groups: [
                    {
                        conditions: [
                            {
                                condition_type: "company",
                                operator: "eq",
                                resource_ids: ["resource_ids", "resource_ids"],
                            },
                            {
                                condition_type: "company",
                                operator: "eq",
                                resource_ids: ["resource_ids", "resource_ids"],
                            },
                        ],
                    },
                    {
                        conditions: [
                            {
                                condition_type: "company",
                                operator: "eq",
                                resource_ids: ["resource_ids", "resource_ids"],
                            },
                            {
                                condition_type: "company",
                                operator: "eq",
                                resource_ids: ["resource_ids", "resource_ids"],
                            },
                        ],
                    },
                ],
                conditions: [
                    {
                        condition_type: "company",
                        operator: "eq",
                        resource_ids: ["resource_ids", "resource_ids"],
                    },
                    {
                        condition_type: "company",
                        operator: "eq",
                        resource_ids: ["resource_ids", "resource_ids"],
                    },
                ],
            });
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("updateAudience (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            condition_groups: [
                {
                    conditions: [
                        { condition_type: "company", operator: "eq", resource_ids: ["resource_ids", "resource_ids"] },
                        { condition_type: "company", operator: "eq", resource_ids: ["resource_ids", "resource_ids"] },
                    ],
                },
                {
                    conditions: [
                        { condition_type: "company", operator: "eq", resource_ids: ["resource_ids", "resource_ids"] },
                        { condition_type: "company", operator: "eq", resource_ids: ["resource_ids", "resource_ids"] },
                    ],
                },
            ],
            conditions: [
                { condition_type: "company", operator: "eq", resource_ids: ["resource_ids", "resource_ids"] },
                { condition_type: "company", operator: "eq", resource_ids: ["resource_ids", "resource_ids"] },
            ],
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/plan-audiences/plan_audience_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.updateAudience("plan_audience_id", {
                condition_groups: [
                    {
                        conditions: [
                            {
                                condition_type: "company",
                                operator: "eq",
                                resource_ids: ["resource_ids", "resource_ids"],
                            },
                            {
                                condition_type: "company",
                                operator: "eq",
                                resource_ids: ["resource_ids", "resource_ids"],
                            },
                        ],
                    },
                    {
                        conditions: [
                            {
                                condition_type: "company",
                                operator: "eq",
                                resource_ids: ["resource_ids", "resource_ids"],
                            },
                            {
                                condition_type: "company",
                                operator: "eq",
                                resource_ids: ["resource_ids", "resource_ids"],
                            },
                        ],
                    },
                ],
                conditions: [
                    {
                        condition_type: "company",
                        operator: "eq",
                        resource_ids: ["resource_ids", "resource_ids"],
                    },
                    {
                        condition_type: "company",
                        operator: "eq",
                        resource_ids: ["resource_ids", "resource_ids"],
                    },
                ],
            });
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("updateAudience (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            condition_groups: [
                {
                    conditions: [
                        { condition_type: "company", operator: "eq", resource_ids: ["resource_ids", "resource_ids"] },
                        { condition_type: "company", operator: "eq", resource_ids: ["resource_ids", "resource_ids"] },
                    ],
                },
                {
                    conditions: [
                        { condition_type: "company", operator: "eq", resource_ids: ["resource_ids", "resource_ids"] },
                        { condition_type: "company", operator: "eq", resource_ids: ["resource_ids", "resource_ids"] },
                    ],
                },
            ],
            conditions: [
                { condition_type: "company", operator: "eq", resource_ids: ["resource_ids", "resource_ids"] },
                { condition_type: "company", operator: "eq", resource_ids: ["resource_ids", "resource_ids"] },
            ],
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/plan-audiences/plan_audience_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.updateAudience("plan_audience_id", {
                condition_groups: [
                    {
                        conditions: [
                            {
                                condition_type: "company",
                                operator: "eq",
                                resource_ids: ["resource_ids", "resource_ids"],
                            },
                            {
                                condition_type: "company",
                                operator: "eq",
                                resource_ids: ["resource_ids", "resource_ids"],
                            },
                        ],
                    },
                    {
                        conditions: [
                            {
                                condition_type: "company",
                                operator: "eq",
                                resource_ids: ["resource_ids", "resource_ids"],
                            },
                            {
                                condition_type: "company",
                                operator: "eq",
                                resource_ids: ["resource_ids", "resource_ids"],
                            },
                        ],
                    },
                ],
                conditions: [
                    {
                        condition_type: "company",
                        operator: "eq",
                        resource_ids: ["resource_ids", "resource_ids"],
                    },
                    {
                        condition_type: "company",
                        operator: "eq",
                        resource_ids: ["resource_ids", "resource_ids"],
                    },
                ],
            });
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("updateAudience (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            condition_groups: [
                {
                    conditions: [
                        { condition_type: "company", operator: "eq", resource_ids: ["resource_ids", "resource_ids"] },
                        { condition_type: "company", operator: "eq", resource_ids: ["resource_ids", "resource_ids"] },
                    ],
                },
                {
                    conditions: [
                        { condition_type: "company", operator: "eq", resource_ids: ["resource_ids", "resource_ids"] },
                        { condition_type: "company", operator: "eq", resource_ids: ["resource_ids", "resource_ids"] },
                    ],
                },
            ],
            conditions: [
                { condition_type: "company", operator: "eq", resource_ids: ["resource_ids", "resource_ids"] },
                { condition_type: "company", operator: "eq", resource_ids: ["resource_ids", "resource_ids"] },
            ],
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/plan-audiences/plan_audience_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.updateAudience("plan_audience_id", {
                condition_groups: [
                    {
                        conditions: [
                            {
                                condition_type: "company",
                                operator: "eq",
                                resource_ids: ["resource_ids", "resource_ids"],
                            },
                            {
                                condition_type: "company",
                                operator: "eq",
                                resource_ids: ["resource_ids", "resource_ids"],
                            },
                        ],
                    },
                    {
                        conditions: [
                            {
                                condition_type: "company",
                                operator: "eq",
                                resource_ids: ["resource_ids", "resource_ids"],
                            },
                            {
                                condition_type: "company",
                                operator: "eq",
                                resource_ids: ["resource_ids", "resource_ids"],
                            },
                        ],
                    },
                ],
                conditions: [
                    {
                        condition_type: "company",
                        operator: "eq",
                        resource_ids: ["resource_ids", "resource_ids"],
                    },
                    {
                        condition_type: "company",
                        operator: "eq",
                        resource_ids: ["resource_ids", "resource_ids"],
                    },
                ],
            });
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("updateAudience (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            condition_groups: [
                {
                    conditions: [
                        { condition_type: "company", operator: "eq", resource_ids: ["resource_ids", "resource_ids"] },
                        { condition_type: "company", operator: "eq", resource_ids: ["resource_ids", "resource_ids"] },
                    ],
                },
                {
                    conditions: [
                        { condition_type: "company", operator: "eq", resource_ids: ["resource_ids", "resource_ids"] },
                        { condition_type: "company", operator: "eq", resource_ids: ["resource_ids", "resource_ids"] },
                    ],
                },
            ],
            conditions: [
                { condition_type: "company", operator: "eq", resource_ids: ["resource_ids", "resource_ids"] },
                { condition_type: "company", operator: "eq", resource_ids: ["resource_ids", "resource_ids"] },
            ],
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/plan-audiences/plan_audience_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.updateAudience("plan_audience_id", {
                condition_groups: [
                    {
                        conditions: [
                            {
                                condition_type: "company",
                                operator: "eq",
                                resource_ids: ["resource_ids", "resource_ids"],
                            },
                            {
                                condition_type: "company",
                                operator: "eq",
                                resource_ids: ["resource_ids", "resource_ids"],
                            },
                        ],
                    },
                    {
                        conditions: [
                            {
                                condition_type: "company",
                                operator: "eq",
                                resource_ids: ["resource_ids", "resource_ids"],
                            },
                            {
                                condition_type: "company",
                                operator: "eq",
                                resource_ids: ["resource_ids", "resource_ids"],
                            },
                        ],
                    },
                ],
                conditions: [
                    {
                        condition_type: "company",
                        operator: "eq",
                        resource_ids: ["resource_ids", "resource_ids"],
                    },
                    {
                        condition_type: "company",
                        operator: "eq",
                        resource_ids: ["resource_ids", "resource_ids"],
                    },
                ],
            });
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("deleteAudience (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { data: { deleted: true }, params: { key: "value" } };
        server
            .mockEndpoint()
            .delete("/plan-audiences/plan_audience_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.plans.deleteAudience("plan_audience_id");
        expect(response).toEqual({
            data: {
                deleted: true,
            },
            params: {
                key: "value",
            },
        });
    });

    test("deleteAudience (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .delete("/plan-audiences/plan_audience_id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.deleteAudience("plan_audience_id");
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("deleteAudience (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .delete("/plan-audiences/plan_audience_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.deleteAudience("plan_audience_id");
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("deleteAudience (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .delete("/plan-audiences/plan_audience_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.deleteAudience("plan_audience_id");
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("deleteAudience (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .delete("/plan-audiences/plan_audience_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.deleteAudience("plan_audience_id");
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("deleteAudience (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .delete("/plan-audiences/plan_audience_id")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.deleteAudience("plan_audience_id");
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("listPlans (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    audience_type: "audience_type",
                    billing_product: {
                        account_id: "account_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        is_active: true,
                        name: "name",
                        price: 1.1,
                        prices: [
                            {
                                currency: "currency",
                                external_price_id: "external_price_id",
                                id: "id",
                                interval: "interval",
                                price: 1,
                                scheme: "scheme",
                            },
                        ],
                        product_id: "product_id",
                        quantity: 1.1,
                        subscription_count: 1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    charge_type: "charge_type",
                    company_count: 1,
                    controlled_by: "controlled_by",
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    features: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            description: "description",
                            feature_type: "feature_type",
                            flags: [
                                {
                                    created_at: "2024-01-15T09:30:00Z",
                                    default_value: true,
                                    description: "description",
                                    flag_type: "flag_type",
                                    id: "id",
                                    key: "key",
                                    name: "name",
                                    rules: [
                                        {
                                            condition_groups: [
                                                {
                                                    conditions: [
                                                        {
                                                            condition_type: "condition_type",
                                                            created_at: "2024-01-15T09:30:00Z",
                                                            environment_id: "environment_id",
                                                            id: "id",
                                                            operator: "operator",
                                                            resource_ids: ["resource_ids"],
                                                            resources: [{ id: "id", name: "name" }],
                                                            rule_id: "rule_id",
                                                            trait_value: "trait_value",
                                                            updated_at: "2024-01-15T09:30:00Z",
                                                        },
                                                    ],
                                                    created_at: "2024-01-15T09:30:00Z",
                                                    environment_id: "environment_id",
                                                    id: "id",
                                                    rule_id: "rule_id",
                                                    updated_at: "2024-01-15T09:30:00Z",
                                                },
                                            ],
                                            conditions: [
                                                {
                                                    condition_type: "condition_type",
                                                    created_at: "2024-01-15T09:30:00Z",
                                                    environment_id: "environment_id",
                                                    id: "id",
                                                    operator: "operator",
                                                    resource_ids: ["resource_ids"],
                                                    resources: [{ id: "id", name: "name" }],
                                                    rule_id: "rule_id",
                                                    trait_value: "trait_value",
                                                    updated_at: "2024-01-15T09:30:00Z",
                                                },
                                            ],
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            name: "name",
                                            priority: 1,
                                            rule_type: "rule_type",
                                            updated_at: "2024-01-15T09:30:00Z",
                                            value: true,
                                        },
                                    ],
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                            ],
                            icon: "icon",
                            id: "id",
                            name: "name",
                            plans: [{ id: "id", name: "name" }],
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    icon: "icon",
                    id: "id",
                    included_credit_grants: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            credit_amount: 1,
                            credit_id: "credit_id",
                            credit_name: "credit_name",
                            id: "id",
                            plan_id: "plan_id",
                            plan_name: "plan_name",
                            reset_cadence: "reset_cadence",
                            reset_start: "reset_start",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    is_default: true,
                    is_free: true,
                    is_trialable: true,
                    monthly_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    name: "name",
                    one_time_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    plan_type: "plan_type",
                    trial_days: 1,
                    updated_at: "2024-01-15T09:30:00Z",
                    yearly_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                },
            ],
            params: {
                company_id: "company_id",
                for_fallback_plan: true,
                for_initial_plan: true,
                for_trial_expiry_plan: true,
                has_product_id: true,
                ids: ["ids"],
                limit: 1,
                offset: 1,
                plan_type: "plan",
                q: "q",
                requires_payment_method: true,
                without_entitlement_for: "without_entitlement_for",
                without_paid_product_id: true,
                without_product_id: true,
            },
        };
        server.mockEndpoint().get("/plans").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.plans.listPlans({
            company_id: "company_id",
            for_fallback_plan: true,
            for_initial_plan: true,
            for_trial_expiry_plan: true,
            has_product_id: true,
            plan_type: "plan",
            q: "q",
            requires_payment_method: true,
            without_entitlement_for: "without_entitlement_for",
            without_product_id: true,
            without_paid_product_id: true,
            limit: 1,
            offset: 1,
        });
        expect(response).toEqual({
            data: [
                {
                    audience_type: "audience_type",
                    billing_product: {
                        account_id: "account_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        is_active: true,
                        name: "name",
                        price: 1.1,
                        prices: [
                            {
                                currency: "currency",
                                external_price_id: "external_price_id",
                                id: "id",
                                interval: "interval",
                                price: 1,
                                scheme: "scheme",
                            },
                        ],
                        product_id: "product_id",
                        quantity: 1.1,
                        subscription_count: 1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    charge_type: "charge_type",
                    company_count: 1,
                    controlled_by: "controlled_by",
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    features: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            description: "description",
                            feature_type: "feature_type",
                            flags: [
                                {
                                    created_at: "2024-01-15T09:30:00Z",
                                    default_value: true,
                                    description: "description",
                                    flag_type: "flag_type",
                                    id: "id",
                                    key: "key",
                                    name: "name",
                                    rules: [
                                        {
                                            condition_groups: [
                                                {
                                                    conditions: [
                                                        {
                                                            condition_type: "condition_type",
                                                            created_at: "2024-01-15T09:30:00Z",
                                                            environment_id: "environment_id",
                                                            id: "id",
                                                            operator: "operator",
                                                            resource_ids: ["resource_ids"],
                                                            resources: [
                                                                {
                                                                    id: "id",
                                                                    name: "name",
                                                                },
                                                            ],
                                                            rule_id: "rule_id",
                                                            trait_value: "trait_value",
                                                            updated_at: "2024-01-15T09:30:00Z",
                                                        },
                                                    ],
                                                    created_at: "2024-01-15T09:30:00Z",
                                                    environment_id: "environment_id",
                                                    id: "id",
                                                    rule_id: "rule_id",
                                                    updated_at: "2024-01-15T09:30:00Z",
                                                },
                                            ],
                                            conditions: [
                                                {
                                                    condition_type: "condition_type",
                                                    created_at: "2024-01-15T09:30:00Z",
                                                    environment_id: "environment_id",
                                                    id: "id",
                                                    operator: "operator",
                                                    resource_ids: ["resource_ids"],
                                                    resources: [
                                                        {
                                                            id: "id",
                                                            name: "name",
                                                        },
                                                    ],
                                                    rule_id: "rule_id",
                                                    trait_value: "trait_value",
                                                    updated_at: "2024-01-15T09:30:00Z",
                                                },
                                            ],
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            name: "name",
                                            priority: 1,
                                            rule_type: "rule_type",
                                            updated_at: "2024-01-15T09:30:00Z",
                                            value: true,
                                        },
                                    ],
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                            ],
                            icon: "icon",
                            id: "id",
                            name: "name",
                            plans: [
                                {
                                    id: "id",
                                    name: "name",
                                },
                            ],
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    icon: "icon",
                    id: "id",
                    included_credit_grants: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            credit_amount: 1,
                            credit_id: "credit_id",
                            credit_name: "credit_name",
                            id: "id",
                            plan_id: "plan_id",
                            plan_name: "plan_name",
                            reset_cadence: "reset_cadence",
                            reset_start: "reset_start",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    is_default: true,
                    is_free: true,
                    is_trialable: true,
                    monthly_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    name: "name",
                    one_time_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    plan_type: "plan_type",
                    trial_days: 1,
                    updated_at: "2024-01-15T09:30:00Z",
                    yearly_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                },
            ],
            params: {
                company_id: "company_id",
                for_fallback_plan: true,
                for_initial_plan: true,
                for_trial_expiry_plan: true,
                has_product_id: true,
                ids: ["ids"],
                limit: 1,
                offset: 1,
                plan_type: "plan",
                q: "q",
                requires_payment_method: true,
                without_entitlement_for: "without_entitlement_for",
                without_paid_product_id: true,
                without_product_id: true,
            },
        });
    });

    test("listPlans (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/plans").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.plans.listPlans();
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("listPlans (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/plans").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.plans.listPlans();
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("listPlans (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/plans").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.plans.listPlans();
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("listPlans (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/plans").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.plans.listPlans();
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("listPlans (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/plans").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.plans.listPlans();
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("createPlan (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { description: "description", name: "name", plan_type: "plan" };
        const rawResponseBody = {
            data: {
                audience_type: "audience_type",
                billing_product: {
                    account_id: "account_id",
                    created_at: "2024-01-15T09:30:00Z",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    is_active: true,
                    name: "name",
                    price: 1.1,
                    price_decimal: "price_decimal",
                    prices: [
                        {
                            currency: "currency",
                            external_price_id: "external_price_id",
                            id: "id",
                            interval: "interval",
                            price: 1,
                            scheme: "scheme",
                        },
                    ],
                    product_id: "product_id",
                    quantity: 1.1,
                    subscription_count: 1,
                    updated_at: "2024-01-15T09:30:00Z",
                },
                charge_type: "charge_type",
                company_count: 1,
                controlled_by: "controlled_by",
                created_at: "2024-01-15T09:30:00Z",
                description: "description",
                features: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        description: "description",
                        feature_type: "feature_type",
                        flags: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                default_value: true,
                                description: "description",
                                flag_type: "flag_type",
                                id: "id",
                                key: "key",
                                name: "name",
                                rules: [
                                    {
                                        condition_groups: [
                                            {
                                                conditions: [
                                                    {
                                                        condition_type: "condition_type",
                                                        created_at: "2024-01-15T09:30:00Z",
                                                        environment_id: "environment_id",
                                                        id: "id",
                                                        operator: "operator",
                                                        resource_ids: ["resource_ids"],
                                                        resources: [{ id: "id", name: "name" }],
                                                        rule_id: "rule_id",
                                                        trait_value: "trait_value",
                                                        updated_at: "2024-01-15T09:30:00Z",
                                                    },
                                                ],
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                rule_id: "rule_id",
                                                updated_at: "2024-01-15T09:30:00Z",
                                            },
                                        ],
                                        conditions: [
                                            {
                                                condition_type: "condition_type",
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                operator: "operator",
                                                resource_ids: ["resource_ids"],
                                                resources: [{ id: "id", name: "name" }],
                                                rule_id: "rule_id",
                                                trait_value: "trait_value",
                                                updated_at: "2024-01-15T09:30:00Z",
                                            },
                                        ],
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        name: "name",
                                        priority: 1,
                                        rule_type: "rule_type",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        value: true,
                                    },
                                ],
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        icon: "icon",
                        id: "id",
                        name: "name",
                        plans: [{ id: "id", name: "name" }],
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                icon: "icon",
                id: "id",
                included_credit_grants: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        credit_amount: 1,
                        credit_id: "credit_id",
                        credit_name: "credit_name",
                        id: "id",
                        plan_id: "plan_id",
                        plan_name: "plan_name",
                        reset_cadence: "reset_cadence",
                        reset_start: "reset_start",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                is_default: true,
                is_free: true,
                is_trialable: true,
                monthly_price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                name: "name",
                one_time_price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                plan_type: "plan_type",
                trial_days: 1,
                updated_at: "2024-01-15T09:30:00Z",
                yearly_price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/plans")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.plans.createPlan({
            description: "description",
            name: "name",
            plan_type: "plan",
        });
        expect(response).toEqual({
            data: {
                audience_type: "audience_type",
                billing_product: {
                    account_id: "account_id",
                    created_at: "2024-01-15T09:30:00Z",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    is_active: true,
                    name: "name",
                    price: 1.1,
                    price_decimal: "price_decimal",
                    prices: [
                        {
                            currency: "currency",
                            external_price_id: "external_price_id",
                            id: "id",
                            interval: "interval",
                            price: 1,
                            scheme: "scheme",
                        },
                    ],
                    product_id: "product_id",
                    quantity: 1.1,
                    subscription_count: 1,
                    updated_at: "2024-01-15T09:30:00Z",
                },
                charge_type: "charge_type",
                company_count: 1,
                controlled_by: "controlled_by",
                created_at: "2024-01-15T09:30:00Z",
                description: "description",
                features: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        description: "description",
                        feature_type: "feature_type",
                        flags: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                default_value: true,
                                description: "description",
                                flag_type: "flag_type",
                                id: "id",
                                key: "key",
                                name: "name",
                                rules: [
                                    {
                                        condition_groups: [
                                            {
                                                conditions: [
                                                    {
                                                        condition_type: "condition_type",
                                                        created_at: "2024-01-15T09:30:00Z",
                                                        environment_id: "environment_id",
                                                        id: "id",
                                                        operator: "operator",
                                                        resource_ids: ["resource_ids"],
                                                        resources: [
                                                            {
                                                                id: "id",
                                                                name: "name",
                                                            },
                                                        ],
                                                        rule_id: "rule_id",
                                                        trait_value: "trait_value",
                                                        updated_at: "2024-01-15T09:30:00Z",
                                                    },
                                                ],
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                rule_id: "rule_id",
                                                updated_at: "2024-01-15T09:30:00Z",
                                            },
                                        ],
                                        conditions: [
                                            {
                                                condition_type: "condition_type",
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                operator: "operator",
                                                resource_ids: ["resource_ids"],
                                                resources: [
                                                    {
                                                        id: "id",
                                                        name: "name",
                                                    },
                                                ],
                                                rule_id: "rule_id",
                                                trait_value: "trait_value",
                                                updated_at: "2024-01-15T09:30:00Z",
                                            },
                                        ],
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        name: "name",
                                        priority: 1,
                                        rule_type: "rule_type",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        value: true,
                                    },
                                ],
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        icon: "icon",
                        id: "id",
                        name: "name",
                        plans: [
                            {
                                id: "id",
                                name: "name",
                            },
                        ],
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                icon: "icon",
                id: "id",
                included_credit_grants: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        credit_amount: 1,
                        credit_id: "credit_id",
                        credit_name: "credit_name",
                        id: "id",
                        plan_id: "plan_id",
                        plan_name: "plan_name",
                        reset_cadence: "reset_cadence",
                        reset_start: "reset_start",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                is_default: true,
                is_free: true,
                is_trialable: true,
                monthly_price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                name: "name",
                one_time_price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                plan_type: "plan_type",
                trial_days: 1,
                updated_at: "2024-01-15T09:30:00Z",
                yearly_price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
            },
            params: {
                key: "value",
            },
        });
    });

    test("createPlan (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { description: "description", name: "name", plan_type: "plan" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/plans")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.createPlan({
                description: "description",
                name: "name",
                plan_type: "plan",
            });
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("createPlan (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { description: "description", name: "name", plan_type: "plan" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/plans")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.createPlan({
                description: "description",
                name: "name",
                plan_type: "plan",
            });
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("createPlan (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { description: "description", name: "name", plan_type: "plan" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/plans")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.createPlan({
                description: "description",
                name: "name",
                plan_type: "plan",
            });
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("createPlan (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { description: "description", name: "name", plan_type: "plan" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/plans")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.createPlan({
                description: "description",
                name: "name",
                plan_type: "plan",
            });
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("createPlan (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { description: "description", name: "name", plan_type: "plan" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/plans")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.createPlan({
                description: "description",
                name: "name",
                plan_type: "plan",
            });
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("getPlan (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                audience_type: "audience_type",
                billing_product: {
                    account_id: "account_id",
                    created_at: "2024-01-15T09:30:00Z",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    is_active: true,
                    name: "name",
                    price: 1.1,
                    price_decimal: "price_decimal",
                    prices: [
                        {
                            currency: "currency",
                            external_price_id: "external_price_id",
                            id: "id",
                            interval: "interval",
                            price: 1,
                            scheme: "scheme",
                        },
                    ],
                    product_id: "product_id",
                    quantity: 1.1,
                    subscription_count: 1,
                    updated_at: "2024-01-15T09:30:00Z",
                },
                charge_type: "charge_type",
                company_count: 1,
                controlled_by: "controlled_by",
                created_at: "2024-01-15T09:30:00Z",
                description: "description",
                features: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        description: "description",
                        feature_type: "feature_type",
                        flags: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                default_value: true,
                                description: "description",
                                flag_type: "flag_type",
                                id: "id",
                                key: "key",
                                name: "name",
                                rules: [
                                    {
                                        condition_groups: [
                                            {
                                                conditions: [
                                                    {
                                                        condition_type: "condition_type",
                                                        created_at: "2024-01-15T09:30:00Z",
                                                        environment_id: "environment_id",
                                                        id: "id",
                                                        operator: "operator",
                                                        resource_ids: ["resource_ids"],
                                                        resources: [{ id: "id", name: "name" }],
                                                        rule_id: "rule_id",
                                                        trait_value: "trait_value",
                                                        updated_at: "2024-01-15T09:30:00Z",
                                                    },
                                                ],
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                rule_id: "rule_id",
                                                updated_at: "2024-01-15T09:30:00Z",
                                            },
                                        ],
                                        conditions: [
                                            {
                                                condition_type: "condition_type",
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                operator: "operator",
                                                resource_ids: ["resource_ids"],
                                                resources: [{ id: "id", name: "name" }],
                                                rule_id: "rule_id",
                                                trait_value: "trait_value",
                                                updated_at: "2024-01-15T09:30:00Z",
                                            },
                                        ],
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        name: "name",
                                        priority: 1,
                                        rule_type: "rule_type",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        value: true,
                                    },
                                ],
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        icon: "icon",
                        id: "id",
                        name: "name",
                        plans: [{ id: "id", name: "name" }],
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                icon: "icon",
                id: "id",
                included_credit_grants: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        credit_amount: 1,
                        credit_id: "credit_id",
                        credit_name: "credit_name",
                        id: "id",
                        plan_id: "plan_id",
                        plan_name: "plan_name",
                        reset_cadence: "reset_cadence",
                        reset_start: "reset_start",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                is_default: true,
                is_free: true,
                is_trialable: true,
                monthly_price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                name: "name",
                one_time_price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                plan_type: "plan_type",
                trial_days: 1,
                updated_at: "2024-01-15T09:30:00Z",
                yearly_price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
            },
            params: { key: "value" },
        };
        server.mockEndpoint().get("/plans/plan_id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.plans.getPlan("plan_id");
        expect(response).toEqual({
            data: {
                audience_type: "audience_type",
                billing_product: {
                    account_id: "account_id",
                    created_at: "2024-01-15T09:30:00Z",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    is_active: true,
                    name: "name",
                    price: 1.1,
                    price_decimal: "price_decimal",
                    prices: [
                        {
                            currency: "currency",
                            external_price_id: "external_price_id",
                            id: "id",
                            interval: "interval",
                            price: 1,
                            scheme: "scheme",
                        },
                    ],
                    product_id: "product_id",
                    quantity: 1.1,
                    subscription_count: 1,
                    updated_at: "2024-01-15T09:30:00Z",
                },
                charge_type: "charge_type",
                company_count: 1,
                controlled_by: "controlled_by",
                created_at: "2024-01-15T09:30:00Z",
                description: "description",
                features: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        description: "description",
                        feature_type: "feature_type",
                        flags: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                default_value: true,
                                description: "description",
                                flag_type: "flag_type",
                                id: "id",
                                key: "key",
                                name: "name",
                                rules: [
                                    {
                                        condition_groups: [
                                            {
                                                conditions: [
                                                    {
                                                        condition_type: "condition_type",
                                                        created_at: "2024-01-15T09:30:00Z",
                                                        environment_id: "environment_id",
                                                        id: "id",
                                                        operator: "operator",
                                                        resource_ids: ["resource_ids"],
                                                        resources: [
                                                            {
                                                                id: "id",
                                                                name: "name",
                                                            },
                                                        ],
                                                        rule_id: "rule_id",
                                                        trait_value: "trait_value",
                                                        updated_at: "2024-01-15T09:30:00Z",
                                                    },
                                                ],
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                rule_id: "rule_id",
                                                updated_at: "2024-01-15T09:30:00Z",
                                            },
                                        ],
                                        conditions: [
                                            {
                                                condition_type: "condition_type",
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                operator: "operator",
                                                resource_ids: ["resource_ids"],
                                                resources: [
                                                    {
                                                        id: "id",
                                                        name: "name",
                                                    },
                                                ],
                                                rule_id: "rule_id",
                                                trait_value: "trait_value",
                                                updated_at: "2024-01-15T09:30:00Z",
                                            },
                                        ],
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        name: "name",
                                        priority: 1,
                                        rule_type: "rule_type",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        value: true,
                                    },
                                ],
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        icon: "icon",
                        id: "id",
                        name: "name",
                        plans: [
                            {
                                id: "id",
                                name: "name",
                            },
                        ],
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                icon: "icon",
                id: "id",
                included_credit_grants: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        credit_amount: 1,
                        credit_id: "credit_id",
                        credit_name: "credit_name",
                        id: "id",
                        plan_id: "plan_id",
                        plan_name: "plan_name",
                        reset_cadence: "reset_cadence",
                        reset_start: "reset_start",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                is_default: true,
                is_free: true,
                is_trialable: true,
                monthly_price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                name: "name",
                one_time_price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                plan_type: "plan_type",
                trial_days: 1,
                updated_at: "2024-01-15T09:30:00Z",
                yearly_price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
            },
            params: {
                key: "value",
            },
        });
    });

    test("getPlan (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/plans/plan_id").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.plans.getPlan("plan_id");
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("getPlan (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/plans/plan_id").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.plans.getPlan("plan_id");
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("getPlan (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/plans/plan_id").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.plans.getPlan("plan_id");
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("getPlan (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/plans/plan_id").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.plans.getPlan("plan_id");
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("updatePlan (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name" };
        const rawResponseBody = {
            data: {
                audience_type: "audience_type",
                billing_product: {
                    account_id: "account_id",
                    created_at: "2024-01-15T09:30:00Z",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    is_active: true,
                    name: "name",
                    price: 1.1,
                    price_decimal: "price_decimal",
                    prices: [
                        {
                            currency: "currency",
                            external_price_id: "external_price_id",
                            id: "id",
                            interval: "interval",
                            price: 1,
                            scheme: "scheme",
                        },
                    ],
                    product_id: "product_id",
                    quantity: 1.1,
                    subscription_count: 1,
                    updated_at: "2024-01-15T09:30:00Z",
                },
                charge_type: "charge_type",
                company_count: 1,
                controlled_by: "controlled_by",
                created_at: "2024-01-15T09:30:00Z",
                description: "description",
                features: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        description: "description",
                        feature_type: "feature_type",
                        flags: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                default_value: true,
                                description: "description",
                                flag_type: "flag_type",
                                id: "id",
                                key: "key",
                                name: "name",
                                rules: [
                                    {
                                        condition_groups: [
                                            {
                                                conditions: [
                                                    {
                                                        condition_type: "condition_type",
                                                        created_at: "2024-01-15T09:30:00Z",
                                                        environment_id: "environment_id",
                                                        id: "id",
                                                        operator: "operator",
                                                        resource_ids: ["resource_ids"],
                                                        resources: [{ id: "id", name: "name" }],
                                                        rule_id: "rule_id",
                                                        trait_value: "trait_value",
                                                        updated_at: "2024-01-15T09:30:00Z",
                                                    },
                                                ],
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                rule_id: "rule_id",
                                                updated_at: "2024-01-15T09:30:00Z",
                                            },
                                        ],
                                        conditions: [
                                            {
                                                condition_type: "condition_type",
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                operator: "operator",
                                                resource_ids: ["resource_ids"],
                                                resources: [{ id: "id", name: "name" }],
                                                rule_id: "rule_id",
                                                trait_value: "trait_value",
                                                updated_at: "2024-01-15T09:30:00Z",
                                            },
                                        ],
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        name: "name",
                                        priority: 1,
                                        rule_type: "rule_type",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        value: true,
                                    },
                                ],
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        icon: "icon",
                        id: "id",
                        name: "name",
                        plans: [{ id: "id", name: "name" }],
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                icon: "icon",
                id: "id",
                included_credit_grants: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        credit_amount: 1,
                        credit_id: "credit_id",
                        credit_name: "credit_name",
                        id: "id",
                        plan_id: "plan_id",
                        plan_name: "plan_name",
                        reset_cadence: "reset_cadence",
                        reset_start: "reset_start",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                is_default: true,
                is_free: true,
                is_trialable: true,
                monthly_price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                name: "name",
                one_time_price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                plan_type: "plan_type",
                trial_days: 1,
                updated_at: "2024-01-15T09:30:00Z",
                yearly_price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .put("/plans/plan_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.plans.updatePlan("plan_id", {
            name: "name",
        });
        expect(response).toEqual({
            data: {
                audience_type: "audience_type",
                billing_product: {
                    account_id: "account_id",
                    created_at: "2024-01-15T09:30:00Z",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    is_active: true,
                    name: "name",
                    price: 1.1,
                    price_decimal: "price_decimal",
                    prices: [
                        {
                            currency: "currency",
                            external_price_id: "external_price_id",
                            id: "id",
                            interval: "interval",
                            price: 1,
                            scheme: "scheme",
                        },
                    ],
                    product_id: "product_id",
                    quantity: 1.1,
                    subscription_count: 1,
                    updated_at: "2024-01-15T09:30:00Z",
                },
                charge_type: "charge_type",
                company_count: 1,
                controlled_by: "controlled_by",
                created_at: "2024-01-15T09:30:00Z",
                description: "description",
                features: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        description: "description",
                        feature_type: "feature_type",
                        flags: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                default_value: true,
                                description: "description",
                                flag_type: "flag_type",
                                id: "id",
                                key: "key",
                                name: "name",
                                rules: [
                                    {
                                        condition_groups: [
                                            {
                                                conditions: [
                                                    {
                                                        condition_type: "condition_type",
                                                        created_at: "2024-01-15T09:30:00Z",
                                                        environment_id: "environment_id",
                                                        id: "id",
                                                        operator: "operator",
                                                        resource_ids: ["resource_ids"],
                                                        resources: [
                                                            {
                                                                id: "id",
                                                                name: "name",
                                                            },
                                                        ],
                                                        rule_id: "rule_id",
                                                        trait_value: "trait_value",
                                                        updated_at: "2024-01-15T09:30:00Z",
                                                    },
                                                ],
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                rule_id: "rule_id",
                                                updated_at: "2024-01-15T09:30:00Z",
                                            },
                                        ],
                                        conditions: [
                                            {
                                                condition_type: "condition_type",
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                operator: "operator",
                                                resource_ids: ["resource_ids"],
                                                resources: [
                                                    {
                                                        id: "id",
                                                        name: "name",
                                                    },
                                                ],
                                                rule_id: "rule_id",
                                                trait_value: "trait_value",
                                                updated_at: "2024-01-15T09:30:00Z",
                                            },
                                        ],
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        name: "name",
                                        priority: 1,
                                        rule_type: "rule_type",
                                        updated_at: "2024-01-15T09:30:00Z",
                                        value: true,
                                    },
                                ],
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        icon: "icon",
                        id: "id",
                        name: "name",
                        plans: [
                            {
                                id: "id",
                                name: "name",
                            },
                        ],
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                icon: "icon",
                id: "id",
                included_credit_grants: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        credit_amount: 1,
                        credit_id: "credit_id",
                        credit_name: "credit_name",
                        id: "id",
                        plan_id: "plan_id",
                        plan_name: "plan_name",
                        reset_cadence: "reset_cadence",
                        reset_start: "reset_start",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                is_default: true,
                is_free: true,
                is_trialable: true,
                monthly_price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                name: "name",
                one_time_price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
                plan_type: "plan_type",
                trial_days: 1,
                updated_at: "2024-01-15T09:30:00Z",
                yearly_price: {
                    currency: "currency",
                    external_price_id: "external_price_id",
                    id: "id",
                    interval: "interval",
                    price: 1,
                    price_decimal: "price_decimal",
                    scheme: "scheme",
                },
            },
            params: {
                key: "value",
            },
        });
    });

    test("updatePlan (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/plans/plan_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.updatePlan("plan_id", {
                name: "name",
            });
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("updatePlan (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/plans/plan_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.updatePlan("plan_id", {
                name: "name",
            });
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("updatePlan (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/plans/plan_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.updatePlan("plan_id", {
                name: "name",
            });
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("updatePlan (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/plans/plan_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.updatePlan("plan_id", {
                name: "name",
            });
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("updatePlan (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/plans/plan_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.updatePlan("plan_id", {
                name: "name",
            });
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("deletePlan (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { data: { deleted: true }, params: { key: "value" } };
        server.mockEndpoint().delete("/plans/plan_id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.plans.deletePlan("plan_id");
        expect(response).toEqual({
            data: {
                deleted: true,
            },
            params: {
                key: "value",
            },
        });
    });

    test("deletePlan (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().delete("/plans/plan_id").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.plans.deletePlan("plan_id");
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("deletePlan (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().delete("/plans/plan_id").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.plans.deletePlan("plan_id");
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("deletePlan (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().delete("/plans/plan_id").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.plans.deletePlan("plan_id");
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("deletePlan (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().delete("/plans/plan_id").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.plans.deletePlan("plan_id");
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("deletePlan (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().delete("/plans/plan_id").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.plans.deletePlan("plan_id");
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("upsertBillingProductPlan (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { charge_type: "one_time", is_trialable: true };
        const rawResponseBody = {
            data: {
                account_id: "account_id",
                billing_product_id: "billing_product_id",
                charge_type: "charge_type",
                controlled_by: "controlled_by",
                environment_id: "environment_id",
                is_trialable: true,
                monthly_price_id: "monthly_price_id",
                one_time_price_id: "one_time_price_id",
                plan_id: "plan_id",
                trial_days: 1,
                yearly_price_id: "yearly_price_id",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .put("/plans/plan_id/billing_products")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.plans.upsertBillingProductPlan("plan_id", {
            charge_type: "one_time",
            is_trialable: true,
        });
        expect(response).toEqual({
            data: {
                account_id: "account_id",
                billing_product_id: "billing_product_id",
                charge_type: "charge_type",
                controlled_by: "controlled_by",
                environment_id: "environment_id",
                is_trialable: true,
                monthly_price_id: "monthly_price_id",
                one_time_price_id: "one_time_price_id",
                plan_id: "plan_id",
                trial_days: 1,
                yearly_price_id: "yearly_price_id",
            },
            params: {
                key: "value",
            },
        });
    });

    test("upsertBillingProductPlan (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { charge_type: "one_time", is_trialable: true };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/plans/plan_id/billing_products")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.upsertBillingProductPlan("plan_id", {
                charge_type: "one_time",
                is_trialable: true,
            });
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("upsertBillingProductPlan (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { charge_type: "one_time", is_trialable: true };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/plans/plan_id/billing_products")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.upsertBillingProductPlan("plan_id", {
                charge_type: "one_time",
                is_trialable: true,
            });
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("upsertBillingProductPlan (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { charge_type: "one_time", is_trialable: true };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/plans/plan_id/billing_products")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.upsertBillingProductPlan("plan_id", {
                charge_type: "one_time",
                is_trialable: true,
            });
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("upsertBillingProductPlan (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { charge_type: "one_time", is_trialable: true };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/plans/plan_id/billing_products")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.upsertBillingProductPlan("plan_id", {
                charge_type: "one_time",
                is_trialable: true,
            });
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("upsertBillingProductPlan (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { charge_type: "one_time", is_trialable: true };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/plans/plan_id/billing_products")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.plans.upsertBillingProductPlan("plan_id", {
                charge_type: "one_time",
                is_trialable: true,
            });
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("countPlans (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: { count: 1 },
            params: {
                company_id: "company_id",
                for_fallback_plan: true,
                for_initial_plan: true,
                for_trial_expiry_plan: true,
                has_product_id: true,
                ids: ["ids"],
                limit: 1,
                offset: 1,
                plan_type: "plan",
                q: "q",
                requires_payment_method: true,
                without_entitlement_for: "without_entitlement_for",
                without_paid_product_id: true,
                without_product_id: true,
            },
        };
        server.mockEndpoint().get("/plans/count").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.plans.countPlans({
            company_id: "company_id",
            for_fallback_plan: true,
            for_initial_plan: true,
            for_trial_expiry_plan: true,
            has_product_id: true,
            plan_type: "plan",
            q: "q",
            requires_payment_method: true,
            without_entitlement_for: "without_entitlement_for",
            without_product_id: true,
            without_paid_product_id: true,
            limit: 1,
            offset: 1,
        });
        expect(response).toEqual({
            data: {
                count: 1,
            },
            params: {
                company_id: "company_id",
                for_fallback_plan: true,
                for_initial_plan: true,
                for_trial_expiry_plan: true,
                has_product_id: true,
                ids: ["ids"],
                limit: 1,
                offset: 1,
                plan_type: "plan",
                q: "q",
                requires_payment_method: true,
                without_entitlement_for: "without_entitlement_for",
                without_paid_product_id: true,
                without_product_id: true,
            },
        });
    });

    test("countPlans (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/plans/count").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.plans.countPlans();
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("countPlans (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/plans/count").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.plans.countPlans();
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("countPlans (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/plans/count").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.plans.countPlans();
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("countPlans (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/plans/count").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.plans.countPlans();
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("countPlans (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/plans/count").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.plans.countPlans();
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("listPlanIssues (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [{ code: "code", description: "description", detail: "detail", id: "id" }],
            params: { plan_id: "plan_id" },
        };
        server.mockEndpoint().get("/plans/issues").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.plans.listPlanIssues({
            plan_id: "plan_id",
        });
        expect(response).toEqual({
            data: [
                {
                    code: "code",
                    description: "description",
                    detail: "detail",
                    id: "id",
                },
            ],
            params: {
                plan_id: "plan_id",
            },
        });
    });

    test("listPlanIssues (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/plans/issues").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.plans.listPlanIssues({
                plan_id: "plan_id",
            });
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("listPlanIssues (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/plans/issues").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.plans.listPlanIssues({
                plan_id: "plan_id",
            });
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("listPlanIssues (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/plans/issues").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.plans.listPlanIssues({
                plan_id: "plan_id",
            });
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("listPlanIssues (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/plans/issues").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.plans.listPlanIssues({
                plan_id: "plan_id",
            });
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("listPlanIssues (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/plans/issues").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.plans.listPlanIssues({
                plan_id: "plan_id",
            });
        }).rejects.toThrow(Schematic.InternalServerError);
    });
});
