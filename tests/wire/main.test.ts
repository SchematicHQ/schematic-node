// This file was auto-generated by Fern from our API Definition.

import { SchematicClient } from "../../src/Client";
import { mockServerPool } from "../mock-server/MockServerPool";

describe("SchematicClient", () => {
    test("getCredit", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        server.mockEndpoint().get("/billing/credits/:credit_id").respondWith().statusCode(200).build();

        const response = await client.getCredit();
        expect(response).toEqual(undefined);
    });

    test("updateCredit", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        server.mockEndpoint().put("/billing/credits/:credit_id").respondWith().statusCode(200).build();

        const response = await client.updateCredit();
        expect(response).toEqual(undefined);
    });

    test("deleteCredit", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/billing/credits/:credit_id").respondWith().statusCode(200).build();

        const response = await client.deleteCredit();
        expect(response).toEqual(undefined);
    });

    test("getCreditBundle", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        server.mockEndpoint().get("/billing/credits/bundles/:bundle_id").respondWith().statusCode(200).build();

        const response = await client.getCreditBundle();
        expect(response).toEqual(undefined);
    });

    test("purchaseCreditBundle", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        server.mockEndpoint().post("/billing/credits/bundles/:bundle_id").respondWith().statusCode(200).build();

        const response = await client.purchaseCreditBundle();
        expect(response).toEqual(undefined);
    });

    test("updateCreditBundle", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        server.mockEndpoint().put("/billing/credits/bundles/:bundle_id").respondWith().statusCode(200).build();

        const response = await client.updateCreditBundle();
        expect(response).toEqual(undefined);
    });

    test("zeroOutCreditGrant", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        server.mockEndpoint().put("/billing/credits/grants/:grant_id/zero-out").respondWith().statusCode(200).build();

        const response = await client.zeroOutCreditGrant();
        expect(response).toEqual(undefined);
    });

    test("deletePlanCreditGrant", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        server
            .mockEndpoint()
            .delete("/billing/credits/plan-grants/:plan_grant_id")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.deletePlanCreditGrant();
        expect(response).toEqual(undefined);
    });
});
