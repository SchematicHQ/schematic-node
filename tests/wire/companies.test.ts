/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SchematicClient } from "../../src/Client";

describe("Companies", () => {
    test("listCompanies", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    add_ons: [{ id: "id", name: "name" }],
                    billing_credit_balances: { key: 1.1 },
                    billing_subscription: {
                        cancel_at_period_end: true,
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        discounts: [
                            {
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                is_active: true,
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        id: "id",
                        interval: "interval",
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                    },
                    billing_subscriptions: [
                        {
                            cancel_at_period_end: true,
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            customer_external_id: "customer_external_id",
                            discounts: [
                                {
                                    coupon_id: "coupon_id",
                                    coupon_name: "coupon_name",
                                    discount_external_id: "discount_external_id",
                                    duration: "duration",
                                    is_active: true,
                                    started_at: "2024-01-15T09:30:00Z",
                                    subscription_external_id: "subscription_external_id",
                                },
                            ],
                            id: "id",
                            interval: "interval",
                            period_end: 1,
                            period_start: 1,
                            products: [
                                {
                                    billing_scheme: "billing_scheme",
                                    created_at: "2024-01-15T09:30:00Z",
                                    currency: "currency",
                                    environment_id: "environment_id",
                                    external_id: "external_id",
                                    id: "id",
                                    interval: "interval",
                                    name: "name",
                                    package_size: 1,
                                    price: 1,
                                    price_external_id: "price_external_id",
                                    price_id: "price_id",
                                    price_tier: [{}],
                                    quantity: 1.1,
                                    subscription_id: "subscription_id",
                                    updated_at: "2024-01-15T09:30:00Z",
                                    usage_type: "usage_type",
                                },
                            ],
                            status: "status",
                            subscription_external_id: "subscription_external_id",
                            total_price: 1,
                        },
                    ],
                    created_at: "2024-01-15T09:30:00Z",
                    default_payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    entity_traits: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            environment_id: "environment_id",
                            id: "id",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    environment_id: "environment_id",
                    id: "id",
                    keys: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            entity_id: "entity_id",
                            entity_type: "entity_type",
                            environment_id: "environment_id",
                            id: "id",
                            key: "key",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    last_seen_at: "2024-01-15T09:30:00Z",
                    logo_url: "logo_url",
                    metrics: [
                        {
                            account_id: "account_id",
                            captured_at_max: "2024-01-15T09:30:00Z",
                            captured_at_min: "2024-01-15T09:30:00Z",
                            company_id: "company_id",
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            event_subtype: "event_subtype",
                            month_reset: "month_reset",
                            period: "period",
                            value: 1,
                        },
                    ],
                    name: "name",
                    payment_methods: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            customer_external_id: "customer_external_id",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            payment_method_type: "payment_method_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    plan: { id: "id", name: "name" },
                    plans: [{ id: "id", name: "name" }],
                    traits: { key: "value" },
                    updated_at: "2024-01-15T09:30:00Z",
                    user_count: 1,
                },
            ],
            params: {
                ids: ["ids"],
                limit: 1,
                offset: 1,
                plan_id: "plan_id",
                q: "q",
                with_subscription: true,
                without_feature_override_for: "without_feature_override_for",
                without_plan: true,
            },
        };
        server.mockEndpoint().get("/companies").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.companies.listCompanies();
        expect(response).toEqual({
            data: [
                {
                    add_ons: [
                        {
                            id: "id",
                            name: "name",
                        },
                    ],
                    billing_credit_balances: {
                        key: 1.1,
                    },
                    billing_subscription: {
                        cancel_at_period_end: true,
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        discounts: [
                            {
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                is_active: true,
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        id: "id",
                        interval: "interval",
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                    },
                    billing_subscriptions: [
                        {
                            cancel_at_period_end: true,
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            customer_external_id: "customer_external_id",
                            discounts: [
                                {
                                    coupon_id: "coupon_id",
                                    coupon_name: "coupon_name",
                                    discount_external_id: "discount_external_id",
                                    duration: "duration",
                                    is_active: true,
                                    started_at: "2024-01-15T09:30:00Z",
                                    subscription_external_id: "subscription_external_id",
                                },
                            ],
                            id: "id",
                            interval: "interval",
                            period_end: 1,
                            period_start: 1,
                            products: [
                                {
                                    billing_scheme: "billing_scheme",
                                    created_at: "2024-01-15T09:30:00Z",
                                    currency: "currency",
                                    environment_id: "environment_id",
                                    external_id: "external_id",
                                    id: "id",
                                    interval: "interval",
                                    name: "name",
                                    package_size: 1,
                                    price: 1,
                                    price_external_id: "price_external_id",
                                    price_id: "price_id",
                                    price_tier: [{}],
                                    quantity: 1.1,
                                    subscription_id: "subscription_id",
                                    updated_at: "2024-01-15T09:30:00Z",
                                    usage_type: "usage_type",
                                },
                            ],
                            status: "status",
                            subscription_external_id: "subscription_external_id",
                            total_price: 1,
                        },
                    ],
                    created_at: "2024-01-15T09:30:00Z",
                    default_payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    entity_traits: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            environment_id: "environment_id",
                            id: "id",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    environment_id: "environment_id",
                    id: "id",
                    keys: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            entity_id: "entity_id",
                            entity_type: "entity_type",
                            environment_id: "environment_id",
                            id: "id",
                            key: "key",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    last_seen_at: "2024-01-15T09:30:00Z",
                    logo_url: "logo_url",
                    metrics: [
                        {
                            account_id: "account_id",
                            captured_at_max: "2024-01-15T09:30:00Z",
                            captured_at_min: "2024-01-15T09:30:00Z",
                            company_id: "company_id",
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            event_subtype: "event_subtype",
                            month_reset: "month_reset",
                            period: "period",
                            value: 1,
                        },
                    ],
                    name: "name",
                    payment_methods: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            customer_external_id: "customer_external_id",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            payment_method_type: "payment_method_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    plan: {
                        id: "id",
                        name: "name",
                    },
                    plans: [
                        {
                            id: "id",
                            name: "name",
                        },
                    ],
                    traits: {
                        key: "value",
                    },
                    updated_at: "2024-01-15T09:30:00Z",
                    user_count: 1,
                },
            ],
            params: {
                ids: ["ids"],
                limit: 1,
                offset: 1,
                plan_id: "plan_id",
                q: "q",
                with_subscription: true,
                without_feature_override_for: "without_feature_override_for",
                without_plan: true,
            },
        });
    });

    test("upsertCompany", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { keys: { key: "value" } };
        const rawResponseBody = {
            data: {
                add_ons: [{ id: "id", name: "name" }],
                billing_credit_balances: { key: 1.1 },
                billing_subscription: {
                    cancel_at: 1,
                    cancel_at_period_end: true,
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    customer_external_id: "customer_external_id",
                    default_payment_method_id: "default_payment_method_id",
                    discounts: [
                        {
                            coupon_id: "coupon_id",
                            coupon_name: "coupon_name",
                            discount_external_id: "discount_external_id",
                            duration: "duration",
                            is_active: true,
                            started_at: "2024-01-15T09:30:00Z",
                            subscription_external_id: "subscription_external_id",
                        },
                    ],
                    expired_at: "2024-01-15T09:30:00Z",
                    id: "id",
                    interval: "interval",
                    latest_invoice: {
                        amount_due: 1,
                        amount_paid: 1,
                        amount_remaining: 1,
                        collection_method: "collection_method",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        id: "id",
                        subtotal: 1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    metadata: { key: "value" },
                    payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    period_end: 1,
                    period_start: 1,
                    products: [
                        {
                            billing_scheme: "billing_scheme",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            interval: "interval",
                            name: "name",
                            package_size: 1,
                            price: 1,
                            price_external_id: "price_external_id",
                            price_id: "price_id",
                            price_tier: [{}],
                            quantity: 1.1,
                            subscription_id: "subscription_id",
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_type: "usage_type",
                        },
                    ],
                    status: "status",
                    subscription_external_id: "subscription_external_id",
                    total_price: 1,
                    trial_end: 1,
                    trial_end_setting: "trial_end_setting",
                },
                billing_subscriptions: [
                    {
                        cancel_at_period_end: true,
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        discounts: [
                            {
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                is_active: true,
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        id: "id",
                        interval: "interval",
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                default_payment_method: {
                    account_last4: "account_last4",
                    account_name: "account_name",
                    bank_name: "bank_name",
                    billing_email: "billing_email",
                    billing_name: "billing_name",
                    card_brand: "card_brand",
                    card_exp_month: 1,
                    card_exp_year: 1,
                    card_last4: "card_last4",
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    customer_external_id: "customer_external_id",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    id: "id",
                    payment_method_type: "payment_method_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                entity_traits: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        environment_id: "environment_id",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                environment_id: "environment_id",
                id: "id",
                keys: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        entity_id: "entity_id",
                        entity_type: "entity_type",
                        environment_id: "environment_id",
                        id: "id",
                        key: "key",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                last_seen_at: "2024-01-15T09:30:00Z",
                logo_url: "logo_url",
                metrics: [
                    {
                        account_id: "account_id",
                        captured_at_max: "2024-01-15T09:30:00Z",
                        captured_at_min: "2024-01-15T09:30:00Z",
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        event_subtype: "event_subtype",
                        month_reset: "month_reset",
                        period: "period",
                        value: 1,
                    },
                ],
                name: "name",
                payment_methods: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                plan: {
                    added_on: "2024-01-15T09:30:00Z",
                    billing_product_external_id: "billing_product_external_id",
                    billing_product_id: "billing_product_id",
                    description: "description",
                    id: "id",
                    image_url: "image_url",
                    name: "name",
                    plan_period: "plan_period",
                    plan_price: 1,
                },
                plans: [{ id: "id", name: "name" }],
                traits: { key: "value" },
                updated_at: "2024-01-15T09:30:00Z",
                user_count: 1,
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/companies")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.companies.upsertCompany({
            keys: {
                key: "value",
            },
        });
        expect(response).toEqual({
            data: {
                add_ons: [
                    {
                        id: "id",
                        name: "name",
                    },
                ],
                billing_credit_balances: {
                    key: 1.1,
                },
                billing_subscription: {
                    cancel_at: 1,
                    cancel_at_period_end: true,
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    customer_external_id: "customer_external_id",
                    default_payment_method_id: "default_payment_method_id",
                    discounts: [
                        {
                            coupon_id: "coupon_id",
                            coupon_name: "coupon_name",
                            discount_external_id: "discount_external_id",
                            duration: "duration",
                            is_active: true,
                            started_at: "2024-01-15T09:30:00Z",
                            subscription_external_id: "subscription_external_id",
                        },
                    ],
                    expired_at: "2024-01-15T09:30:00Z",
                    id: "id",
                    interval: "interval",
                    latest_invoice: {
                        amount_due: 1,
                        amount_paid: 1,
                        amount_remaining: 1,
                        collection_method: "collection_method",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        id: "id",
                        subtotal: 1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    metadata: {
                        key: "value",
                    },
                    payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    period_end: 1,
                    period_start: 1,
                    products: [
                        {
                            billing_scheme: "billing_scheme",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            interval: "interval",
                            name: "name",
                            package_size: 1,
                            price: 1,
                            price_external_id: "price_external_id",
                            price_id: "price_id",
                            price_tier: [{}],
                            quantity: 1.1,
                            subscription_id: "subscription_id",
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_type: "usage_type",
                        },
                    ],
                    status: "status",
                    subscription_external_id: "subscription_external_id",
                    total_price: 1,
                    trial_end: 1,
                    trial_end_setting: "trial_end_setting",
                },
                billing_subscriptions: [
                    {
                        cancel_at_period_end: true,
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        discounts: [
                            {
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                is_active: true,
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        id: "id",
                        interval: "interval",
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                default_payment_method: {
                    account_last4: "account_last4",
                    account_name: "account_name",
                    bank_name: "bank_name",
                    billing_email: "billing_email",
                    billing_name: "billing_name",
                    card_brand: "card_brand",
                    card_exp_month: 1,
                    card_exp_year: 1,
                    card_last4: "card_last4",
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    customer_external_id: "customer_external_id",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    id: "id",
                    payment_method_type: "payment_method_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                entity_traits: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        environment_id: "environment_id",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                environment_id: "environment_id",
                id: "id",
                keys: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        entity_id: "entity_id",
                        entity_type: "entity_type",
                        environment_id: "environment_id",
                        id: "id",
                        key: "key",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                last_seen_at: "2024-01-15T09:30:00Z",
                logo_url: "logo_url",
                metrics: [
                    {
                        account_id: "account_id",
                        captured_at_max: "2024-01-15T09:30:00Z",
                        captured_at_min: "2024-01-15T09:30:00Z",
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        event_subtype: "event_subtype",
                        month_reset: "month_reset",
                        period: "period",
                        value: 1,
                    },
                ],
                name: "name",
                payment_methods: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                plan: {
                    added_on: "2024-01-15T09:30:00Z",
                    billing_product_external_id: "billing_product_external_id",
                    billing_product_id: "billing_product_id",
                    description: "description",
                    id: "id",
                    image_url: "image_url",
                    name: "name",
                    plan_period: "plan_period",
                    plan_price: 1,
                },
                plans: [
                    {
                        id: "id",
                        name: "name",
                    },
                ],
                traits: {
                    key: "value",
                },
                updated_at: "2024-01-15T09:30:00Z",
                user_count: 1,
            },
            params: {
                key: "value",
            },
        });
    });

    test("getCompany", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                add_ons: [{ id: "id", name: "name" }],
                billing_credit_balances: { key: 1.1 },
                billing_subscription: {
                    cancel_at: 1,
                    cancel_at_period_end: true,
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    customer_external_id: "customer_external_id",
                    default_payment_method_id: "default_payment_method_id",
                    discounts: [
                        {
                            coupon_id: "coupon_id",
                            coupon_name: "coupon_name",
                            discount_external_id: "discount_external_id",
                            duration: "duration",
                            is_active: true,
                            started_at: "2024-01-15T09:30:00Z",
                            subscription_external_id: "subscription_external_id",
                        },
                    ],
                    expired_at: "2024-01-15T09:30:00Z",
                    id: "id",
                    interval: "interval",
                    latest_invoice: {
                        amount_due: 1,
                        amount_paid: 1,
                        amount_remaining: 1,
                        collection_method: "collection_method",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        id: "id",
                        subtotal: 1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    metadata: { key: "value" },
                    payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    period_end: 1,
                    period_start: 1,
                    products: [
                        {
                            billing_scheme: "billing_scheme",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            interval: "interval",
                            name: "name",
                            package_size: 1,
                            price: 1,
                            price_external_id: "price_external_id",
                            price_id: "price_id",
                            price_tier: [{}],
                            quantity: 1.1,
                            subscription_id: "subscription_id",
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_type: "usage_type",
                        },
                    ],
                    status: "status",
                    subscription_external_id: "subscription_external_id",
                    total_price: 1,
                    trial_end: 1,
                    trial_end_setting: "trial_end_setting",
                },
                billing_subscriptions: [
                    {
                        cancel_at_period_end: true,
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        discounts: [
                            {
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                is_active: true,
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        id: "id",
                        interval: "interval",
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                default_payment_method: {
                    account_last4: "account_last4",
                    account_name: "account_name",
                    bank_name: "bank_name",
                    billing_email: "billing_email",
                    billing_name: "billing_name",
                    card_brand: "card_brand",
                    card_exp_month: 1,
                    card_exp_year: 1,
                    card_last4: "card_last4",
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    customer_external_id: "customer_external_id",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    id: "id",
                    payment_method_type: "payment_method_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                entity_traits: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        environment_id: "environment_id",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                environment_id: "environment_id",
                id: "id",
                keys: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        entity_id: "entity_id",
                        entity_type: "entity_type",
                        environment_id: "environment_id",
                        id: "id",
                        key: "key",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                last_seen_at: "2024-01-15T09:30:00Z",
                logo_url: "logo_url",
                metrics: [
                    {
                        account_id: "account_id",
                        captured_at_max: "2024-01-15T09:30:00Z",
                        captured_at_min: "2024-01-15T09:30:00Z",
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        event_subtype: "event_subtype",
                        month_reset: "month_reset",
                        period: "period",
                        value: 1,
                    },
                ],
                name: "name",
                payment_methods: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                plan: {
                    added_on: "2024-01-15T09:30:00Z",
                    billing_product_external_id: "billing_product_external_id",
                    billing_product_id: "billing_product_id",
                    description: "description",
                    id: "id",
                    image_url: "image_url",
                    name: "name",
                    plan_period: "plan_period",
                    plan_price: 1,
                },
                plans: [{ id: "id", name: "name" }],
                traits: { key: "value" },
                updated_at: "2024-01-15T09:30:00Z",
                user_count: 1,
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .get("/companies/company_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.companies.getCompany("company_id");
        expect(response).toEqual({
            data: {
                add_ons: [
                    {
                        id: "id",
                        name: "name",
                    },
                ],
                billing_credit_balances: {
                    key: 1.1,
                },
                billing_subscription: {
                    cancel_at: 1,
                    cancel_at_period_end: true,
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    customer_external_id: "customer_external_id",
                    default_payment_method_id: "default_payment_method_id",
                    discounts: [
                        {
                            coupon_id: "coupon_id",
                            coupon_name: "coupon_name",
                            discount_external_id: "discount_external_id",
                            duration: "duration",
                            is_active: true,
                            started_at: "2024-01-15T09:30:00Z",
                            subscription_external_id: "subscription_external_id",
                        },
                    ],
                    expired_at: "2024-01-15T09:30:00Z",
                    id: "id",
                    interval: "interval",
                    latest_invoice: {
                        amount_due: 1,
                        amount_paid: 1,
                        amount_remaining: 1,
                        collection_method: "collection_method",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        id: "id",
                        subtotal: 1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    metadata: {
                        key: "value",
                    },
                    payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    period_end: 1,
                    period_start: 1,
                    products: [
                        {
                            billing_scheme: "billing_scheme",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            interval: "interval",
                            name: "name",
                            package_size: 1,
                            price: 1,
                            price_external_id: "price_external_id",
                            price_id: "price_id",
                            price_tier: [{}],
                            quantity: 1.1,
                            subscription_id: "subscription_id",
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_type: "usage_type",
                        },
                    ],
                    status: "status",
                    subscription_external_id: "subscription_external_id",
                    total_price: 1,
                    trial_end: 1,
                    trial_end_setting: "trial_end_setting",
                },
                billing_subscriptions: [
                    {
                        cancel_at_period_end: true,
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        discounts: [
                            {
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                is_active: true,
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        id: "id",
                        interval: "interval",
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                default_payment_method: {
                    account_last4: "account_last4",
                    account_name: "account_name",
                    bank_name: "bank_name",
                    billing_email: "billing_email",
                    billing_name: "billing_name",
                    card_brand: "card_brand",
                    card_exp_month: 1,
                    card_exp_year: 1,
                    card_last4: "card_last4",
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    customer_external_id: "customer_external_id",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    id: "id",
                    payment_method_type: "payment_method_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                entity_traits: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        environment_id: "environment_id",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                environment_id: "environment_id",
                id: "id",
                keys: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        entity_id: "entity_id",
                        entity_type: "entity_type",
                        environment_id: "environment_id",
                        id: "id",
                        key: "key",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                last_seen_at: "2024-01-15T09:30:00Z",
                logo_url: "logo_url",
                metrics: [
                    {
                        account_id: "account_id",
                        captured_at_max: "2024-01-15T09:30:00Z",
                        captured_at_min: "2024-01-15T09:30:00Z",
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        event_subtype: "event_subtype",
                        month_reset: "month_reset",
                        period: "period",
                        value: 1,
                    },
                ],
                name: "name",
                payment_methods: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                plan: {
                    added_on: "2024-01-15T09:30:00Z",
                    billing_product_external_id: "billing_product_external_id",
                    billing_product_id: "billing_product_id",
                    description: "description",
                    id: "id",
                    image_url: "image_url",
                    name: "name",
                    plan_period: "plan_period",
                    plan_price: 1,
                },
                plans: [
                    {
                        id: "id",
                        name: "name",
                    },
                ],
                traits: {
                    key: "value",
                },
                updated_at: "2024-01-15T09:30:00Z",
                user_count: 1,
            },
            params: {
                key: "value",
            },
        });
    });

    test("deleteCompany", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { data: { deleted: true }, params: { key: "value" } };
        server
            .mockEndpoint()
            .delete("/companies/company_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.companies.deleteCompany("company_id");
        expect(response).toEqual({
            data: {
                deleted: true,
            },
            params: {
                key: "value",
            },
        });
    });

    test("countCompanies", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: { count: 1 },
            params: {
                ids: ["ids"],
                limit: 1,
                offset: 1,
                plan_id: "plan_id",
                q: "q",
                with_subscription: true,
                without_feature_override_for: "without_feature_override_for",
                without_plan: true,
            },
        };
        server.mockEndpoint().get("/companies/count").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.companies.countCompanies();
        expect(response).toEqual({
            data: {
                count: 1,
            },
            params: {
                ids: ["ids"],
                limit: 1,
                offset: 1,
                plan_id: "plan_id",
                q: "q",
                with_subscription: true,
                without_feature_override_for: "without_feature_override_for",
                without_plan: true,
            },
        });
    });

    test("countCompaniesForAdvancedFilter", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: { count: 1 },
            params: {
                display_properties: ["display_properties"],
                feature_ids: ["feature_ids"],
                ids: ["ids"],
                limit: 1,
                monetized_subscriptions: true,
                offset: 1,
                plan_ids: ["plan_ids"],
                q: "q",
                sort_order_column: "sort_order_column",
                sort_order_direction: "asc",
                subscription_statuses: ["subscription_statuses"],
                subscription_types: ["subscription_types"],
                without_plan: true,
                without_subscription: true,
            },
        };
        server.mockEndpoint().get("/companies/count2").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.companies.countCompaniesForAdvancedFilter();
        expect(response).toEqual({
            data: {
                count: 1,
            },
            params: {
                display_properties: ["display_properties"],
                feature_ids: ["feature_ids"],
                ids: ["ids"],
                limit: 1,
                monetized_subscriptions: true,
                offset: 1,
                plan_ids: ["plan_ids"],
                q: "q",
                sort_order_column: "sort_order_column",
                sort_order_direction: "asc",
                subscription_statuses: ["subscription_statuses"],
                subscription_types: ["subscription_types"],
                without_plan: true,
                without_subscription: true,
            },
        });
    });

    test("createCompany", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { keys: { key: "value" } };
        const rawResponseBody = {
            data: {
                add_ons: [{ id: "id", name: "name" }],
                billing_credit_balances: { key: 1.1 },
                billing_subscription: {
                    cancel_at: 1,
                    cancel_at_period_end: true,
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    customer_external_id: "customer_external_id",
                    default_payment_method_id: "default_payment_method_id",
                    discounts: [
                        {
                            coupon_id: "coupon_id",
                            coupon_name: "coupon_name",
                            discount_external_id: "discount_external_id",
                            duration: "duration",
                            is_active: true,
                            started_at: "2024-01-15T09:30:00Z",
                            subscription_external_id: "subscription_external_id",
                        },
                    ],
                    expired_at: "2024-01-15T09:30:00Z",
                    id: "id",
                    interval: "interval",
                    latest_invoice: {
                        amount_due: 1,
                        amount_paid: 1,
                        amount_remaining: 1,
                        collection_method: "collection_method",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        id: "id",
                        subtotal: 1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    metadata: { key: "value" },
                    payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    period_end: 1,
                    period_start: 1,
                    products: [
                        {
                            billing_scheme: "billing_scheme",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            interval: "interval",
                            name: "name",
                            package_size: 1,
                            price: 1,
                            price_external_id: "price_external_id",
                            price_id: "price_id",
                            price_tier: [{}],
                            quantity: 1.1,
                            subscription_id: "subscription_id",
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_type: "usage_type",
                        },
                    ],
                    status: "status",
                    subscription_external_id: "subscription_external_id",
                    total_price: 1,
                    trial_end: 1,
                    trial_end_setting: "trial_end_setting",
                },
                billing_subscriptions: [
                    {
                        cancel_at_period_end: true,
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        discounts: [
                            {
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                is_active: true,
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        id: "id",
                        interval: "interval",
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                default_payment_method: {
                    account_last4: "account_last4",
                    account_name: "account_name",
                    bank_name: "bank_name",
                    billing_email: "billing_email",
                    billing_name: "billing_name",
                    card_brand: "card_brand",
                    card_exp_month: 1,
                    card_exp_year: 1,
                    card_last4: "card_last4",
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    customer_external_id: "customer_external_id",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    id: "id",
                    payment_method_type: "payment_method_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                entity_traits: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        environment_id: "environment_id",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                environment_id: "environment_id",
                id: "id",
                keys: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        entity_id: "entity_id",
                        entity_type: "entity_type",
                        environment_id: "environment_id",
                        id: "id",
                        key: "key",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                last_seen_at: "2024-01-15T09:30:00Z",
                logo_url: "logo_url",
                metrics: [
                    {
                        account_id: "account_id",
                        captured_at_max: "2024-01-15T09:30:00Z",
                        captured_at_min: "2024-01-15T09:30:00Z",
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        event_subtype: "event_subtype",
                        month_reset: "month_reset",
                        period: "period",
                        value: 1,
                    },
                ],
                name: "name",
                payment_methods: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                plan: {
                    added_on: "2024-01-15T09:30:00Z",
                    billing_product_external_id: "billing_product_external_id",
                    billing_product_id: "billing_product_id",
                    description: "description",
                    id: "id",
                    image_url: "image_url",
                    name: "name",
                    plan_period: "plan_period",
                    plan_price: 1,
                },
                plans: [{ id: "id", name: "name" }],
                traits: { key: "value" },
                updated_at: "2024-01-15T09:30:00Z",
                user_count: 1,
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/companies/create")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.companies.createCompany({
            keys: {
                key: "value",
            },
        });
        expect(response).toEqual({
            data: {
                add_ons: [
                    {
                        id: "id",
                        name: "name",
                    },
                ],
                billing_credit_balances: {
                    key: 1.1,
                },
                billing_subscription: {
                    cancel_at: 1,
                    cancel_at_period_end: true,
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    customer_external_id: "customer_external_id",
                    default_payment_method_id: "default_payment_method_id",
                    discounts: [
                        {
                            coupon_id: "coupon_id",
                            coupon_name: "coupon_name",
                            discount_external_id: "discount_external_id",
                            duration: "duration",
                            is_active: true,
                            started_at: "2024-01-15T09:30:00Z",
                            subscription_external_id: "subscription_external_id",
                        },
                    ],
                    expired_at: "2024-01-15T09:30:00Z",
                    id: "id",
                    interval: "interval",
                    latest_invoice: {
                        amount_due: 1,
                        amount_paid: 1,
                        amount_remaining: 1,
                        collection_method: "collection_method",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        id: "id",
                        subtotal: 1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    metadata: {
                        key: "value",
                    },
                    payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    period_end: 1,
                    period_start: 1,
                    products: [
                        {
                            billing_scheme: "billing_scheme",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            interval: "interval",
                            name: "name",
                            package_size: 1,
                            price: 1,
                            price_external_id: "price_external_id",
                            price_id: "price_id",
                            price_tier: [{}],
                            quantity: 1.1,
                            subscription_id: "subscription_id",
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_type: "usage_type",
                        },
                    ],
                    status: "status",
                    subscription_external_id: "subscription_external_id",
                    total_price: 1,
                    trial_end: 1,
                    trial_end_setting: "trial_end_setting",
                },
                billing_subscriptions: [
                    {
                        cancel_at_period_end: true,
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        discounts: [
                            {
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                is_active: true,
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        id: "id",
                        interval: "interval",
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                default_payment_method: {
                    account_last4: "account_last4",
                    account_name: "account_name",
                    bank_name: "bank_name",
                    billing_email: "billing_email",
                    billing_name: "billing_name",
                    card_brand: "card_brand",
                    card_exp_month: 1,
                    card_exp_year: 1,
                    card_last4: "card_last4",
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    customer_external_id: "customer_external_id",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    id: "id",
                    payment_method_type: "payment_method_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                entity_traits: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        environment_id: "environment_id",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                environment_id: "environment_id",
                id: "id",
                keys: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        entity_id: "entity_id",
                        entity_type: "entity_type",
                        environment_id: "environment_id",
                        id: "id",
                        key: "key",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                last_seen_at: "2024-01-15T09:30:00Z",
                logo_url: "logo_url",
                metrics: [
                    {
                        account_id: "account_id",
                        captured_at_max: "2024-01-15T09:30:00Z",
                        captured_at_min: "2024-01-15T09:30:00Z",
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        event_subtype: "event_subtype",
                        month_reset: "month_reset",
                        period: "period",
                        value: 1,
                    },
                ],
                name: "name",
                payment_methods: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                plan: {
                    added_on: "2024-01-15T09:30:00Z",
                    billing_product_external_id: "billing_product_external_id",
                    billing_product_id: "billing_product_id",
                    description: "description",
                    id: "id",
                    image_url: "image_url",
                    name: "name",
                    plan_period: "plan_period",
                    plan_price: 1,
                },
                plans: [
                    {
                        id: "id",
                        name: "name",
                    },
                ],
                traits: {
                    key: "value",
                },
                updated_at: "2024-01-15T09:30:00Z",
                user_count: 1,
            },
            params: {
                key: "value",
            },
        });
    });

    test("deleteCompanyByKeys", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { keys: { key: "value" } };
        const rawResponseBody = {
            data: {
                created_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                id: "id",
                last_seen_at: "2024-01-15T09:30:00Z",
                logo_url: "logo_url",
                name: "name",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/companies/delete")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.companies.deleteCompanyByKeys({
            keys: {
                key: "value",
            },
        });
        expect(response).toEqual({
            data: {
                created_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                id: "id",
                last_seen_at: "2024-01-15T09:30:00Z",
                logo_url: "logo_url",
                name: "name",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("listCompaniesForAdvancedFilter", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    add_ons: [{ id: "id", name: "name" }],
                    billing_credit_balances: { key: 1.1 },
                    billing_subscription: {
                        cancel_at_period_end: true,
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        discounts: [
                            {
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                is_active: true,
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        id: "id",
                        interval: "interval",
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                    },
                    billing_subscriptions: [
                        {
                            cancel_at_period_end: true,
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            customer_external_id: "customer_external_id",
                            discounts: [
                                {
                                    coupon_id: "coupon_id",
                                    coupon_name: "coupon_name",
                                    discount_external_id: "discount_external_id",
                                    duration: "duration",
                                    is_active: true,
                                    started_at: "2024-01-15T09:30:00Z",
                                    subscription_external_id: "subscription_external_id",
                                },
                            ],
                            id: "id",
                            interval: "interval",
                            period_end: 1,
                            period_start: 1,
                            products: [
                                {
                                    billing_scheme: "billing_scheme",
                                    created_at: "2024-01-15T09:30:00Z",
                                    currency: "currency",
                                    environment_id: "environment_id",
                                    external_id: "external_id",
                                    id: "id",
                                    interval: "interval",
                                    name: "name",
                                    package_size: 1,
                                    price: 1,
                                    price_external_id: "price_external_id",
                                    price_id: "price_id",
                                    price_tier: [{}],
                                    quantity: 1.1,
                                    subscription_id: "subscription_id",
                                    updated_at: "2024-01-15T09:30:00Z",
                                    usage_type: "usage_type",
                                },
                            ],
                            status: "status",
                            subscription_external_id: "subscription_external_id",
                            total_price: 1,
                        },
                    ],
                    created_at: "2024-01-15T09:30:00Z",
                    default_payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    entity_traits: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            environment_id: "environment_id",
                            id: "id",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    environment_id: "environment_id",
                    feature_usage: [
                        {
                            entitlement_source: "entitlement_source",
                            entitlement_value_type: "entitlement_value_type",
                            feature_id: "feature_id",
                            feature_name: "feature_name",
                            feature_type: "feature_type",
                            hard_limit: "hard_limit",
                            has_access: true,
                            soft_limit: "soft_limit",
                            usage: "usage",
                        },
                    ],
                    id: "id",
                    keys: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            entity_id: "entity_id",
                            entity_type: "entity_type",
                            environment_id: "environment_id",
                            id: "id",
                            key: "key",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    last_seen_at: "2024-01-15T09:30:00Z",
                    logo_url: "logo_url",
                    metrics: [
                        {
                            account_id: "account_id",
                            captured_at_max: "2024-01-15T09:30:00Z",
                            captured_at_min: "2024-01-15T09:30:00Z",
                            company_id: "company_id",
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            event_subtype: "event_subtype",
                            month_reset: "month_reset",
                            period: "period",
                            value: 1,
                        },
                    ],
                    name: "name",
                    payment_methods: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            customer_external_id: "customer_external_id",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            payment_method_type: "payment_method_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    plan: { id: "id", name: "name" },
                    plans: [{ id: "id", name: "name" }],
                    traits: { key: "value" },
                    updated_at: "2024-01-15T09:30:00Z",
                    user_count: 1,
                },
            ],
            params: {
                display_properties: ["display_properties"],
                feature_ids: ["feature_ids"],
                ids: ["ids"],
                limit: 1,
                monetized_subscriptions: true,
                offset: 1,
                plan_ids: ["plan_ids"],
                q: "q",
                sort_order_column: "sort_order_column",
                sort_order_direction: "asc",
                subscription_statuses: ["subscription_statuses"],
                subscription_types: ["subscription_types"],
                without_plan: true,
                without_subscription: true,
            },
        };
        server.mockEndpoint().get("/companies/list2").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.companies.listCompaniesForAdvancedFilter();
        expect(response).toEqual({
            data: [
                {
                    add_ons: [
                        {
                            id: "id",
                            name: "name",
                        },
                    ],
                    billing_credit_balances: {
                        key: 1.1,
                    },
                    billing_subscription: {
                        cancel_at_period_end: true,
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        discounts: [
                            {
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                is_active: true,
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        id: "id",
                        interval: "interval",
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                    },
                    billing_subscriptions: [
                        {
                            cancel_at_period_end: true,
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            customer_external_id: "customer_external_id",
                            discounts: [
                                {
                                    coupon_id: "coupon_id",
                                    coupon_name: "coupon_name",
                                    discount_external_id: "discount_external_id",
                                    duration: "duration",
                                    is_active: true,
                                    started_at: "2024-01-15T09:30:00Z",
                                    subscription_external_id: "subscription_external_id",
                                },
                            ],
                            id: "id",
                            interval: "interval",
                            period_end: 1,
                            period_start: 1,
                            products: [
                                {
                                    billing_scheme: "billing_scheme",
                                    created_at: "2024-01-15T09:30:00Z",
                                    currency: "currency",
                                    environment_id: "environment_id",
                                    external_id: "external_id",
                                    id: "id",
                                    interval: "interval",
                                    name: "name",
                                    package_size: 1,
                                    price: 1,
                                    price_external_id: "price_external_id",
                                    price_id: "price_id",
                                    price_tier: [{}],
                                    quantity: 1.1,
                                    subscription_id: "subscription_id",
                                    updated_at: "2024-01-15T09:30:00Z",
                                    usage_type: "usage_type",
                                },
                            ],
                            status: "status",
                            subscription_external_id: "subscription_external_id",
                            total_price: 1,
                        },
                    ],
                    created_at: "2024-01-15T09:30:00Z",
                    default_payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    entity_traits: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            environment_id: "environment_id",
                            id: "id",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    environment_id: "environment_id",
                    feature_usage: [
                        {
                            entitlement_source: "entitlement_source",
                            entitlement_value_type: "entitlement_value_type",
                            feature_id: "feature_id",
                            feature_name: "feature_name",
                            feature_type: "feature_type",
                            hard_limit: "hard_limit",
                            has_access: true,
                            soft_limit: "soft_limit",
                            usage: "usage",
                        },
                    ],
                    id: "id",
                    keys: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            entity_id: "entity_id",
                            entity_type: "entity_type",
                            environment_id: "environment_id",
                            id: "id",
                            key: "key",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    last_seen_at: "2024-01-15T09:30:00Z",
                    logo_url: "logo_url",
                    metrics: [
                        {
                            account_id: "account_id",
                            captured_at_max: "2024-01-15T09:30:00Z",
                            captured_at_min: "2024-01-15T09:30:00Z",
                            company_id: "company_id",
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            event_subtype: "event_subtype",
                            month_reset: "month_reset",
                            period: "period",
                            value: 1,
                        },
                    ],
                    name: "name",
                    payment_methods: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            customer_external_id: "customer_external_id",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            payment_method_type: "payment_method_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    plan: {
                        id: "id",
                        name: "name",
                    },
                    plans: [
                        {
                            id: "id",
                            name: "name",
                        },
                    ],
                    traits: {
                        key: "value",
                    },
                    updated_at: "2024-01-15T09:30:00Z",
                    user_count: 1,
                },
            ],
            params: {
                display_properties: ["display_properties"],
                feature_ids: ["feature_ids"],
                ids: ["ids"],
                limit: 1,
                monetized_subscriptions: true,
                offset: 1,
                plan_ids: ["plan_ids"],
                q: "q",
                sort_order_column: "sort_order_column",
                sort_order_direction: "asc",
                subscription_statuses: ["subscription_statuses"],
                subscription_types: ["subscription_types"],
                without_plan: true,
                without_subscription: true,
            },
        });
    });

    test("lookupCompany", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                add_ons: [
                    {
                        added_on: "2024-01-15T09:30:00Z",
                        billing_product_external_id: "billing_product_external_id",
                        billing_product_id: "billing_product_id",
                        description: "description",
                        id: "id",
                        image_url: "image_url",
                        name: "name",
                        plan_period: "plan_period",
                        plan_price: 1,
                    },
                    {
                        added_on: "2024-01-15T09:30:00Z",
                        billing_product_external_id: "billing_product_external_id",
                        billing_product_id: "billing_product_id",
                        description: "description",
                        id: "id",
                        image_url: "image_url",
                        name: "name",
                        plan_period: "plan_period",
                        plan_price: 1,
                    },
                ],
                billing_credit_balances: { billing_credit_balances: 1.1 },
                billing_subscription: {
                    cancel_at: 1,
                    cancel_at_period_end: true,
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    customer_external_id: "customer_external_id",
                    default_payment_method_id: "default_payment_method_id",
                    discounts: [
                        {
                            amount_off: 1,
                            coupon_id: "coupon_id",
                            coupon_name: "coupon_name",
                            currency: "currency",
                            customer_facing_code: "customer_facing_code",
                            discount_external_id: "discount_external_id",
                            duration: "duration",
                            duration_in_months: 1,
                            ended_at: "2024-01-15T09:30:00Z",
                            is_active: true,
                            percent_off: 1.1,
                            promo_code_external_id: "promo_code_external_id",
                            started_at: "2024-01-15T09:30:00Z",
                            subscription_external_id: "subscription_external_id",
                        },
                        {
                            amount_off: 1,
                            coupon_id: "coupon_id",
                            coupon_name: "coupon_name",
                            currency: "currency",
                            customer_facing_code: "customer_facing_code",
                            discount_external_id: "discount_external_id",
                            duration: "duration",
                            duration_in_months: 1,
                            ended_at: "2024-01-15T09:30:00Z",
                            is_active: true,
                            percent_off: 1.1,
                            promo_code_external_id: "promo_code_external_id",
                            started_at: "2024-01-15T09:30:00Z",
                            subscription_external_id: "subscription_external_id",
                        },
                    ],
                    expired_at: "2024-01-15T09:30:00Z",
                    id: "id",
                    interval: "interval",
                    latest_invoice: {
                        amount_due: 1,
                        amount_paid: 1,
                        amount_remaining: 1,
                        collection_method: "collection_method",
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        due_date: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_external_id: "payment_method_external_id",
                        subscription_external_id: "subscription_external_id",
                        subtotal: 1,
                        updated_at: "2024-01-15T09:30:00Z",
                        url: "url",
                    },
                    metadata: { metadata: { key: "value" } },
                    payment_method: {
                        account_last4: "account_last4",
                        account_name: "account_name",
                        bank_name: "bank_name",
                        billing_email: "billing_email",
                        billing_name: "billing_name",
                        card_brand: "card_brand",
                        card_exp_month: 1,
                        card_exp_year: 1,
                        card_last4: "card_last4",
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    period_end: 1,
                    period_start: 1,
                    products: [
                        {
                            billing_scheme: "billing_scheme",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            interval: "interval",
                            meter_id: "meter_id",
                            name: "name",
                            package_size: 1,
                            price: 1,
                            price_decimal: "price_decimal",
                            price_external_id: "price_external_id",
                            price_id: "price_id",
                            price_tier: [
                                {
                                    flat_amount: 1,
                                    per_unit_price: 1,
                                    per_unit_price_decimal: "per_unit_price_decimal",
                                    up_to: 1,
                                },
                                {
                                    flat_amount: 1,
                                    per_unit_price: 1,
                                    per_unit_price_decimal: "per_unit_price_decimal",
                                    up_to: 1,
                                },
                            ],
                            quantity: 1.1,
                            subscription_id: "subscription_id",
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_type: "usage_type",
                        },
                        {
                            billing_scheme: "billing_scheme",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            interval: "interval",
                            meter_id: "meter_id",
                            name: "name",
                            package_size: 1,
                            price: 1,
                            price_decimal: "price_decimal",
                            price_external_id: "price_external_id",
                            price_id: "price_id",
                            price_tier: [
                                {
                                    flat_amount: 1,
                                    per_unit_price: 1,
                                    per_unit_price_decimal: "per_unit_price_decimal",
                                    up_to: 1,
                                },
                                {
                                    flat_amount: 1,
                                    per_unit_price: 1,
                                    per_unit_price_decimal: "per_unit_price_decimal",
                                    up_to: 1,
                                },
                            ],
                            quantity: 1.1,
                            subscription_id: "subscription_id",
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_type: "usage_type",
                        },
                    ],
                    status: "status",
                    subscription_external_id: "subscription_external_id",
                    total_price: 1,
                    trial_end: 1,
                    trial_end_setting: "trial_end_setting",
                },
                billing_subscriptions: [
                    {
                        cancel_at: 1,
                        cancel_at_period_end: true,
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        default_payment_method_id: "default_payment_method_id",
                        discounts: [
                            {
                                amount_off: 1,
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                currency: "currency",
                                customer_facing_code: "customer_facing_code",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                duration_in_months: 1,
                                ended_at: "2024-01-15T09:30:00Z",
                                is_active: true,
                                percent_off: 1.1,
                                promo_code_external_id: "promo_code_external_id",
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                            {
                                amount_off: 1,
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                currency: "currency",
                                customer_facing_code: "customer_facing_code",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                duration_in_months: 1,
                                ended_at: "2024-01-15T09:30:00Z",
                                is_active: true,
                                percent_off: 1.1,
                                promo_code_external_id: "promo_code_external_id",
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        expired_at: "2024-01-15T09:30:00Z",
                        id: "id",
                        interval: "interval",
                        latest_invoice: {
                            amount_due: 1,
                            amount_paid: 1,
                            amount_remaining: 1,
                            collection_method: "collection_method",
                            company_id: "company_id",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            customer_external_id: "customer_external_id",
                            due_date: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            payment_method_external_id: "payment_method_external_id",
                            subscription_external_id: "subscription_external_id",
                            subtotal: 1,
                            updated_at: "2024-01-15T09:30:00Z",
                            url: "url",
                        },
                        metadata: { metadata: { key: "value" } },
                        payment_method: {
                            account_last4: "account_last4",
                            account_name: "account_name",
                            bank_name: "bank_name",
                            billing_email: "billing_email",
                            billing_name: "billing_name",
                            card_brand: "card_brand",
                            card_exp_month: 1,
                            card_exp_year: 1,
                            card_last4: "card_last4",
                            company_id: "company_id",
                            created_at: "2024-01-15T09:30:00Z",
                            customer_external_id: "customer_external_id",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            payment_method_type: "payment_method_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                meter_id: "meter_id",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_decimal: "price_decimal",
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [
                                    {
                                        flat_amount: 1,
                                        per_unit_price: 1,
                                        per_unit_price_decimal: "per_unit_price_decimal",
                                        up_to: 1,
                                    },
                                    {
                                        flat_amount: 1,
                                        per_unit_price: 1,
                                        per_unit_price_decimal: "per_unit_price_decimal",
                                        up_to: 1,
                                    },
                                ],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                meter_id: "meter_id",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_decimal: "price_decimal",
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [
                                    {
                                        flat_amount: 1,
                                        per_unit_price: 1,
                                        per_unit_price_decimal: "per_unit_price_decimal",
                                        up_to: 1,
                                    },
                                    {
                                        flat_amount: 1,
                                        per_unit_price: 1,
                                        per_unit_price_decimal: "per_unit_price_decimal",
                                        up_to: 1,
                                    },
                                ],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                        trial_end: 1,
                        trial_end_setting: "trial_end_setting",
                    },
                    {
                        cancel_at: 1,
                        cancel_at_period_end: true,
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        default_payment_method_id: "default_payment_method_id",
                        discounts: [
                            {
                                amount_off: 1,
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                currency: "currency",
                                customer_facing_code: "customer_facing_code",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                duration_in_months: 1,
                                ended_at: "2024-01-15T09:30:00Z",
                                is_active: true,
                                percent_off: 1.1,
                                promo_code_external_id: "promo_code_external_id",
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                            {
                                amount_off: 1,
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                currency: "currency",
                                customer_facing_code: "customer_facing_code",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                duration_in_months: 1,
                                ended_at: "2024-01-15T09:30:00Z",
                                is_active: true,
                                percent_off: 1.1,
                                promo_code_external_id: "promo_code_external_id",
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        expired_at: "2024-01-15T09:30:00Z",
                        id: "id",
                        interval: "interval",
                        latest_invoice: {
                            amount_due: 1,
                            amount_paid: 1,
                            amount_remaining: 1,
                            collection_method: "collection_method",
                            company_id: "company_id",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            customer_external_id: "customer_external_id",
                            due_date: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            payment_method_external_id: "payment_method_external_id",
                            subscription_external_id: "subscription_external_id",
                            subtotal: 1,
                            updated_at: "2024-01-15T09:30:00Z",
                            url: "url",
                        },
                        metadata: { metadata: { key: "value" } },
                        payment_method: {
                            account_last4: "account_last4",
                            account_name: "account_name",
                            bank_name: "bank_name",
                            billing_email: "billing_email",
                            billing_name: "billing_name",
                            card_brand: "card_brand",
                            card_exp_month: 1,
                            card_exp_year: 1,
                            card_last4: "card_last4",
                            company_id: "company_id",
                            created_at: "2024-01-15T09:30:00Z",
                            customer_external_id: "customer_external_id",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            payment_method_type: "payment_method_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                meter_id: "meter_id",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_decimal: "price_decimal",
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [
                                    {
                                        flat_amount: 1,
                                        per_unit_price: 1,
                                        per_unit_price_decimal: "per_unit_price_decimal",
                                        up_to: 1,
                                    },
                                    {
                                        flat_amount: 1,
                                        per_unit_price: 1,
                                        per_unit_price_decimal: "per_unit_price_decimal",
                                        up_to: 1,
                                    },
                                ],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                meter_id: "meter_id",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_decimal: "price_decimal",
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [
                                    {
                                        flat_amount: 1,
                                        per_unit_price: 1,
                                        per_unit_price_decimal: "per_unit_price_decimal",
                                        up_to: 1,
                                    },
                                    {
                                        flat_amount: 1,
                                        per_unit_price: 1,
                                        per_unit_price_decimal: "per_unit_price_decimal",
                                        up_to: 1,
                                    },
                                ],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                        trial_end: 1,
                        trial_end_setting: "trial_end_setting",
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                default_payment_method: {
                    account_last4: "account_last4",
                    account_name: "account_name",
                    bank_name: "bank_name",
                    billing_email: "billing_email",
                    billing_name: "billing_name",
                    card_brand: "card_brand",
                    card_exp_month: 1,
                    card_exp_year: 1,
                    card_last4: "card_last4",
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    customer_external_id: "customer_external_id",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    id: "id",
                    payment_method_type: "payment_method_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                entity_traits: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition: {
                            created_at: "2024-01-15T09:30:00Z",
                            display_name: "display_name",
                            entity_type: "entity_type",
                            hierarchy: ["hierarchy", "hierarchy"],
                            id: "id",
                            trait_type: "trait_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        definition_id: "definition_id",
                        environment_id: "environment_id",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition: {
                            created_at: "2024-01-15T09:30:00Z",
                            display_name: "display_name",
                            entity_type: "entity_type",
                            hierarchy: ["hierarchy", "hierarchy"],
                            id: "id",
                            trait_type: "trait_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        definition_id: "definition_id",
                        environment_id: "environment_id",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                environment_id: "environment_id",
                id: "id",
                keys: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition: {
                            created_at: "2024-01-15T09:30:00Z",
                            entity_type: "entity_type",
                            id: "id",
                            key: "key",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        definition_id: "definition_id",
                        entity_id: "entity_id",
                        entity_type: "entity_type",
                        environment_id: "environment_id",
                        id: "id",
                        key: "key",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition: {
                            created_at: "2024-01-15T09:30:00Z",
                            entity_type: "entity_type",
                            id: "id",
                            key: "key",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        definition_id: "definition_id",
                        entity_id: "entity_id",
                        entity_type: "entity_type",
                        environment_id: "environment_id",
                        id: "id",
                        key: "key",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                last_seen_at: "2024-01-15T09:30:00Z",
                logo_url: "logo_url",
                metrics: [
                    {
                        account_id: "account_id",
                        captured_at_max: "2024-01-15T09:30:00Z",
                        captured_at_min: "2024-01-15T09:30:00Z",
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        event_subtype: "event_subtype",
                        month_reset: "month_reset",
                        period: "period",
                        valid_until: "2024-01-15T09:30:00Z",
                        value: 1,
                    },
                    {
                        account_id: "account_id",
                        captured_at_max: "2024-01-15T09:30:00Z",
                        captured_at_min: "2024-01-15T09:30:00Z",
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        event_subtype: "event_subtype",
                        month_reset: "month_reset",
                        period: "period",
                        valid_until: "2024-01-15T09:30:00Z",
                        value: 1,
                    },
                ],
                name: "name",
                payment_methods: [
                    {
                        account_last4: "account_last4",
                        account_name: "account_name",
                        bank_name: "bank_name",
                        billing_email: "billing_email",
                        billing_name: "billing_name",
                        card_brand: "card_brand",
                        card_exp_month: 1,
                        card_exp_year: 1,
                        card_last4: "card_last4",
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    {
                        account_last4: "account_last4",
                        account_name: "account_name",
                        bank_name: "bank_name",
                        billing_email: "billing_email",
                        billing_name: "billing_name",
                        card_brand: "card_brand",
                        card_exp_month: 1,
                        card_exp_year: 1,
                        card_last4: "card_last4",
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                plan: {
                    added_on: "2024-01-15T09:30:00Z",
                    billing_product_external_id: "billing_product_external_id",
                    billing_product_id: "billing_product_id",
                    description: "description",
                    id: "id",
                    image_url: "image_url",
                    name: "name",
                    plan_period: "plan_period",
                    plan_price: 1,
                },
                plans: [
                    { description: "description", id: "id", image_url: "image_url", name: "name" },
                    { description: "description", id: "id", image_url: "image_url", name: "name" },
                ],
                traits: { traits: { key: "value" } },
                updated_at: "2024-01-15T09:30:00Z",
                user_count: 1,
            },
            params: { keys: { keys: "keys" } },
        };
        server.mockEndpoint().get("/companies/lookup").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.companies.lookupCompany({
            keys: {
                keys: "keys",
            },
        });
        expect(response).toEqual({
            data: {
                add_ons: [
                    {
                        added_on: "2024-01-15T09:30:00Z",
                        billing_product_external_id: "billing_product_external_id",
                        billing_product_id: "billing_product_id",
                        description: "description",
                        id: "id",
                        image_url: "image_url",
                        name: "name",
                        plan_period: "plan_period",
                        plan_price: 1,
                    },
                    {
                        added_on: "2024-01-15T09:30:00Z",
                        billing_product_external_id: "billing_product_external_id",
                        billing_product_id: "billing_product_id",
                        description: "description",
                        id: "id",
                        image_url: "image_url",
                        name: "name",
                        plan_period: "plan_period",
                        plan_price: 1,
                    },
                ],
                billing_credit_balances: {
                    billing_credit_balances: 1.1,
                },
                billing_subscription: {
                    cancel_at: 1,
                    cancel_at_period_end: true,
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    customer_external_id: "customer_external_id",
                    default_payment_method_id: "default_payment_method_id",
                    discounts: [
                        {
                            amount_off: 1,
                            coupon_id: "coupon_id",
                            coupon_name: "coupon_name",
                            currency: "currency",
                            customer_facing_code: "customer_facing_code",
                            discount_external_id: "discount_external_id",
                            duration: "duration",
                            duration_in_months: 1,
                            ended_at: "2024-01-15T09:30:00Z",
                            is_active: true,
                            percent_off: 1.1,
                            promo_code_external_id: "promo_code_external_id",
                            started_at: "2024-01-15T09:30:00Z",
                            subscription_external_id: "subscription_external_id",
                        },
                        {
                            amount_off: 1,
                            coupon_id: "coupon_id",
                            coupon_name: "coupon_name",
                            currency: "currency",
                            customer_facing_code: "customer_facing_code",
                            discount_external_id: "discount_external_id",
                            duration: "duration",
                            duration_in_months: 1,
                            ended_at: "2024-01-15T09:30:00Z",
                            is_active: true,
                            percent_off: 1.1,
                            promo_code_external_id: "promo_code_external_id",
                            started_at: "2024-01-15T09:30:00Z",
                            subscription_external_id: "subscription_external_id",
                        },
                    ],
                    expired_at: "2024-01-15T09:30:00Z",
                    id: "id",
                    interval: "interval",
                    latest_invoice: {
                        amount_due: 1,
                        amount_paid: 1,
                        amount_remaining: 1,
                        collection_method: "collection_method",
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        due_date: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_external_id: "payment_method_external_id",
                        subscription_external_id: "subscription_external_id",
                        subtotal: 1,
                        updated_at: "2024-01-15T09:30:00Z",
                        url: "url",
                    },
                    metadata: {
                        metadata: {
                            key: "value",
                        },
                    },
                    payment_method: {
                        account_last4: "account_last4",
                        account_name: "account_name",
                        bank_name: "bank_name",
                        billing_email: "billing_email",
                        billing_name: "billing_name",
                        card_brand: "card_brand",
                        card_exp_month: 1,
                        card_exp_year: 1,
                        card_last4: "card_last4",
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    period_end: 1,
                    period_start: 1,
                    products: [
                        {
                            billing_scheme: "billing_scheme",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            interval: "interval",
                            meter_id: "meter_id",
                            name: "name",
                            package_size: 1,
                            price: 1,
                            price_decimal: "price_decimal",
                            price_external_id: "price_external_id",
                            price_id: "price_id",
                            price_tier: [
                                {
                                    flat_amount: 1,
                                    per_unit_price: 1,
                                    per_unit_price_decimal: "per_unit_price_decimal",
                                    up_to: 1,
                                },
                                {
                                    flat_amount: 1,
                                    per_unit_price: 1,
                                    per_unit_price_decimal: "per_unit_price_decimal",
                                    up_to: 1,
                                },
                            ],
                            quantity: 1.1,
                            subscription_id: "subscription_id",
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_type: "usage_type",
                        },
                        {
                            billing_scheme: "billing_scheme",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            interval: "interval",
                            meter_id: "meter_id",
                            name: "name",
                            package_size: 1,
                            price: 1,
                            price_decimal: "price_decimal",
                            price_external_id: "price_external_id",
                            price_id: "price_id",
                            price_tier: [
                                {
                                    flat_amount: 1,
                                    per_unit_price: 1,
                                    per_unit_price_decimal: "per_unit_price_decimal",
                                    up_to: 1,
                                },
                                {
                                    flat_amount: 1,
                                    per_unit_price: 1,
                                    per_unit_price_decimal: "per_unit_price_decimal",
                                    up_to: 1,
                                },
                            ],
                            quantity: 1.1,
                            subscription_id: "subscription_id",
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_type: "usage_type",
                        },
                    ],
                    status: "status",
                    subscription_external_id: "subscription_external_id",
                    total_price: 1,
                    trial_end: 1,
                    trial_end_setting: "trial_end_setting",
                },
                billing_subscriptions: [
                    {
                        cancel_at: 1,
                        cancel_at_period_end: true,
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        default_payment_method_id: "default_payment_method_id",
                        discounts: [
                            {
                                amount_off: 1,
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                currency: "currency",
                                customer_facing_code: "customer_facing_code",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                duration_in_months: 1,
                                ended_at: "2024-01-15T09:30:00Z",
                                is_active: true,
                                percent_off: 1.1,
                                promo_code_external_id: "promo_code_external_id",
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                            {
                                amount_off: 1,
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                currency: "currency",
                                customer_facing_code: "customer_facing_code",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                duration_in_months: 1,
                                ended_at: "2024-01-15T09:30:00Z",
                                is_active: true,
                                percent_off: 1.1,
                                promo_code_external_id: "promo_code_external_id",
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        expired_at: "2024-01-15T09:30:00Z",
                        id: "id",
                        interval: "interval",
                        latest_invoice: {
                            amount_due: 1,
                            amount_paid: 1,
                            amount_remaining: 1,
                            collection_method: "collection_method",
                            company_id: "company_id",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            customer_external_id: "customer_external_id",
                            due_date: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            payment_method_external_id: "payment_method_external_id",
                            subscription_external_id: "subscription_external_id",
                            subtotal: 1,
                            updated_at: "2024-01-15T09:30:00Z",
                            url: "url",
                        },
                        metadata: {
                            metadata: {
                                key: "value",
                            },
                        },
                        payment_method: {
                            account_last4: "account_last4",
                            account_name: "account_name",
                            bank_name: "bank_name",
                            billing_email: "billing_email",
                            billing_name: "billing_name",
                            card_brand: "card_brand",
                            card_exp_month: 1,
                            card_exp_year: 1,
                            card_last4: "card_last4",
                            company_id: "company_id",
                            created_at: "2024-01-15T09:30:00Z",
                            customer_external_id: "customer_external_id",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            payment_method_type: "payment_method_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                meter_id: "meter_id",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_decimal: "price_decimal",
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [
                                    {
                                        flat_amount: 1,
                                        per_unit_price: 1,
                                        per_unit_price_decimal: "per_unit_price_decimal",
                                        up_to: 1,
                                    },
                                    {
                                        flat_amount: 1,
                                        per_unit_price: 1,
                                        per_unit_price_decimal: "per_unit_price_decimal",
                                        up_to: 1,
                                    },
                                ],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                meter_id: "meter_id",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_decimal: "price_decimal",
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [
                                    {
                                        flat_amount: 1,
                                        per_unit_price: 1,
                                        per_unit_price_decimal: "per_unit_price_decimal",
                                        up_to: 1,
                                    },
                                    {
                                        flat_amount: 1,
                                        per_unit_price: 1,
                                        per_unit_price_decimal: "per_unit_price_decimal",
                                        up_to: 1,
                                    },
                                ],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                        trial_end: 1,
                        trial_end_setting: "trial_end_setting",
                    },
                    {
                        cancel_at: 1,
                        cancel_at_period_end: true,
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        default_payment_method_id: "default_payment_method_id",
                        discounts: [
                            {
                                amount_off: 1,
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                currency: "currency",
                                customer_facing_code: "customer_facing_code",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                duration_in_months: 1,
                                ended_at: "2024-01-15T09:30:00Z",
                                is_active: true,
                                percent_off: 1.1,
                                promo_code_external_id: "promo_code_external_id",
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                            {
                                amount_off: 1,
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                currency: "currency",
                                customer_facing_code: "customer_facing_code",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                duration_in_months: 1,
                                ended_at: "2024-01-15T09:30:00Z",
                                is_active: true,
                                percent_off: 1.1,
                                promo_code_external_id: "promo_code_external_id",
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        expired_at: "2024-01-15T09:30:00Z",
                        id: "id",
                        interval: "interval",
                        latest_invoice: {
                            amount_due: 1,
                            amount_paid: 1,
                            amount_remaining: 1,
                            collection_method: "collection_method",
                            company_id: "company_id",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            customer_external_id: "customer_external_id",
                            due_date: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            payment_method_external_id: "payment_method_external_id",
                            subscription_external_id: "subscription_external_id",
                            subtotal: 1,
                            updated_at: "2024-01-15T09:30:00Z",
                            url: "url",
                        },
                        metadata: {
                            metadata: {
                                key: "value",
                            },
                        },
                        payment_method: {
                            account_last4: "account_last4",
                            account_name: "account_name",
                            bank_name: "bank_name",
                            billing_email: "billing_email",
                            billing_name: "billing_name",
                            card_brand: "card_brand",
                            card_exp_month: 1,
                            card_exp_year: 1,
                            card_last4: "card_last4",
                            company_id: "company_id",
                            created_at: "2024-01-15T09:30:00Z",
                            customer_external_id: "customer_external_id",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            payment_method_type: "payment_method_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                meter_id: "meter_id",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_decimal: "price_decimal",
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [
                                    {
                                        flat_amount: 1,
                                        per_unit_price: 1,
                                        per_unit_price_decimal: "per_unit_price_decimal",
                                        up_to: 1,
                                    },
                                    {
                                        flat_amount: 1,
                                        per_unit_price: 1,
                                        per_unit_price_decimal: "per_unit_price_decimal",
                                        up_to: 1,
                                    },
                                ],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                meter_id: "meter_id",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_decimal: "price_decimal",
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [
                                    {
                                        flat_amount: 1,
                                        per_unit_price: 1,
                                        per_unit_price_decimal: "per_unit_price_decimal",
                                        up_to: 1,
                                    },
                                    {
                                        flat_amount: 1,
                                        per_unit_price: 1,
                                        per_unit_price_decimal: "per_unit_price_decimal",
                                        up_to: 1,
                                    },
                                ],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                        trial_end: 1,
                        trial_end_setting: "trial_end_setting",
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                default_payment_method: {
                    account_last4: "account_last4",
                    account_name: "account_name",
                    bank_name: "bank_name",
                    billing_email: "billing_email",
                    billing_name: "billing_name",
                    card_brand: "card_brand",
                    card_exp_month: 1,
                    card_exp_year: 1,
                    card_last4: "card_last4",
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    customer_external_id: "customer_external_id",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    id: "id",
                    payment_method_type: "payment_method_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                entity_traits: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition: {
                            created_at: "2024-01-15T09:30:00Z",
                            display_name: "display_name",
                            entity_type: "entity_type",
                            hierarchy: ["hierarchy", "hierarchy"],
                            id: "id",
                            trait_type: "trait_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        definition_id: "definition_id",
                        environment_id: "environment_id",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition: {
                            created_at: "2024-01-15T09:30:00Z",
                            display_name: "display_name",
                            entity_type: "entity_type",
                            hierarchy: ["hierarchy", "hierarchy"],
                            id: "id",
                            trait_type: "trait_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        definition_id: "definition_id",
                        environment_id: "environment_id",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                environment_id: "environment_id",
                id: "id",
                keys: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition: {
                            created_at: "2024-01-15T09:30:00Z",
                            entity_type: "entity_type",
                            id: "id",
                            key: "key",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        definition_id: "definition_id",
                        entity_id: "entity_id",
                        entity_type: "entity_type",
                        environment_id: "environment_id",
                        id: "id",
                        key: "key",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition: {
                            created_at: "2024-01-15T09:30:00Z",
                            entity_type: "entity_type",
                            id: "id",
                            key: "key",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        definition_id: "definition_id",
                        entity_id: "entity_id",
                        entity_type: "entity_type",
                        environment_id: "environment_id",
                        id: "id",
                        key: "key",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                last_seen_at: "2024-01-15T09:30:00Z",
                logo_url: "logo_url",
                metrics: [
                    {
                        account_id: "account_id",
                        captured_at_max: "2024-01-15T09:30:00Z",
                        captured_at_min: "2024-01-15T09:30:00Z",
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        event_subtype: "event_subtype",
                        month_reset: "month_reset",
                        period: "period",
                        valid_until: "2024-01-15T09:30:00Z",
                        value: 1,
                    },
                    {
                        account_id: "account_id",
                        captured_at_max: "2024-01-15T09:30:00Z",
                        captured_at_min: "2024-01-15T09:30:00Z",
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        event_subtype: "event_subtype",
                        month_reset: "month_reset",
                        period: "period",
                        valid_until: "2024-01-15T09:30:00Z",
                        value: 1,
                    },
                ],
                name: "name",
                payment_methods: [
                    {
                        account_last4: "account_last4",
                        account_name: "account_name",
                        bank_name: "bank_name",
                        billing_email: "billing_email",
                        billing_name: "billing_name",
                        card_brand: "card_brand",
                        card_exp_month: 1,
                        card_exp_year: 1,
                        card_last4: "card_last4",
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    {
                        account_last4: "account_last4",
                        account_name: "account_name",
                        bank_name: "bank_name",
                        billing_email: "billing_email",
                        billing_name: "billing_name",
                        card_brand: "card_brand",
                        card_exp_month: 1,
                        card_exp_year: 1,
                        card_last4: "card_last4",
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                plan: {
                    added_on: "2024-01-15T09:30:00Z",
                    billing_product_external_id: "billing_product_external_id",
                    billing_product_id: "billing_product_id",
                    description: "description",
                    id: "id",
                    image_url: "image_url",
                    name: "name",
                    plan_period: "plan_period",
                    plan_price: 1,
                },
                plans: [
                    {
                        description: "description",
                        id: "id",
                        image_url: "image_url",
                        name: "name",
                    },
                    {
                        description: "description",
                        id: "id",
                        image_url: "image_url",
                        name: "name",
                    },
                ],
                traits: {
                    traits: {
                        key: "value",
                    },
                },
                updated_at: "2024-01-15T09:30:00Z",
                user_count: 1,
            },
            params: {
                keys: {
                    keys: "keys",
                },
            },
        });
    });

    test("getActiveDeals", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    deal_arr: "deal_arr",
                    deal_external_id: "deal_external_id",
                    deal_mrr: "deal_mrr",
                    deal_name: "deal_name",
                    line_items: [
                        {
                            billing_frequency: "billing_frequency",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            description: "description",
                            id: "id",
                            name: "name",
                            price: 1.1,
                            quantity: 1,
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                },
            ],
            params: { company_id: "company_id", deal_stage: "deal_stage", limit: 1, offset: 1 },
        };
        server.mockEndpoint().get("/company-crm-deals").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.companies.getActiveDeals({
            company_id: "company_id",
            deal_stage: "deal_stage",
        });
        expect(response).toEqual({
            data: [
                {
                    deal_arr: "deal_arr",
                    deal_external_id: "deal_external_id",
                    deal_mrr: "deal_mrr",
                    deal_name: "deal_name",
                    line_items: [
                        {
                            billing_frequency: "billing_frequency",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            description: "description",
                            id: "id",
                            name: "name",
                            price: 1.1,
                            quantity: 1,
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                },
            ],
            params: {
                company_id: "company_id",
                deal_stage: "deal_stage",
                limit: 1,
                offset: 1,
            },
        });
    });

    test("listCompanyMemberships", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    company: {
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        id: "id",
                        name: "name",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    id: "id",
                    updated_at: "2024-01-15T09:30:00Z",
                    user_id: "user_id",
                },
            ],
            params: { company_id: "company_id", limit: 1, offset: 1, user_id: "user_id" },
        };
        server
            .mockEndpoint()
            .get("/company-memberships")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.companies.listCompanyMemberships();
        expect(response).toEqual({
            data: [
                {
                    company: {
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        id: "id",
                        name: "name",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    id: "id",
                    updated_at: "2024-01-15T09:30:00Z",
                    user_id: "user_id",
                },
            ],
            params: {
                company_id: "company_id",
                limit: 1,
                offset: 1,
                user_id: "user_id",
            },
        });
    });

    test("getOrCreateCompanyMembership", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { company_id: "company_id", user_id: "user_id" };
        const rawResponseBody = {
            data: {
                company: {
                    created_at: "2024-01-15T09:30:00Z",
                    environment_id: "environment_id",
                    id: "id",
                    last_seen_at: "2024-01-15T09:30:00Z",
                    logo_url: "logo_url",
                    name: "name",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                company_id: "company_id",
                created_at: "2024-01-15T09:30:00Z",
                id: "id",
                updated_at: "2024-01-15T09:30:00Z",
                user_id: "user_id",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/company-memberships")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.companies.getOrCreateCompanyMembership({
            company_id: "company_id",
            user_id: "user_id",
        });
        expect(response).toEqual({
            data: {
                company: {
                    created_at: "2024-01-15T09:30:00Z",
                    environment_id: "environment_id",
                    id: "id",
                    last_seen_at: "2024-01-15T09:30:00Z",
                    logo_url: "logo_url",
                    name: "name",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                company_id: "company_id",
                created_at: "2024-01-15T09:30:00Z",
                id: "id",
                updated_at: "2024-01-15T09:30:00Z",
                user_id: "user_id",
            },
            params: {
                key: "value",
            },
        });
    });

    test("deleteCompanyMembership", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { data: { deleted: true }, params: { key: "value" } };
        server
            .mockEndpoint()
            .delete("/company-memberships/company_membership_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.companies.deleteCompanyMembership("company_membership_id");
        expect(response).toEqual({
            data: {
                deleted: true,
            },
            params: {
                key: "value",
            },
        });
    });

    test("getActiveCompanySubscription", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    cancel_at: "2024-01-15T09:30:00Z",
                    cancel_at_period_end: true,
                    currency: "currency",
                    customer_external_id: "customer_external_id",
                    discounts: [
                        {
                            coupon_id: "coupon_id",
                            coupon_name: "coupon_name",
                            discount_external_id: "discount_external_id",
                            duration: "duration",
                            is_active: true,
                            started_at: "2024-01-15T09:30:00Z",
                            subscription_external_id: "subscription_external_id",
                        },
                    ],
                    expired_at: "2024-01-15T09:30:00Z",
                    interval: "interval",
                    latest_invoice: {
                        amount_due: 1,
                        amount_paid: 1,
                        amount_remaining: 1,
                        collection_method: "collection_method",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        id: "id",
                        subtotal: 1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    products: [
                        {
                            billing_scheme: "billing_scheme",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            interval: "interval",
                            name: "name",
                            package_size: 1,
                            price: 1,
                            price_external_id: "price_external_id",
                            price_id: "price_id",
                            price_tier: [{}],
                            quantity: 1.1,
                            subscription_id: "subscription_id",
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_type: "usage_type",
                        },
                    ],
                    status: "status",
                    subscription_external_id: "subscription_external_id",
                    total_price: 1,
                    trial_end: "2024-01-15T09:30:00Z",
                },
            ],
            params: { company_id: "company_id", company_ids: ["company_ids"], limit: 1, offset: 1 },
        };
        server
            .mockEndpoint()
            .get("/company-subscriptions")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.companies.getActiveCompanySubscription();
        expect(response).toEqual({
            data: [
                {
                    cancel_at: "2024-01-15T09:30:00Z",
                    cancel_at_period_end: true,
                    currency: "currency",
                    customer_external_id: "customer_external_id",
                    discounts: [
                        {
                            coupon_id: "coupon_id",
                            coupon_name: "coupon_name",
                            discount_external_id: "discount_external_id",
                            duration: "duration",
                            is_active: true,
                            started_at: "2024-01-15T09:30:00Z",
                            subscription_external_id: "subscription_external_id",
                        },
                    ],
                    expired_at: "2024-01-15T09:30:00Z",
                    interval: "interval",
                    latest_invoice: {
                        amount_due: 1,
                        amount_paid: 1,
                        amount_remaining: 1,
                        collection_method: "collection_method",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        id: "id",
                        subtotal: 1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    products: [
                        {
                            billing_scheme: "billing_scheme",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            interval: "interval",
                            name: "name",
                            package_size: 1,
                            price: 1,
                            price_external_id: "price_external_id",
                            price_id: "price_id",
                            price_tier: [{}],
                            quantity: 1.1,
                            subscription_id: "subscription_id",
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_type: "usage_type",
                        },
                    ],
                    status: "status",
                    subscription_external_id: "subscription_external_id",
                    total_price: 1,
                    trial_end: "2024-01-15T09:30:00Z",
                },
            ],
            params: {
                company_id: "company_id",
                company_ids: ["company_ids"],
                limit: 1,
                offset: 1,
            },
        });
    });

    test("upsertCompanyTrait", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { keys: { key: "value" }, trait: "trait" };
        const rawResponseBody = {
            data: {
                add_ons: [{ id: "id", name: "name" }],
                billing_credit_balances: { key: 1.1 },
                billing_subscription: {
                    cancel_at: 1,
                    cancel_at_period_end: true,
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    customer_external_id: "customer_external_id",
                    default_payment_method_id: "default_payment_method_id",
                    discounts: [
                        {
                            coupon_id: "coupon_id",
                            coupon_name: "coupon_name",
                            discount_external_id: "discount_external_id",
                            duration: "duration",
                            is_active: true,
                            started_at: "2024-01-15T09:30:00Z",
                            subscription_external_id: "subscription_external_id",
                        },
                    ],
                    expired_at: "2024-01-15T09:30:00Z",
                    id: "id",
                    interval: "interval",
                    latest_invoice: {
                        amount_due: 1,
                        amount_paid: 1,
                        amount_remaining: 1,
                        collection_method: "collection_method",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        id: "id",
                        subtotal: 1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    metadata: { key: "value" },
                    payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    period_end: 1,
                    period_start: 1,
                    products: [
                        {
                            billing_scheme: "billing_scheme",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            interval: "interval",
                            name: "name",
                            package_size: 1,
                            price: 1,
                            price_external_id: "price_external_id",
                            price_id: "price_id",
                            price_tier: [{}],
                            quantity: 1.1,
                            subscription_id: "subscription_id",
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_type: "usage_type",
                        },
                    ],
                    status: "status",
                    subscription_external_id: "subscription_external_id",
                    total_price: 1,
                    trial_end: 1,
                    trial_end_setting: "trial_end_setting",
                },
                billing_subscriptions: [
                    {
                        cancel_at_period_end: true,
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        discounts: [
                            {
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                is_active: true,
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        id: "id",
                        interval: "interval",
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                default_payment_method: {
                    account_last4: "account_last4",
                    account_name: "account_name",
                    bank_name: "bank_name",
                    billing_email: "billing_email",
                    billing_name: "billing_name",
                    card_brand: "card_brand",
                    card_exp_month: 1,
                    card_exp_year: 1,
                    card_last4: "card_last4",
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    customer_external_id: "customer_external_id",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    id: "id",
                    payment_method_type: "payment_method_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                entity_traits: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        environment_id: "environment_id",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                environment_id: "environment_id",
                id: "id",
                keys: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        entity_id: "entity_id",
                        entity_type: "entity_type",
                        environment_id: "environment_id",
                        id: "id",
                        key: "key",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                last_seen_at: "2024-01-15T09:30:00Z",
                logo_url: "logo_url",
                metrics: [
                    {
                        account_id: "account_id",
                        captured_at_max: "2024-01-15T09:30:00Z",
                        captured_at_min: "2024-01-15T09:30:00Z",
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        event_subtype: "event_subtype",
                        month_reset: "month_reset",
                        period: "period",
                        value: 1,
                    },
                ],
                name: "name",
                payment_methods: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                plan: {
                    added_on: "2024-01-15T09:30:00Z",
                    billing_product_external_id: "billing_product_external_id",
                    billing_product_id: "billing_product_id",
                    description: "description",
                    id: "id",
                    image_url: "image_url",
                    name: "name",
                    plan_period: "plan_period",
                    plan_price: 1,
                },
                plans: [{ id: "id", name: "name" }],
                traits: { key: "value" },
                updated_at: "2024-01-15T09:30:00Z",
                user_count: 1,
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/company-traits")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.companies.upsertCompanyTrait({
            keys: {
                key: "value",
            },
            trait: "trait",
        });
        expect(response).toEqual({
            data: {
                add_ons: [
                    {
                        id: "id",
                        name: "name",
                    },
                ],
                billing_credit_balances: {
                    key: 1.1,
                },
                billing_subscription: {
                    cancel_at: 1,
                    cancel_at_period_end: true,
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    customer_external_id: "customer_external_id",
                    default_payment_method_id: "default_payment_method_id",
                    discounts: [
                        {
                            coupon_id: "coupon_id",
                            coupon_name: "coupon_name",
                            discount_external_id: "discount_external_id",
                            duration: "duration",
                            is_active: true,
                            started_at: "2024-01-15T09:30:00Z",
                            subscription_external_id: "subscription_external_id",
                        },
                    ],
                    expired_at: "2024-01-15T09:30:00Z",
                    id: "id",
                    interval: "interval",
                    latest_invoice: {
                        amount_due: 1,
                        amount_paid: 1,
                        amount_remaining: 1,
                        collection_method: "collection_method",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        id: "id",
                        subtotal: 1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    metadata: {
                        key: "value",
                    },
                    payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    period_end: 1,
                    period_start: 1,
                    products: [
                        {
                            billing_scheme: "billing_scheme",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            interval: "interval",
                            name: "name",
                            package_size: 1,
                            price: 1,
                            price_external_id: "price_external_id",
                            price_id: "price_id",
                            price_tier: [{}],
                            quantity: 1.1,
                            subscription_id: "subscription_id",
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_type: "usage_type",
                        },
                    ],
                    status: "status",
                    subscription_external_id: "subscription_external_id",
                    total_price: 1,
                    trial_end: 1,
                    trial_end_setting: "trial_end_setting",
                },
                billing_subscriptions: [
                    {
                        cancel_at_period_end: true,
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        discounts: [
                            {
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                is_active: true,
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        id: "id",
                        interval: "interval",
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                default_payment_method: {
                    account_last4: "account_last4",
                    account_name: "account_name",
                    bank_name: "bank_name",
                    billing_email: "billing_email",
                    billing_name: "billing_name",
                    card_brand: "card_brand",
                    card_exp_month: 1,
                    card_exp_year: 1,
                    card_last4: "card_last4",
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    customer_external_id: "customer_external_id",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    id: "id",
                    payment_method_type: "payment_method_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                entity_traits: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        environment_id: "environment_id",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                environment_id: "environment_id",
                id: "id",
                keys: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        entity_id: "entity_id",
                        entity_type: "entity_type",
                        environment_id: "environment_id",
                        id: "id",
                        key: "key",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                last_seen_at: "2024-01-15T09:30:00Z",
                logo_url: "logo_url",
                metrics: [
                    {
                        account_id: "account_id",
                        captured_at_max: "2024-01-15T09:30:00Z",
                        captured_at_min: "2024-01-15T09:30:00Z",
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        event_subtype: "event_subtype",
                        month_reset: "month_reset",
                        period: "period",
                        value: 1,
                    },
                ],
                name: "name",
                payment_methods: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                plan: {
                    added_on: "2024-01-15T09:30:00Z",
                    billing_product_external_id: "billing_product_external_id",
                    billing_product_id: "billing_product_id",
                    description: "description",
                    id: "id",
                    image_url: "image_url",
                    name: "name",
                    plan_period: "plan_period",
                    plan_price: 1,
                },
                plans: [
                    {
                        id: "id",
                        name: "name",
                    },
                ],
                traits: {
                    key: "value",
                },
                updated_at: "2024-01-15T09:30:00Z",
                user_count: 1,
            },
            params: {
                key: "value",
            },
        });
    });

    test("listEntityKeyDefinitions", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    created_at: "2024-01-15T09:30:00Z",
                    entity_type: "entity_type",
                    id: "id",
                    key: "key",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: { entity_type: "company", ids: ["ids"], limit: 1, offset: 1, q: "q" },
        };
        server
            .mockEndpoint()
            .get("/entity-key-definitions")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.companies.listEntityKeyDefinitions();
        expect(response).toEqual({
            data: [
                {
                    created_at: "2024-01-15T09:30:00Z",
                    entity_type: "entity_type",
                    id: "id",
                    key: "key",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: {
                entity_type: "company",
                ids: ["ids"],
                limit: 1,
                offset: 1,
                q: "q",
            },
        });
    });

    test("countEntityKeyDefinitions", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: { count: 1 },
            params: { entity_type: "company", ids: ["ids"], limit: 1, offset: 1, q: "q" },
        };
        server
            .mockEndpoint()
            .get("/entity-key-definitions/count")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.companies.countEntityKeyDefinitions();
        expect(response).toEqual({
            data: {
                count: 1,
            },
            params: {
                entity_type: "company",
                ids: ["ids"],
                limit: 1,
                offset: 1,
                q: "q",
            },
        });
    });

    test("listEntityTraitDefinitions", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    created_at: "2024-01-15T09:30:00Z",
                    display_name: "display_name",
                    entity_type: "entity_type",
                    hierarchy: ["hierarchy"],
                    id: "id",
                    trait_type: "trait_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: { entity_type: "company", ids: ["ids"], limit: 1, offset: 1, q: "q", trait_type: "boolean" },
        };
        server
            .mockEndpoint()
            .get("/entity-trait-definitions")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.companies.listEntityTraitDefinitions();
        expect(response).toEqual({
            data: [
                {
                    created_at: "2024-01-15T09:30:00Z",
                    display_name: "display_name",
                    entity_type: "entity_type",
                    hierarchy: ["hierarchy"],
                    id: "id",
                    trait_type: "trait_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: {
                entity_type: "company",
                ids: ["ids"],
                limit: 1,
                offset: 1,
                q: "q",
                trait_type: "boolean",
            },
        });
    });

    test("getOrCreateEntityTraitDefinition", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { entity_type: "company", hierarchy: ["hierarchy"], trait_type: "boolean" };
        const rawResponseBody = {
            data: {
                created_at: "2024-01-15T09:30:00Z",
                display_name: "display_name",
                entity_type: "entity_type",
                hierarchy: ["hierarchy"],
                id: "id",
                trait_type: "trait_type",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/entity-trait-definitions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.companies.getOrCreateEntityTraitDefinition({
            entity_type: "company",
            hierarchy: ["hierarchy"],
            trait_type: "boolean",
        });
        expect(response).toEqual({
            data: {
                created_at: "2024-01-15T09:30:00Z",
                display_name: "display_name",
                entity_type: "entity_type",
                hierarchy: ["hierarchy"],
                id: "id",
                trait_type: "trait_type",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("getEntityTraitDefinition", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                created_at: "2024-01-15T09:30:00Z",
                display_name: "display_name",
                entity_type: "entity_type",
                hierarchy: ["hierarchy"],
                id: "id",
                trait_type: "trait_type",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .get("/entity-trait-definitions/entity_trait_definition_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.companies.getEntityTraitDefinition("entity_trait_definition_id");
        expect(response).toEqual({
            data: {
                created_at: "2024-01-15T09:30:00Z",
                display_name: "display_name",
                entity_type: "entity_type",
                hierarchy: ["hierarchy"],
                id: "id",
                trait_type: "trait_type",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("updateEntityTraitDefinition", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { trait_type: "boolean" };
        const rawResponseBody = {
            data: {
                created_at: "2024-01-15T09:30:00Z",
                display_name: "display_name",
                entity_type: "entity_type",
                hierarchy: ["hierarchy"],
                id: "id",
                trait_type: "trait_type",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .put("/entity-trait-definitions/entity_trait_definition_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.companies.updateEntityTraitDefinition("entity_trait_definition_id", {
            trait_type: "boolean",
        });
        expect(response).toEqual({
            data: {
                created_at: "2024-01-15T09:30:00Z",
                display_name: "display_name",
                entity_type: "entity_type",
                hierarchy: ["hierarchy"],
                id: "id",
                trait_type: "trait_type",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("countEntityTraitDefinitions", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: { count: 1 },
            params: { entity_type: "company", ids: ["ids"], limit: 1, offset: 1, q: "q", trait_type: "boolean" },
        };
        server
            .mockEndpoint()
            .get("/entity-trait-definitions/count")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.companies.countEntityTraitDefinitions();
        expect(response).toEqual({
            data: {
                count: 1,
            },
            params: {
                entity_type: "company",
                ids: ["ids"],
                limit: 1,
                offset: 1,
                q: "q",
                trait_type: "boolean",
            },
        });
    });

    test("getEntityTraitValues", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [{ definition_id: "definition_id", value: "value" }],
            params: { definition_id: "definition_id", limit: 1, offset: 1, q: "q" },
        };
        server
            .mockEndpoint()
            .get("/entity-trait-values")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.companies.getEntityTraitValues({
            definition_id: "definition_id",
        });
        expect(response).toEqual({
            data: [
                {
                    definition_id: "definition_id",
                    value: "value",
                },
            ],
            params: {
                definition_id: "definition_id",
                limit: 1,
                offset: 1,
                q: "q",
            },
        });
    });

    test("listPlanTraits", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    account_id: "account_id",
                    created_at: "2024-01-15T09:30:00Z",
                    environment_id: "environment_id",
                    id: "id",
                    plan_id: "plan_id",
                    plan_type: "plan_type",
                    trait_id: "trait_id",
                    trait_value: "trait_value",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: {
                ids: ["ids"],
                limit: 1,
                offset: 1,
                plan_id: "plan_id",
                trait_id: "trait_id",
                trait_ids: ["trait_ids"],
            },
        };
        server.mockEndpoint().get("/plan-traits").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.companies.listPlanTraits();
        expect(response).toEqual({
            data: [
                {
                    account_id: "account_id",
                    created_at: "2024-01-15T09:30:00Z",
                    environment_id: "environment_id",
                    id: "id",
                    plan_id: "plan_id",
                    plan_type: "plan_type",
                    trait_id: "trait_id",
                    trait_value: "trait_value",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: {
                ids: ["ids"],
                limit: 1,
                offset: 1,
                plan_id: "plan_id",
                trait_id: "trait_id",
                trait_ids: ["trait_ids"],
            },
        });
    });

    test("createPlanTrait", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { plan_id: "plan_id", trait_id: "trait_id", trait_value: "trait_value" };
        const rawResponseBody = {
            data: {
                account_id: "account_id",
                created_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                id: "id",
                plan_id: "plan_id",
                plan_type: "plan_type",
                trait_id: "trait_id",
                trait_value: "trait_value",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/plan-traits")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.companies.createPlanTrait({
            plan_id: "plan_id",
            trait_id: "trait_id",
            trait_value: "trait_value",
        });
        expect(response).toEqual({
            data: {
                account_id: "account_id",
                created_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                id: "id",
                plan_id: "plan_id",
                plan_type: "plan_type",
                trait_id: "trait_id",
                trait_value: "trait_value",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("getPlanTrait", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                account_id: "account_id",
                created_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                id: "id",
                plan_id: "plan_id",
                plan_type: "plan_type",
                trait_id: "trait_id",
                trait_value: "trait_value",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .get("/plan-traits/plan_trait_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.companies.getPlanTrait("plan_trait_id");
        expect(response).toEqual({
            data: {
                account_id: "account_id",
                created_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                id: "id",
                plan_id: "plan_id",
                plan_type: "plan_type",
                trait_id: "trait_id",
                trait_value: "trait_value",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("updatePlanTrait", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { plan_id: "plan_id", trait_value: "trait_value" };
        const rawResponseBody = {
            data: {
                account_id: "account_id",
                created_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                id: "id",
                plan_id: "plan_id",
                plan_type: "plan_type",
                trait_id: "trait_id",
                trait_value: "trait_value",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .put("/plan-traits/plan_trait_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.companies.updatePlanTrait("plan_trait_id", {
            plan_id: "plan_id",
            trait_value: "trait_value",
        });
        expect(response).toEqual({
            data: {
                account_id: "account_id",
                created_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                id: "id",
                plan_id: "plan_id",
                plan_type: "plan_type",
                trait_id: "trait_id",
                trait_value: "trait_value",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("deletePlanTrait", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { data: { deleted: true }, params: { key: "value" } };
        server
            .mockEndpoint()
            .delete("/plan-traits/plan_trait_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.companies.deletePlanTrait("plan_trait_id");
        expect(response).toEqual({
            data: {
                deleted: true,
            },
            params: {
                key: "value",
            },
        });
    });

    test("countPlanTraits", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: { count: 1 },
            params: {
                ids: ["ids"],
                limit: 1,
                offset: 1,
                plan_id: "plan_id",
                trait_id: "trait_id",
                trait_ids: ["trait_ids"],
            },
        };
        server.mockEndpoint().get("/plan-traits/count").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.companies.countPlanTraits();
        expect(response).toEqual({
            data: {
                count: 1,
            },
            params: {
                ids: ["ids"],
                limit: 1,
                offset: 1,
                plan_id: "plan_id",
                trait_id: "trait_id",
                trait_ids: ["trait_ids"],
            },
        });
    });

    test("upsertUserTrait", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { keys: { key: "value" }, trait: "trait" };
        const rawResponseBody = {
            data: {
                company_memberships: [
                    {
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        user_id: "user_id",
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                entity_traits: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        environment_id: "environment_id",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                environment_id: "environment_id",
                id: "id",
                keys: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        entity_id: "entity_id",
                        entity_type: "entity_type",
                        environment_id: "environment_id",
                        id: "id",
                        key: "key",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                last_seen_at: "2024-01-15T09:30:00Z",
                name: "name",
                traits: { key: "value" },
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/user-traits")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.companies.upsertUserTrait({
            keys: {
                key: "value",
            },
            trait: "trait",
        });
        expect(response).toEqual({
            data: {
                company_memberships: [
                    {
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        user_id: "user_id",
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                entity_traits: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        environment_id: "environment_id",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                environment_id: "environment_id",
                id: "id",
                keys: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        entity_id: "entity_id",
                        entity_type: "entity_type",
                        environment_id: "environment_id",
                        id: "id",
                        key: "key",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                last_seen_at: "2024-01-15T09:30:00Z",
                name: "name",
                traits: {
                    key: "value",
                },
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("listUsers", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    company_memberships: [
                        {
                            company_id: "company_id",
                            created_at: "2024-01-15T09:30:00Z",
                            id: "id",
                            updated_at: "2024-01-15T09:30:00Z",
                            user_id: "user_id",
                        },
                    ],
                    created_at: "2024-01-15T09:30:00Z",
                    entity_traits: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            environment_id: "environment_id",
                            id: "id",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    environment_id: "environment_id",
                    id: "id",
                    keys: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            entity_id: "entity_id",
                            entity_type: "entity_type",
                            environment_id: "environment_id",
                            id: "id",
                            key: "key",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    last_seen_at: "2024-01-15T09:30:00Z",
                    name: "name",
                    traits: { key: "value" },
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: { company_id: "company_id", ids: ["ids"], limit: 1, offset: 1, plan_id: "plan_id", q: "q" },
        };
        server.mockEndpoint().get("/users").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.companies.listUsers();
        expect(response).toEqual({
            data: [
                {
                    company_memberships: [
                        {
                            company_id: "company_id",
                            created_at: "2024-01-15T09:30:00Z",
                            id: "id",
                            updated_at: "2024-01-15T09:30:00Z",
                            user_id: "user_id",
                        },
                    ],
                    created_at: "2024-01-15T09:30:00Z",
                    entity_traits: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            environment_id: "environment_id",
                            id: "id",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    environment_id: "environment_id",
                    id: "id",
                    keys: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            entity_id: "entity_id",
                            entity_type: "entity_type",
                            environment_id: "environment_id",
                            id: "id",
                            key: "key",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    last_seen_at: "2024-01-15T09:30:00Z",
                    name: "name",
                    traits: {
                        key: "value",
                    },
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: {
                company_id: "company_id",
                ids: ["ids"],
                limit: 1,
                offset: 1,
                plan_id: "plan_id",
                q: "q",
            },
        });
    });

    test("upsertUser", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { keys: { key: "value" } };
        const rawResponseBody = {
            data: {
                company_memberships: [
                    {
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        user_id: "user_id",
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                entity_traits: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        environment_id: "environment_id",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                environment_id: "environment_id",
                id: "id",
                keys: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        entity_id: "entity_id",
                        entity_type: "entity_type",
                        environment_id: "environment_id",
                        id: "id",
                        key: "key",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                last_seen_at: "2024-01-15T09:30:00Z",
                name: "name",
                traits: { key: "value" },
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/users")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.companies.upsertUser({
            keys: {
                key: "value",
            },
        });
        expect(response).toEqual({
            data: {
                company_memberships: [
                    {
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        user_id: "user_id",
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                entity_traits: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        environment_id: "environment_id",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                environment_id: "environment_id",
                id: "id",
                keys: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        entity_id: "entity_id",
                        entity_type: "entity_type",
                        environment_id: "environment_id",
                        id: "id",
                        key: "key",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                last_seen_at: "2024-01-15T09:30:00Z",
                name: "name",
                traits: {
                    key: "value",
                },
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("getUser", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                company_memberships: [
                    {
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        user_id: "user_id",
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                entity_traits: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        environment_id: "environment_id",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                environment_id: "environment_id",
                id: "id",
                keys: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        entity_id: "entity_id",
                        entity_type: "entity_type",
                        environment_id: "environment_id",
                        id: "id",
                        key: "key",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                last_seen_at: "2024-01-15T09:30:00Z",
                name: "name",
                traits: { key: "value" },
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server.mockEndpoint().get("/users/user_id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.companies.getUser("user_id");
        expect(response).toEqual({
            data: {
                company_memberships: [
                    {
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        user_id: "user_id",
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                entity_traits: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        environment_id: "environment_id",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                environment_id: "environment_id",
                id: "id",
                keys: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        entity_id: "entity_id",
                        entity_type: "entity_type",
                        environment_id: "environment_id",
                        id: "id",
                        key: "key",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                last_seen_at: "2024-01-15T09:30:00Z",
                name: "name",
                traits: {
                    key: "value",
                },
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("deleteUser", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { data: { deleted: true }, params: { key: "value" } };
        server.mockEndpoint().delete("/users/user_id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.companies.deleteUser("user_id");
        expect(response).toEqual({
            data: {
                deleted: true,
            },
            params: {
                key: "value",
            },
        });
    });

    test("countUsers", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: { count: 1 },
            params: { company_id: "company_id", ids: ["ids"], limit: 1, offset: 1, plan_id: "plan_id", q: "q" },
        };
        server.mockEndpoint().get("/users/count").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.companies.countUsers();
        expect(response).toEqual({
            data: {
                count: 1,
            },
            params: {
                company_id: "company_id",
                ids: ["ids"],
                limit: 1,
                offset: 1,
                plan_id: "plan_id",
                q: "q",
            },
        });
    });

    test("createUser", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { keys: { key: "value" } };
        const rawResponseBody = {
            data: {
                company_memberships: [
                    {
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        user_id: "user_id",
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                entity_traits: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        environment_id: "environment_id",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                environment_id: "environment_id",
                id: "id",
                keys: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        entity_id: "entity_id",
                        entity_type: "entity_type",
                        environment_id: "environment_id",
                        id: "id",
                        key: "key",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                last_seen_at: "2024-01-15T09:30:00Z",
                name: "name",
                traits: { key: "value" },
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/users/create")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.companies.createUser({
            keys: {
                key: "value",
            },
        });
        expect(response).toEqual({
            data: {
                company_memberships: [
                    {
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        user_id: "user_id",
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                entity_traits: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        environment_id: "environment_id",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                environment_id: "environment_id",
                id: "id",
                keys: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition_id: "definition_id",
                        entity_id: "entity_id",
                        entity_type: "entity_type",
                        environment_id: "environment_id",
                        id: "id",
                        key: "key",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                last_seen_at: "2024-01-15T09:30:00Z",
                name: "name",
                traits: {
                    key: "value",
                },
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("deleteUserByKeys", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { keys: { key: "value" } };
        const rawResponseBody = {
            data: {
                created_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                id: "id",
                last_seen_at: "2024-01-15T09:30:00Z",
                name: "name",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/users/delete")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.companies.deleteUserByKeys({
            keys: {
                key: "value",
            },
        });
        expect(response).toEqual({
            data: {
                created_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                id: "id",
                last_seen_at: "2024-01-15T09:30:00Z",
                name: "name",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("lookupUser", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                company_memberships: [
                    {
                        company: {
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            id: "id",
                            last_seen_at: "2024-01-15T09:30:00Z",
                            logo_url: "logo_url",
                            name: "name",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        user_id: "user_id",
                    },
                    {
                        company: {
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            id: "id",
                            last_seen_at: "2024-01-15T09:30:00Z",
                            logo_url: "logo_url",
                            name: "name",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        user_id: "user_id",
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                entity_traits: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition: {
                            created_at: "2024-01-15T09:30:00Z",
                            display_name: "display_name",
                            entity_type: "entity_type",
                            hierarchy: ["hierarchy", "hierarchy"],
                            id: "id",
                            trait_type: "trait_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        definition_id: "definition_id",
                        environment_id: "environment_id",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition: {
                            created_at: "2024-01-15T09:30:00Z",
                            display_name: "display_name",
                            entity_type: "entity_type",
                            hierarchy: ["hierarchy", "hierarchy"],
                            id: "id",
                            trait_type: "trait_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        definition_id: "definition_id",
                        environment_id: "environment_id",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                environment_id: "environment_id",
                id: "id",
                keys: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition: {
                            created_at: "2024-01-15T09:30:00Z",
                            entity_type: "entity_type",
                            id: "id",
                            key: "key",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        definition_id: "definition_id",
                        entity_id: "entity_id",
                        entity_type: "entity_type",
                        environment_id: "environment_id",
                        id: "id",
                        key: "key",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition: {
                            created_at: "2024-01-15T09:30:00Z",
                            entity_type: "entity_type",
                            id: "id",
                            key: "key",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        definition_id: "definition_id",
                        entity_id: "entity_id",
                        entity_type: "entity_type",
                        environment_id: "environment_id",
                        id: "id",
                        key: "key",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                last_seen_at: "2024-01-15T09:30:00Z",
                name: "name",
                traits: { traits: { key: "value" } },
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { keys: { keys: "keys" } },
        };
        server.mockEndpoint().get("/users/lookup").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.companies.lookupUser({
            keys: {
                keys: "keys",
            },
        });
        expect(response).toEqual({
            data: {
                company_memberships: [
                    {
                        company: {
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            id: "id",
                            last_seen_at: "2024-01-15T09:30:00Z",
                            logo_url: "logo_url",
                            name: "name",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        user_id: "user_id",
                    },
                    {
                        company: {
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            id: "id",
                            last_seen_at: "2024-01-15T09:30:00Z",
                            logo_url: "logo_url",
                            name: "name",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        company_id: "company_id",
                        created_at: "2024-01-15T09:30:00Z",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        user_id: "user_id",
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                entity_traits: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition: {
                            created_at: "2024-01-15T09:30:00Z",
                            display_name: "display_name",
                            entity_type: "entity_type",
                            hierarchy: ["hierarchy", "hierarchy"],
                            id: "id",
                            trait_type: "trait_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        definition_id: "definition_id",
                        environment_id: "environment_id",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition: {
                            created_at: "2024-01-15T09:30:00Z",
                            display_name: "display_name",
                            entity_type: "entity_type",
                            hierarchy: ["hierarchy", "hierarchy"],
                            id: "id",
                            trait_type: "trait_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        definition_id: "definition_id",
                        environment_id: "environment_id",
                        id: "id",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                environment_id: "environment_id",
                id: "id",
                keys: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition: {
                            created_at: "2024-01-15T09:30:00Z",
                            entity_type: "entity_type",
                            id: "id",
                            key: "key",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        definition_id: "definition_id",
                        entity_id: "entity_id",
                        entity_type: "entity_type",
                        environment_id: "environment_id",
                        id: "id",
                        key: "key",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        definition: {
                            created_at: "2024-01-15T09:30:00Z",
                            entity_type: "entity_type",
                            id: "id",
                            key: "key",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                        definition_id: "definition_id",
                        entity_id: "entity_id",
                        entity_type: "entity_type",
                        environment_id: "environment_id",
                        id: "id",
                        key: "key",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: "value",
                    },
                ],
                last_seen_at: "2024-01-15T09:30:00Z",
                name: "name",
                traits: {
                    traits: {
                        key: "value",
                    },
                },
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                keys: {
                    keys: "keys",
                },
            },
        });
    });
});
