/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SchematicClient } from "../../src/Client";
import * as Schematic from "../../src/api/index";

describe("Features", () => {
    test("countAudienceCompanies", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            condition_groups: [
                { conditions: [{ condition_type: "company", operator: "eq", resource_ids: ["resource_ids"] }] },
            ],
            conditions: [{ condition_type: "company", operator: "eq", resource_ids: ["resource_ids"] }],
        };
        const rawResponseBody = { data: { count: 1 }, params: { key: "value" } };
        server
            .mockEndpoint()
            .post("/audience/count-companies")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.features.countAudienceCompanies({
            condition_groups: [
                {
                    conditions: [
                        {
                            condition_type: "company",
                            operator: "eq",
                            resource_ids: ["resource_ids"],
                        },
                    ],
                },
            ],
            conditions: [
                {
                    condition_type: "company",
                    operator: "eq",
                    resource_ids: ["resource_ids"],
                },
            ],
        });
        expect(response).toEqual({
            data: {
                count: 1,
            },
            params: {
                key: "value",
            },
        });
    });

    test("countAudienceUsers", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            condition_groups: [
                { conditions: [{ condition_type: "company", operator: "eq", resource_ids: ["resource_ids"] }] },
            ],
            conditions: [{ condition_type: "company", operator: "eq", resource_ids: ["resource_ids"] }],
        };
        const rawResponseBody = { data: { count: 1 }, params: { key: "value" } };
        server
            .mockEndpoint()
            .post("/audience/count-users")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.features.countAudienceUsers({
            condition_groups: [
                {
                    conditions: [
                        {
                            condition_type: "company",
                            operator: "eq",
                            resource_ids: ["resource_ids"],
                        },
                    ],
                },
            ],
            conditions: [
                {
                    condition_type: "company",
                    operator: "eq",
                    resource_ids: ["resource_ids"],
                },
            ],
        });
        expect(response).toEqual({
            data: {
                count: 1,
            },
            params: {
                key: "value",
            },
        });
    });

    test("listAudienceCompanies", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            condition_groups: [
                { conditions: [{ condition_type: "company", operator: "eq", resource_ids: ["resource_ids"] }] },
            ],
            conditions: [{ condition_type: "company", operator: "eq", resource_ids: ["resource_ids"] }],
        };
        const rawResponseBody = {
            data: [
                {
                    add_ons: [{ id: "id", name: "name" }],
                    billing_credit_balances: { key: 1.1 },
                    billing_subscription: {
                        cancel_at_period_end: true,
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        discounts: [
                            {
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                is_active: true,
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        id: "id",
                        interval: "interval",
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                    },
                    billing_subscriptions: [
                        {
                            cancel_at_period_end: true,
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            customer_external_id: "customer_external_id",
                            discounts: [
                                {
                                    coupon_id: "coupon_id",
                                    coupon_name: "coupon_name",
                                    discount_external_id: "discount_external_id",
                                    duration: "duration",
                                    is_active: true,
                                    started_at: "2024-01-15T09:30:00Z",
                                    subscription_external_id: "subscription_external_id",
                                },
                            ],
                            id: "id",
                            interval: "interval",
                            period_end: 1,
                            period_start: 1,
                            products: [
                                {
                                    billing_scheme: "billing_scheme",
                                    created_at: "2024-01-15T09:30:00Z",
                                    currency: "currency",
                                    environment_id: "environment_id",
                                    external_id: "external_id",
                                    id: "id",
                                    interval: "interval",
                                    name: "name",
                                    package_size: 1,
                                    price: 1,
                                    price_external_id: "price_external_id",
                                    price_id: "price_id",
                                    price_tier: [{}],
                                    quantity: 1.1,
                                    subscription_id: "subscription_id",
                                    updated_at: "2024-01-15T09:30:00Z",
                                    usage_type: "usage_type",
                                },
                            ],
                            status: "status",
                            subscription_external_id: "subscription_external_id",
                            total_price: 1,
                        },
                    ],
                    created_at: "2024-01-15T09:30:00Z",
                    default_payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    entity_traits: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            environment_id: "environment_id",
                            id: "id",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    environment_id: "environment_id",
                    id: "id",
                    keys: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            entity_id: "entity_id",
                            entity_type: "entity_type",
                            environment_id: "environment_id",
                            id: "id",
                            key: "key",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    last_seen_at: "2024-01-15T09:30:00Z",
                    logo_url: "logo_url",
                    metrics: [
                        {
                            account_id: "account_id",
                            captured_at_max: "2024-01-15T09:30:00Z",
                            captured_at_min: "2024-01-15T09:30:00Z",
                            company_id: "company_id",
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            event_subtype: "event_subtype",
                            month_reset: "month_reset",
                            period: "period",
                            value: 1,
                        },
                    ],
                    name: "name",
                    payment_methods: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            customer_external_id: "customer_external_id",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            payment_method_type: "payment_method_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    plan: { id: "id", name: "name" },
                    plans: [{ id: "id", name: "name" }],
                    traits: { key: "value" },
                    updated_at: "2024-01-15T09:30:00Z",
                    user_count: 1,
                },
            ],
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/audience/get-companies")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.features.listAudienceCompanies({
            condition_groups: [
                {
                    conditions: [
                        {
                            condition_type: "company",
                            operator: "eq",
                            resource_ids: ["resource_ids"],
                        },
                    ],
                },
            ],
            conditions: [
                {
                    condition_type: "company",
                    operator: "eq",
                    resource_ids: ["resource_ids"],
                },
            ],
        });
        expect(response).toEqual({
            data: [
                {
                    add_ons: [
                        {
                            id: "id",
                            name: "name",
                        },
                    ],
                    billing_credit_balances: {
                        key: 1.1,
                    },
                    billing_subscription: {
                        cancel_at_period_end: true,
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        discounts: [
                            {
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                is_active: true,
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        id: "id",
                        interval: "interval",
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                    },
                    billing_subscriptions: [
                        {
                            cancel_at_period_end: true,
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            customer_external_id: "customer_external_id",
                            discounts: [
                                {
                                    coupon_id: "coupon_id",
                                    coupon_name: "coupon_name",
                                    discount_external_id: "discount_external_id",
                                    duration: "duration",
                                    is_active: true,
                                    started_at: "2024-01-15T09:30:00Z",
                                    subscription_external_id: "subscription_external_id",
                                },
                            ],
                            id: "id",
                            interval: "interval",
                            period_end: 1,
                            period_start: 1,
                            products: [
                                {
                                    billing_scheme: "billing_scheme",
                                    created_at: "2024-01-15T09:30:00Z",
                                    currency: "currency",
                                    environment_id: "environment_id",
                                    external_id: "external_id",
                                    id: "id",
                                    interval: "interval",
                                    name: "name",
                                    package_size: 1,
                                    price: 1,
                                    price_external_id: "price_external_id",
                                    price_id: "price_id",
                                    price_tier: [{}],
                                    quantity: 1.1,
                                    subscription_id: "subscription_id",
                                    updated_at: "2024-01-15T09:30:00Z",
                                    usage_type: "usage_type",
                                },
                            ],
                            status: "status",
                            subscription_external_id: "subscription_external_id",
                            total_price: 1,
                        },
                    ],
                    created_at: "2024-01-15T09:30:00Z",
                    default_payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    entity_traits: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            environment_id: "environment_id",
                            id: "id",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    environment_id: "environment_id",
                    id: "id",
                    keys: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            entity_id: "entity_id",
                            entity_type: "entity_type",
                            environment_id: "environment_id",
                            id: "id",
                            key: "key",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    last_seen_at: "2024-01-15T09:30:00Z",
                    logo_url: "logo_url",
                    metrics: [
                        {
                            account_id: "account_id",
                            captured_at_max: "2024-01-15T09:30:00Z",
                            captured_at_min: "2024-01-15T09:30:00Z",
                            company_id: "company_id",
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            event_subtype: "event_subtype",
                            month_reset: "month_reset",
                            period: "period",
                            value: 1,
                        },
                    ],
                    name: "name",
                    payment_methods: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            customer_external_id: "customer_external_id",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            payment_method_type: "payment_method_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    plan: {
                        id: "id",
                        name: "name",
                    },
                    plans: [
                        {
                            id: "id",
                            name: "name",
                        },
                    ],
                    traits: {
                        key: "value",
                    },
                    updated_at: "2024-01-15T09:30:00Z",
                    user_count: 1,
                },
            ],
            params: {
                key: "value",
            },
        });
    });

    test("listAudienceUsers", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            condition_groups: [
                { conditions: [{ condition_type: "company", operator: "eq", resource_ids: ["resource_ids"] }] },
            ],
            conditions: [{ condition_type: "company", operator: "eq", resource_ids: ["resource_ids"] }],
        };
        const rawResponseBody = {
            data: [
                {
                    company_memberships: [
                        {
                            company_id: "company_id",
                            created_at: "2024-01-15T09:30:00Z",
                            id: "id",
                            updated_at: "2024-01-15T09:30:00Z",
                            user_id: "user_id",
                        },
                    ],
                    created_at: "2024-01-15T09:30:00Z",
                    entity_traits: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            environment_id: "environment_id",
                            id: "id",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    environment_id: "environment_id",
                    id: "id",
                    keys: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            entity_id: "entity_id",
                            entity_type: "entity_type",
                            environment_id: "environment_id",
                            id: "id",
                            key: "key",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    last_seen_at: "2024-01-15T09:30:00Z",
                    name: "name",
                    traits: { key: "value" },
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/audience/get-users")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.features.listAudienceUsers({
            condition_groups: [
                {
                    conditions: [
                        {
                            condition_type: "company",
                            operator: "eq",
                            resource_ids: ["resource_ids"],
                        },
                    ],
                },
            ],
            conditions: [
                {
                    condition_type: "company",
                    operator: "eq",
                    resource_ids: ["resource_ids"],
                },
            ],
        });
        expect(response).toEqual({
            data: [
                {
                    company_memberships: [
                        {
                            company_id: "company_id",
                            created_at: "2024-01-15T09:30:00Z",
                            id: "id",
                            updated_at: "2024-01-15T09:30:00Z",
                            user_id: "user_id",
                        },
                    ],
                    created_at: "2024-01-15T09:30:00Z",
                    entity_traits: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            environment_id: "environment_id",
                            id: "id",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    environment_id: "environment_id",
                    id: "id",
                    keys: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            entity_id: "entity_id",
                            entity_type: "entity_type",
                            environment_id: "environment_id",
                            id: "id",
                            key: "key",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    last_seen_at: "2024-01-15T09:30:00Z",
                    name: "name",
                    traits: {
                        key: "value",
                    },
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: {
                key: "value",
            },
        });
    });

    test("listFeatures", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    event_subtype: "event_subtype",
                    event_summary: {
                        company_count: 1,
                        environment_id: "environment_id",
                        event_count: 1,
                        event_subtype: "event_subtype",
                        user_count: 1,
                    },
                    feature_type: "feature_type",
                    flags: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            default_value: true,
                            description: "description",
                            flag_type: "flag_type",
                            id: "id",
                            key: "key",
                            name: "name",
                            rules: [
                                {
                                    condition_groups: [
                                        {
                                            conditions: [
                                                {
                                                    condition_type: "condition_type",
                                                    created_at: "2024-01-15T09:30:00Z",
                                                    environment_id: "environment_id",
                                                    id: "id",
                                                    operator: "operator",
                                                    resource_ids: ["resource_ids"],
                                                    resources: [{ id: "id", name: "name" }],
                                                    rule_id: "rule_id",
                                                    trait_value: "trait_value",
                                                    updated_at: "2024-01-15T09:30:00Z",
                                                },
                                            ],
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            rule_id: "rule_id",
                                            updated_at: "2024-01-15T09:30:00Z",
                                        },
                                    ],
                                    conditions: [
                                        {
                                            condition_type: "condition_type",
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            operator: "operator",
                                            resource_ids: ["resource_ids"],
                                            resources: [{ id: "id", name: "name" }],
                                            rule_id: "rule_id",
                                            trait_value: "trait_value",
                                            updated_at: "2024-01-15T09:30:00Z",
                                        },
                                    ],
                                    created_at: "2024-01-15T09:30:00Z",
                                    environment_id: "environment_id",
                                    id: "id",
                                    name: "name",
                                    priority: 1,
                                    rule_type: "rule_type",
                                    updated_at: "2024-01-15T09:30:00Z",
                                    value: true,
                                },
                            ],
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    icon: "icon",
                    id: "id",
                    lifecycle_phase: "lifecycle_phase",
                    maintainer_id: "maintainer_id",
                    name: "name",
                    plans: [{ id: "id", name: "name" }],
                    plural_name: "plural_name",
                    singular_name: "singular_name",
                    trait: {
                        created_at: "2024-01-15T09:30:00Z",
                        display_name: "display_name",
                        entity_type: "entity_type",
                        hierarchy: ["hierarchy"],
                        id: "id",
                        trait_type: "trait_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    trait_id: "trait_id",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: {
                boolean_require_event: true,
                feature_type: ["feature_type"],
                ids: ["ids"],
                limit: 1,
                offset: 1,
                q: "q",
                without_company_override_for: "without_company_override_for",
                without_plan_entitlement_for: "without_plan_entitlement_for",
            },
        };
        server.mockEndpoint().get("/features").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.features.listFeatures();
        expect(response).toEqual({
            data: [
                {
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    event_subtype: "event_subtype",
                    event_summary: {
                        company_count: 1,
                        environment_id: "environment_id",
                        event_count: 1,
                        event_subtype: "event_subtype",
                        user_count: 1,
                    },
                    feature_type: "feature_type",
                    flags: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            default_value: true,
                            description: "description",
                            flag_type: "flag_type",
                            id: "id",
                            key: "key",
                            name: "name",
                            rules: [
                                {
                                    condition_groups: [
                                        {
                                            conditions: [
                                                {
                                                    condition_type: "condition_type",
                                                    created_at: "2024-01-15T09:30:00Z",
                                                    environment_id: "environment_id",
                                                    id: "id",
                                                    operator: "operator",
                                                    resource_ids: ["resource_ids"],
                                                    resources: [
                                                        {
                                                            id: "id",
                                                            name: "name",
                                                        },
                                                    ],
                                                    rule_id: "rule_id",
                                                    trait_value: "trait_value",
                                                    updated_at: "2024-01-15T09:30:00Z",
                                                },
                                            ],
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            rule_id: "rule_id",
                                            updated_at: "2024-01-15T09:30:00Z",
                                        },
                                    ],
                                    conditions: [
                                        {
                                            condition_type: "condition_type",
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            operator: "operator",
                                            resource_ids: ["resource_ids"],
                                            resources: [
                                                {
                                                    id: "id",
                                                    name: "name",
                                                },
                                            ],
                                            rule_id: "rule_id",
                                            trait_value: "trait_value",
                                            updated_at: "2024-01-15T09:30:00Z",
                                        },
                                    ],
                                    created_at: "2024-01-15T09:30:00Z",
                                    environment_id: "environment_id",
                                    id: "id",
                                    name: "name",
                                    priority: 1,
                                    rule_type: "rule_type",
                                    updated_at: "2024-01-15T09:30:00Z",
                                    value: true,
                                },
                            ],
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    icon: "icon",
                    id: "id",
                    lifecycle_phase: "lifecycle_phase",
                    maintainer_id: "maintainer_id",
                    name: "name",
                    plans: [
                        {
                            id: "id",
                            name: "name",
                        },
                    ],
                    plural_name: "plural_name",
                    singular_name: "singular_name",
                    trait: {
                        created_at: "2024-01-15T09:30:00Z",
                        display_name: "display_name",
                        entity_type: "entity_type",
                        hierarchy: ["hierarchy"],
                        id: "id",
                        trait_type: "trait_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    trait_id: "trait_id",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: {
                boolean_require_event: true,
                feature_type: ["feature_type"],
                ids: ["ids"],
                limit: 1,
                offset: 1,
                q: "q",
                without_company_override_for: "without_company_override_for",
                without_plan_entitlement_for: "without_plan_entitlement_for",
            },
        });
    });

    test("createFeature", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { description: "description", feature_type: "boolean", name: "name" };
        const rawResponseBody = {
            data: {
                created_at: "2024-01-15T09:30:00Z",
                description: "description",
                event_subtype: "event_subtype",
                event_summary: {
                    company_count: 1,
                    environment_id: "environment_id",
                    event_count: 1,
                    event_subtype: "event_subtype",
                    last_seen_at: "2024-01-15T09:30:00Z",
                    user_count: 1,
                },
                feature_type: "feature_type",
                flags: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        default_value: true,
                        description: "description",
                        flag_type: "flag_type",
                        id: "id",
                        key: "key",
                        name: "name",
                        rules: [
                            {
                                condition_groups: [
                                    {
                                        conditions: [
                                            {
                                                condition_type: "condition_type",
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                operator: "operator",
                                                resource_ids: ["resource_ids"],
                                                resources: [{ id: "id", name: "name" }],
                                                rule_id: "rule_id",
                                                trait_value: "trait_value",
                                                updated_at: "2024-01-15T09:30:00Z",
                                            },
                                        ],
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        rule_id: "rule_id",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                ],
                                conditions: [
                                    {
                                        condition_type: "condition_type",
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        operator: "operator",
                                        resource_ids: ["resource_ids"],
                                        resources: [{ id: "id", name: "name" }],
                                        rule_id: "rule_id",
                                        trait_value: "trait_value",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                ],
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                id: "id",
                                name: "name",
                                priority: 1,
                                rule_type: "rule_type",
                                updated_at: "2024-01-15T09:30:00Z",
                                value: true,
                            },
                        ],
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                icon: "icon",
                id: "id",
                lifecycle_phase: "lifecycle_phase",
                maintainer_id: "maintainer_id",
                name: "name",
                plans: [{ id: "id", name: "name" }],
                plural_name: "plural_name",
                singular_name: "singular_name",
                trait: {
                    created_at: "2024-01-15T09:30:00Z",
                    display_name: "display_name",
                    entity_type: "entity_type",
                    hierarchy: ["hierarchy"],
                    id: "id",
                    trait_type: "trait_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                trait_id: "trait_id",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/features")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.features.createFeature({
            description: "description",
            feature_type: "boolean",
            name: "name",
        });
        expect(response).toEqual({
            data: {
                created_at: "2024-01-15T09:30:00Z",
                description: "description",
                event_subtype: "event_subtype",
                event_summary: {
                    company_count: 1,
                    environment_id: "environment_id",
                    event_count: 1,
                    event_subtype: "event_subtype",
                    last_seen_at: "2024-01-15T09:30:00Z",
                    user_count: 1,
                },
                feature_type: "feature_type",
                flags: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        default_value: true,
                        description: "description",
                        flag_type: "flag_type",
                        id: "id",
                        key: "key",
                        name: "name",
                        rules: [
                            {
                                condition_groups: [
                                    {
                                        conditions: [
                                            {
                                                condition_type: "condition_type",
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                operator: "operator",
                                                resource_ids: ["resource_ids"],
                                                resources: [
                                                    {
                                                        id: "id",
                                                        name: "name",
                                                    },
                                                ],
                                                rule_id: "rule_id",
                                                trait_value: "trait_value",
                                                updated_at: "2024-01-15T09:30:00Z",
                                            },
                                        ],
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        rule_id: "rule_id",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                ],
                                conditions: [
                                    {
                                        condition_type: "condition_type",
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        operator: "operator",
                                        resource_ids: ["resource_ids"],
                                        resources: [
                                            {
                                                id: "id",
                                                name: "name",
                                            },
                                        ],
                                        rule_id: "rule_id",
                                        trait_value: "trait_value",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                ],
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                id: "id",
                                name: "name",
                                priority: 1,
                                rule_type: "rule_type",
                                updated_at: "2024-01-15T09:30:00Z",
                                value: true,
                            },
                        ],
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                icon: "icon",
                id: "id",
                lifecycle_phase: "lifecycle_phase",
                maintainer_id: "maintainer_id",
                name: "name",
                plans: [
                    {
                        id: "id",
                        name: "name",
                    },
                ],
                plural_name: "plural_name",
                singular_name: "singular_name",
                trait: {
                    created_at: "2024-01-15T09:30:00Z",
                    display_name: "display_name",
                    entity_type: "entity_type",
                    hierarchy: ["hierarchy"],
                    id: "id",
                    trait_type: "trait_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                trait_id: "trait_id",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("getFeature", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                created_at: "2024-01-15T09:30:00Z",
                description: "description",
                event_subtype: "event_subtype",
                event_summary: {
                    company_count: 1,
                    environment_id: "environment_id",
                    event_count: 1,
                    event_subtype: "event_subtype",
                    last_seen_at: "2024-01-15T09:30:00Z",
                    user_count: 1,
                },
                feature_type: "feature_type",
                flags: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        default_value: true,
                        description: "description",
                        flag_type: "flag_type",
                        id: "id",
                        key: "key",
                        name: "name",
                        rules: [
                            {
                                condition_groups: [
                                    {
                                        conditions: [
                                            {
                                                condition_type: "condition_type",
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                operator: "operator",
                                                resource_ids: ["resource_ids"],
                                                resources: [{ id: "id", name: "name" }],
                                                rule_id: "rule_id",
                                                trait_value: "trait_value",
                                                updated_at: "2024-01-15T09:30:00Z",
                                            },
                                        ],
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        rule_id: "rule_id",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                ],
                                conditions: [
                                    {
                                        condition_type: "condition_type",
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        operator: "operator",
                                        resource_ids: ["resource_ids"],
                                        resources: [{ id: "id", name: "name" }],
                                        rule_id: "rule_id",
                                        trait_value: "trait_value",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                ],
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                id: "id",
                                name: "name",
                                priority: 1,
                                rule_type: "rule_type",
                                updated_at: "2024-01-15T09:30:00Z",
                                value: true,
                            },
                        ],
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                icon: "icon",
                id: "id",
                lifecycle_phase: "lifecycle_phase",
                maintainer_id: "maintainer_id",
                name: "name",
                plans: [{ id: "id", name: "name" }],
                plural_name: "plural_name",
                singular_name: "singular_name",
                trait: {
                    created_at: "2024-01-15T09:30:00Z",
                    display_name: "display_name",
                    entity_type: "entity_type",
                    hierarchy: ["hierarchy"],
                    id: "id",
                    trait_type: "trait_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                trait_id: "trait_id",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .get("/features/feature_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.features.getFeature("feature_id");
        expect(response).toEqual({
            data: {
                created_at: "2024-01-15T09:30:00Z",
                description: "description",
                event_subtype: "event_subtype",
                event_summary: {
                    company_count: 1,
                    environment_id: "environment_id",
                    event_count: 1,
                    event_subtype: "event_subtype",
                    last_seen_at: "2024-01-15T09:30:00Z",
                    user_count: 1,
                },
                feature_type: "feature_type",
                flags: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        default_value: true,
                        description: "description",
                        flag_type: "flag_type",
                        id: "id",
                        key: "key",
                        name: "name",
                        rules: [
                            {
                                condition_groups: [
                                    {
                                        conditions: [
                                            {
                                                condition_type: "condition_type",
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                operator: "operator",
                                                resource_ids: ["resource_ids"],
                                                resources: [
                                                    {
                                                        id: "id",
                                                        name: "name",
                                                    },
                                                ],
                                                rule_id: "rule_id",
                                                trait_value: "trait_value",
                                                updated_at: "2024-01-15T09:30:00Z",
                                            },
                                        ],
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        rule_id: "rule_id",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                ],
                                conditions: [
                                    {
                                        condition_type: "condition_type",
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        operator: "operator",
                                        resource_ids: ["resource_ids"],
                                        resources: [
                                            {
                                                id: "id",
                                                name: "name",
                                            },
                                        ],
                                        rule_id: "rule_id",
                                        trait_value: "trait_value",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                ],
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                id: "id",
                                name: "name",
                                priority: 1,
                                rule_type: "rule_type",
                                updated_at: "2024-01-15T09:30:00Z",
                                value: true,
                            },
                        ],
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                icon: "icon",
                id: "id",
                lifecycle_phase: "lifecycle_phase",
                maintainer_id: "maintainer_id",
                name: "name",
                plans: [
                    {
                        id: "id",
                        name: "name",
                    },
                ],
                plural_name: "plural_name",
                singular_name: "singular_name",
                trait: {
                    created_at: "2024-01-15T09:30:00Z",
                    display_name: "display_name",
                    entity_type: "entity_type",
                    hierarchy: ["hierarchy"],
                    id: "id",
                    trait_type: "trait_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                trait_id: "trait_id",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("updateFeature", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            data: {
                created_at: "2024-01-15T09:30:00Z",
                description: "description",
                event_subtype: "event_subtype",
                event_summary: {
                    company_count: 1,
                    environment_id: "environment_id",
                    event_count: 1,
                    event_subtype: "event_subtype",
                    last_seen_at: "2024-01-15T09:30:00Z",
                    user_count: 1,
                },
                feature_type: "feature_type",
                flags: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        default_value: true,
                        description: "description",
                        flag_type: "flag_type",
                        id: "id",
                        key: "key",
                        name: "name",
                        rules: [
                            {
                                condition_groups: [
                                    {
                                        conditions: [
                                            {
                                                condition_type: "condition_type",
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                operator: "operator",
                                                resource_ids: ["resource_ids"],
                                                resources: [{ id: "id", name: "name" }],
                                                rule_id: "rule_id",
                                                trait_value: "trait_value",
                                                updated_at: "2024-01-15T09:30:00Z",
                                            },
                                        ],
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        rule_id: "rule_id",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                ],
                                conditions: [
                                    {
                                        condition_type: "condition_type",
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        operator: "operator",
                                        resource_ids: ["resource_ids"],
                                        resources: [{ id: "id", name: "name" }],
                                        rule_id: "rule_id",
                                        trait_value: "trait_value",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                ],
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                id: "id",
                                name: "name",
                                priority: 1,
                                rule_type: "rule_type",
                                updated_at: "2024-01-15T09:30:00Z",
                                value: true,
                            },
                        ],
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                icon: "icon",
                id: "id",
                lifecycle_phase: "lifecycle_phase",
                maintainer_id: "maintainer_id",
                name: "name",
                plans: [{ id: "id", name: "name" }],
                plural_name: "plural_name",
                singular_name: "singular_name",
                trait: {
                    created_at: "2024-01-15T09:30:00Z",
                    display_name: "display_name",
                    entity_type: "entity_type",
                    hierarchy: ["hierarchy"],
                    id: "id",
                    trait_type: "trait_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                trait_id: "trait_id",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .put("/features/feature_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.features.updateFeature("feature_id");
        expect(response).toEqual({
            data: {
                created_at: "2024-01-15T09:30:00Z",
                description: "description",
                event_subtype: "event_subtype",
                event_summary: {
                    company_count: 1,
                    environment_id: "environment_id",
                    event_count: 1,
                    event_subtype: "event_subtype",
                    last_seen_at: "2024-01-15T09:30:00Z",
                    user_count: 1,
                },
                feature_type: "feature_type",
                flags: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        default_value: true,
                        description: "description",
                        flag_type: "flag_type",
                        id: "id",
                        key: "key",
                        name: "name",
                        rules: [
                            {
                                condition_groups: [
                                    {
                                        conditions: [
                                            {
                                                condition_type: "condition_type",
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                operator: "operator",
                                                resource_ids: ["resource_ids"],
                                                resources: [
                                                    {
                                                        id: "id",
                                                        name: "name",
                                                    },
                                                ],
                                                rule_id: "rule_id",
                                                trait_value: "trait_value",
                                                updated_at: "2024-01-15T09:30:00Z",
                                            },
                                        ],
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        rule_id: "rule_id",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                ],
                                conditions: [
                                    {
                                        condition_type: "condition_type",
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        operator: "operator",
                                        resource_ids: ["resource_ids"],
                                        resources: [
                                            {
                                                id: "id",
                                                name: "name",
                                            },
                                        ],
                                        rule_id: "rule_id",
                                        trait_value: "trait_value",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                ],
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                id: "id",
                                name: "name",
                                priority: 1,
                                rule_type: "rule_type",
                                updated_at: "2024-01-15T09:30:00Z",
                                value: true,
                            },
                        ],
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                icon: "icon",
                id: "id",
                lifecycle_phase: "lifecycle_phase",
                maintainer_id: "maintainer_id",
                name: "name",
                plans: [
                    {
                        id: "id",
                        name: "name",
                    },
                ],
                plural_name: "plural_name",
                singular_name: "singular_name",
                trait: {
                    created_at: "2024-01-15T09:30:00Z",
                    display_name: "display_name",
                    entity_type: "entity_type",
                    hierarchy: ["hierarchy"],
                    id: "id",
                    trait_type: "trait_type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                trait_id: "trait_id",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("deleteFeature", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { data: { deleted: true }, params: { key: "value" } };
        server
            .mockEndpoint()
            .delete("/features/feature_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.features.deleteFeature("feature_id");
        expect(response).toEqual({
            data: {
                deleted: true,
            },
            params: {
                key: "value",
            },
        });
    });

    test("countFeatures", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: { count: 1 },
            params: {
                boolean_require_event: true,
                feature_type: ["feature_type"],
                ids: ["ids"],
                limit: 1,
                offset: 1,
                q: "q",
                without_company_override_for: "without_company_override_for",
                without_plan_entitlement_for: "without_plan_entitlement_for",
            },
        };
        server.mockEndpoint().get("/features/count").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.features.countFeatures();
        expect(response).toEqual({
            data: {
                count: 1,
            },
            params: {
                boolean_require_event: true,
                feature_type: ["feature_type"],
                ids: ["ids"],
                limit: 1,
                offset: 1,
                q: "q",
                without_company_override_for: "without_company_override_for",
                without_plan_entitlement_for: "without_plan_entitlement_for",
            },
        });
    });

    test("listFlags", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    created_at: "2024-01-15T09:30:00Z",
                    default_value: true,
                    description: "description",
                    feature: {
                        created_at: "2024-01-15T09:30:00Z",
                        description: "description",
                        feature_type: "feature_type",
                        icon: "icon",
                        id: "id",
                        name: "name",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    feature_id: "feature_id",
                    flag_type: "flag_type",
                    id: "id",
                    key: "key",
                    last_checked_at: "2024-01-15T09:30:00Z",
                    maintainer_id: "maintainer_id",
                    name: "name",
                    rules: [
                        {
                            condition_groups: [
                                {
                                    conditions: [
                                        {
                                            condition_type: "condition_type",
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            operator: "operator",
                                            resource_ids: ["resource_ids"],
                                            resources: [{ id: "id", name: "name" }],
                                            rule_id: "rule_id",
                                            trait_value: "trait_value",
                                            updated_at: "2024-01-15T09:30:00Z",
                                        },
                                    ],
                                    created_at: "2024-01-15T09:30:00Z",
                                    environment_id: "environment_id",
                                    id: "id",
                                    rule_id: "rule_id",
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                            ],
                            conditions: [
                                {
                                    condition_type: "condition_type",
                                    created_at: "2024-01-15T09:30:00Z",
                                    environment_id: "environment_id",
                                    id: "id",
                                    operator: "operator",
                                    resource_ids: ["resource_ids"],
                                    resources: [{ id: "id", name: "name" }],
                                    rule_id: "rule_id",
                                    trait_value: "trait_value",
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                            ],
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            id: "id",
                            name: "name",
                            priority: 1,
                            rule_type: "rule_type",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: true,
                        },
                    ],
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: { feature_id: "feature_id", ids: ["ids"], limit: 1, offset: 1, q: "q" },
        };
        server.mockEndpoint().get("/flags").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.features.listFlags();
        expect(response).toEqual({
            data: [
                {
                    created_at: "2024-01-15T09:30:00Z",
                    default_value: true,
                    description: "description",
                    feature: {
                        created_at: "2024-01-15T09:30:00Z",
                        description: "description",
                        feature_type: "feature_type",
                        icon: "icon",
                        id: "id",
                        name: "name",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    feature_id: "feature_id",
                    flag_type: "flag_type",
                    id: "id",
                    key: "key",
                    last_checked_at: "2024-01-15T09:30:00Z",
                    maintainer_id: "maintainer_id",
                    name: "name",
                    rules: [
                        {
                            condition_groups: [
                                {
                                    conditions: [
                                        {
                                            condition_type: "condition_type",
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            operator: "operator",
                                            resource_ids: ["resource_ids"],
                                            resources: [
                                                {
                                                    id: "id",
                                                    name: "name",
                                                },
                                            ],
                                            rule_id: "rule_id",
                                            trait_value: "trait_value",
                                            updated_at: "2024-01-15T09:30:00Z",
                                        },
                                    ],
                                    created_at: "2024-01-15T09:30:00Z",
                                    environment_id: "environment_id",
                                    id: "id",
                                    rule_id: "rule_id",
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                            ],
                            conditions: [
                                {
                                    condition_type: "condition_type",
                                    created_at: "2024-01-15T09:30:00Z",
                                    environment_id: "environment_id",
                                    id: "id",
                                    operator: "operator",
                                    resource_ids: ["resource_ids"],
                                    resources: [
                                        {
                                            id: "id",
                                            name: "name",
                                        },
                                    ],
                                    rule_id: "rule_id",
                                    trait_value: "trait_value",
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                            ],
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            id: "id",
                            name: "name",
                            priority: 1,
                            rule_type: "rule_type",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: true,
                        },
                    ],
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: {
                feature_id: "feature_id",
                ids: ["ids"],
                limit: 1,
                offset: 1,
                q: "q",
            },
        });
    });

    test("createFlag", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            default_value: true,
            description: "description",
            flag_type: "boolean",
            key: "key",
            name: "name",
        };
        const rawResponseBody = {
            data: {
                created_at: "2024-01-15T09:30:00Z",
                default_value: true,
                description: "description",
                feature: {
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    event_subtype: "event_subtype",
                    feature_type: "feature_type",
                    icon: "icon",
                    id: "id",
                    lifecycle_phase: "lifecycle_phase",
                    maintainer_id: "maintainer_id",
                    name: "name",
                    plural_name: "plural_name",
                    singular_name: "singular_name",
                    trait_id: "trait_id",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                feature_id: "feature_id",
                flag_type: "flag_type",
                id: "id",
                key: "key",
                last_checked_at: "2024-01-15T09:30:00Z",
                maintainer_id: "maintainer_id",
                name: "name",
                rules: [
                    {
                        condition_groups: [
                            {
                                conditions: [
                                    {
                                        condition_type: "condition_type",
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        operator: "operator",
                                        resource_ids: ["resource_ids"],
                                        resources: [{ id: "id", name: "name" }],
                                        rule_id: "rule_id",
                                        trait_value: "trait_value",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                ],
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                id: "id",
                                rule_id: "rule_id",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        conditions: [
                            {
                                condition_type: "condition_type",
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                id: "id",
                                operator: "operator",
                                resource_ids: ["resource_ids"],
                                resources: [{ id: "id", name: "name" }],
                                rule_id: "rule_id",
                                trait_value: "trait_value",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        id: "id",
                        name: "name",
                        priority: 1,
                        rule_type: "rule_type",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: true,
                    },
                ],
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/flags")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.features.createFlag({
            default_value: true,
            description: "description",
            flag_type: "boolean",
            key: "key",
            name: "name",
        });
        expect(response).toEqual({
            data: {
                created_at: "2024-01-15T09:30:00Z",
                default_value: true,
                description: "description",
                feature: {
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    event_subtype: "event_subtype",
                    feature_type: "feature_type",
                    icon: "icon",
                    id: "id",
                    lifecycle_phase: "lifecycle_phase",
                    maintainer_id: "maintainer_id",
                    name: "name",
                    plural_name: "plural_name",
                    singular_name: "singular_name",
                    trait_id: "trait_id",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                feature_id: "feature_id",
                flag_type: "flag_type",
                id: "id",
                key: "key",
                last_checked_at: "2024-01-15T09:30:00Z",
                maintainer_id: "maintainer_id",
                name: "name",
                rules: [
                    {
                        condition_groups: [
                            {
                                conditions: [
                                    {
                                        condition_type: "condition_type",
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        operator: "operator",
                                        resource_ids: ["resource_ids"],
                                        resources: [
                                            {
                                                id: "id",
                                                name: "name",
                                            },
                                        ],
                                        rule_id: "rule_id",
                                        trait_value: "trait_value",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                ],
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                id: "id",
                                rule_id: "rule_id",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        conditions: [
                            {
                                condition_type: "condition_type",
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                id: "id",
                                operator: "operator",
                                resource_ids: ["resource_ids"],
                                resources: [
                                    {
                                        id: "id",
                                        name: "name",
                                    },
                                ],
                                rule_id: "rule_id",
                                trait_value: "trait_value",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        id: "id",
                        name: "name",
                        priority: 1,
                        rule_type: "rule_type",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: true,
                    },
                ],
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("getFlag", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                created_at: "2024-01-15T09:30:00Z",
                default_value: true,
                description: "description",
                feature: {
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    event_subtype: "event_subtype",
                    feature_type: "feature_type",
                    icon: "icon",
                    id: "id",
                    lifecycle_phase: "lifecycle_phase",
                    maintainer_id: "maintainer_id",
                    name: "name",
                    plural_name: "plural_name",
                    singular_name: "singular_name",
                    trait_id: "trait_id",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                feature_id: "feature_id",
                flag_type: "flag_type",
                id: "id",
                key: "key",
                last_checked_at: "2024-01-15T09:30:00Z",
                maintainer_id: "maintainer_id",
                name: "name",
                rules: [
                    {
                        condition_groups: [
                            {
                                conditions: [
                                    {
                                        condition_type: "condition_type",
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        operator: "operator",
                                        resource_ids: ["resource_ids"],
                                        resources: [{ id: "id", name: "name" }],
                                        rule_id: "rule_id",
                                        trait_value: "trait_value",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                ],
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                id: "id",
                                rule_id: "rule_id",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        conditions: [
                            {
                                condition_type: "condition_type",
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                id: "id",
                                operator: "operator",
                                resource_ids: ["resource_ids"],
                                resources: [{ id: "id", name: "name" }],
                                rule_id: "rule_id",
                                trait_value: "trait_value",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        id: "id",
                        name: "name",
                        priority: 1,
                        rule_type: "rule_type",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: true,
                    },
                ],
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server.mockEndpoint().get("/flags/flag_id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.features.getFlag("flag_id");
        expect(response).toEqual({
            data: {
                created_at: "2024-01-15T09:30:00Z",
                default_value: true,
                description: "description",
                feature: {
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    event_subtype: "event_subtype",
                    feature_type: "feature_type",
                    icon: "icon",
                    id: "id",
                    lifecycle_phase: "lifecycle_phase",
                    maintainer_id: "maintainer_id",
                    name: "name",
                    plural_name: "plural_name",
                    singular_name: "singular_name",
                    trait_id: "trait_id",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                feature_id: "feature_id",
                flag_type: "flag_type",
                id: "id",
                key: "key",
                last_checked_at: "2024-01-15T09:30:00Z",
                maintainer_id: "maintainer_id",
                name: "name",
                rules: [
                    {
                        condition_groups: [
                            {
                                conditions: [
                                    {
                                        condition_type: "condition_type",
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        operator: "operator",
                                        resource_ids: ["resource_ids"],
                                        resources: [
                                            {
                                                id: "id",
                                                name: "name",
                                            },
                                        ],
                                        rule_id: "rule_id",
                                        trait_value: "trait_value",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                ],
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                id: "id",
                                rule_id: "rule_id",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        conditions: [
                            {
                                condition_type: "condition_type",
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                id: "id",
                                operator: "operator",
                                resource_ids: ["resource_ids"],
                                resources: [
                                    {
                                        id: "id",
                                        name: "name",
                                    },
                                ],
                                rule_id: "rule_id",
                                trait_value: "trait_value",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        id: "id",
                        name: "name",
                        priority: 1,
                        rule_type: "rule_type",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: true,
                    },
                ],
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("updateFlag", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            default_value: true,
            description: "description",
            flag_type: "boolean",
            key: "key",
            name: "name",
        };
        const rawResponseBody = {
            data: {
                created_at: "2024-01-15T09:30:00Z",
                default_value: true,
                description: "description",
                feature: {
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    event_subtype: "event_subtype",
                    feature_type: "feature_type",
                    icon: "icon",
                    id: "id",
                    lifecycle_phase: "lifecycle_phase",
                    maintainer_id: "maintainer_id",
                    name: "name",
                    plural_name: "plural_name",
                    singular_name: "singular_name",
                    trait_id: "trait_id",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                feature_id: "feature_id",
                flag_type: "flag_type",
                id: "id",
                key: "key",
                last_checked_at: "2024-01-15T09:30:00Z",
                maintainer_id: "maintainer_id",
                name: "name",
                rules: [
                    {
                        condition_groups: [
                            {
                                conditions: [
                                    {
                                        condition_type: "condition_type",
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        operator: "operator",
                                        resource_ids: ["resource_ids"],
                                        resources: [{ id: "id", name: "name" }],
                                        rule_id: "rule_id",
                                        trait_value: "trait_value",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                ],
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                id: "id",
                                rule_id: "rule_id",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        conditions: [
                            {
                                condition_type: "condition_type",
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                id: "id",
                                operator: "operator",
                                resource_ids: ["resource_ids"],
                                resources: [{ id: "id", name: "name" }],
                                rule_id: "rule_id",
                                trait_value: "trait_value",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        id: "id",
                        name: "name",
                        priority: 1,
                        rule_type: "rule_type",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: true,
                    },
                ],
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .put("/flags/flag_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.features.updateFlag("flag_id", {
            default_value: true,
            description: "description",
            flag_type: "boolean",
            key: "key",
            name: "name",
        });
        expect(response).toEqual({
            data: {
                created_at: "2024-01-15T09:30:00Z",
                default_value: true,
                description: "description",
                feature: {
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    event_subtype: "event_subtype",
                    feature_type: "feature_type",
                    icon: "icon",
                    id: "id",
                    lifecycle_phase: "lifecycle_phase",
                    maintainer_id: "maintainer_id",
                    name: "name",
                    plural_name: "plural_name",
                    singular_name: "singular_name",
                    trait_id: "trait_id",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                feature_id: "feature_id",
                flag_type: "flag_type",
                id: "id",
                key: "key",
                last_checked_at: "2024-01-15T09:30:00Z",
                maintainer_id: "maintainer_id",
                name: "name",
                rules: [
                    {
                        condition_groups: [
                            {
                                conditions: [
                                    {
                                        condition_type: "condition_type",
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        operator: "operator",
                                        resource_ids: ["resource_ids"],
                                        resources: [
                                            {
                                                id: "id",
                                                name: "name",
                                            },
                                        ],
                                        rule_id: "rule_id",
                                        trait_value: "trait_value",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                ],
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                id: "id",
                                rule_id: "rule_id",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        conditions: [
                            {
                                condition_type: "condition_type",
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                id: "id",
                                operator: "operator",
                                resource_ids: ["resource_ids"],
                                resources: [
                                    {
                                        id: "id",
                                        name: "name",
                                    },
                                ],
                                rule_id: "rule_id",
                                trait_value: "trait_value",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        id: "id",
                        name: "name",
                        priority: 1,
                        rule_type: "rule_type",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: true,
                    },
                ],
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("deleteFlag", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { data: { deleted: true }, params: { key: "value" } };
        server.mockEndpoint().delete("/flags/flag_id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.features.deleteFlag("flag_id");
        expect(response).toEqual({
            data: {
                deleted: true,
            },
            params: {
                key: "value",
            },
        });
    });

    test("updateFlagRules", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            rules: [
                {
                    condition_groups: [
                        { conditions: [{ condition_type: "company", operator: "eq", resource_ids: ["resource_ids"] }] },
                    ],
                    conditions: [{ condition_type: "company", operator: "eq", resource_ids: ["resource_ids"] }],
                    name: "name",
                    priority: 1,
                    value: true,
                },
            ],
        };
        const rawResponseBody = {
            data: {
                flag: {
                    created_at: "2024-01-15T09:30:00Z",
                    default_value: true,
                    description: "description",
                    feature_id: "feature_id",
                    flag_type: "flag_type",
                    id: "id",
                    key: "key",
                    maintainer_id: "maintainer_id",
                    name: "name",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                rules: [
                    {
                        condition_groups: [
                            {
                                conditions: [
                                    {
                                        condition_type: "condition_type",
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        operator: "operator",
                                        resource_ids: ["resource_ids"],
                                        resources: [{ id: "id", name: "name" }],
                                        rule_id: "rule_id",
                                        trait_value: "trait_value",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                ],
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                id: "id",
                                rule_id: "rule_id",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        conditions: [
                            {
                                condition_type: "condition_type",
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                id: "id",
                                operator: "operator",
                                resource_ids: ["resource_ids"],
                                resources: [{ id: "id", name: "name" }],
                                rule_id: "rule_id",
                                trait_value: "trait_value",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        id: "id",
                        name: "name",
                        priority: 1,
                        rule_type: "rule_type",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: true,
                    },
                ],
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .put("/flags/flag_id/rules")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.features.updateFlagRules("flag_id", {
            rules: [
                {
                    condition_groups: [
                        {
                            conditions: [
                                {
                                    condition_type: "company",
                                    operator: "eq",
                                    resource_ids: ["resource_ids"],
                                },
                            ],
                        },
                    ],
                    conditions: [
                        {
                            condition_type: "company",
                            operator: "eq",
                            resource_ids: ["resource_ids"],
                        },
                    ],
                    name: "name",
                    priority: 1,
                    value: true,
                },
            ],
        });
        expect(response).toEqual({
            data: {
                flag: {
                    created_at: "2024-01-15T09:30:00Z",
                    default_value: true,
                    description: "description",
                    feature_id: "feature_id",
                    flag_type: "flag_type",
                    id: "id",
                    key: "key",
                    maintainer_id: "maintainer_id",
                    name: "name",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                rules: [
                    {
                        condition_groups: [
                            {
                                conditions: [
                                    {
                                        condition_type: "condition_type",
                                        created_at: "2024-01-15T09:30:00Z",
                                        environment_id: "environment_id",
                                        id: "id",
                                        operator: "operator",
                                        resource_ids: ["resource_ids"],
                                        resources: [
                                            {
                                                id: "id",
                                                name: "name",
                                            },
                                        ],
                                        rule_id: "rule_id",
                                        trait_value: "trait_value",
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                ],
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                id: "id",
                                rule_id: "rule_id",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        conditions: [
                            {
                                condition_type: "condition_type",
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                id: "id",
                                operator: "operator",
                                resource_ids: ["resource_ids"],
                                resources: [
                                    {
                                        id: "id",
                                        name: "name",
                                    },
                                ],
                                rule_id: "rule_id",
                                trait_value: "trait_value",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        id: "id",
                        name: "name",
                        priority: 1,
                        rule_type: "rule_type",
                        updated_at: "2024-01-15T09:30:00Z",
                        value: true,
                    },
                ],
            },
            params: {
                key: "value",
            },
        });
    });

    test("checkFlag", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            data: {
                company_id: "company_id",
                error: "error",
                feature_allocation: 1,
                feature_usage: 1,
                feature_usage_event: "feature_usage_event",
                feature_usage_period: "feature_usage_period",
                feature_usage_reset_at: "2024-01-15T09:30:00Z",
                flag: "flag",
                flag_id: "flag_id",
                reason: "reason",
                rule_id: "rule_id",
                rule_type: "rule_type",
                user_id: "user_id",
                value: true,
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/flags/key/check")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.features.checkFlag("key", {});
        expect(response).toEqual({
            data: {
                company_id: "company_id",
                error: "error",
                feature_allocation: 1,
                feature_usage: 1,
                feature_usage_event: "feature_usage_event",
                feature_usage_period: "feature_usage_period",
                feature_usage_reset_at: "2024-01-15T09:30:00Z",
                flag: "flag",
                flag_id: "flag_id",
                reason: "reason",
                rule_id: "rule_id",
                rule_type: "rule_type",
                user_id: "user_id",
                value: true,
            },
            params: {
                key: "value",
            },
        });
    });

    test("checkFlags", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            data: { flags: [{ flag: "flag", reason: "reason", value: true }] },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/flags/check")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.features.checkFlags({});
        expect(response).toEqual({
            data: {
                flags: [
                    {
                        flag: "flag",
                        reason: "reason",
                        value: true,
                    },
                ],
            },
            params: {
                key: "value",
            },
        });
    });

    test("countFlags", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: { count: 1 },
            params: { feature_id: "feature_id", ids: ["ids"], limit: 1, offset: 1, q: "q" },
        };
        server.mockEndpoint().get("/flags/count").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.features.countFlags();
        expect(response).toEqual({
            data: {
                count: 1,
            },
            params: {
                feature_id: "feature_id",
                ids: ["ids"],
                limit: 1,
                offset: 1,
                q: "q",
            },
        });
    });
});
