// This file was auto-generated by Fern from our API Definition.

import * as Schematic from "../../src/api/index";
import { SchematicClient } from "../../src/Client";
import { mockServerPool } from "../mock-server/MockServerPool";

describe("Components", () => {
    test("listComponents (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    ast: { key: 1.1 },
                    created_at: "2024-01-15T09:30:00Z",
                    id: "id",
                    name: "name",
                    state: "state",
                    type: "type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: { limit: 1, offset: 1, q: "q" },
        };
        server.mockEndpoint().get("/components").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.components.listComponents({
            q: "q",
            limit: 1,
            offset: 1,
        });
        expect(response).toEqual({
            data: [
                {
                    ast: {
                        key: 1.1,
                    },
                    created_at: "2024-01-15T09:30:00Z",
                    id: "id",
                    name: "name",
                    state: "state",
                    type: "type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: {
                limit: 1,
                offset: 1,
                q: "q",
            },
        });
    });

    test("listComponents (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/components").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.components.listComponents();
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("listComponents (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/components").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.components.listComponents();
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("listComponents (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/components").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.components.listComponents();
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("listComponents (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/components").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.components.listComponents();
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("listComponents (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/components").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.components.listComponents();
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("createComponent (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { entity_type: "entitlement", name: "name" };
        const rawResponseBody = {
            data: {
                ast: { key: 1.1 },
                created_at: "2024-01-15T09:30:00Z",
                id: "id",
                name: "name",
                state: "state",
                type: "type",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/components")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.components.createComponent({
            entity_type: "entitlement",
            name: "name",
        });
        expect(response).toEqual({
            data: {
                ast: {
                    key: 1.1,
                },
                created_at: "2024-01-15T09:30:00Z",
                id: "id",
                name: "name",
                state: "state",
                type: "type",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("createComponent (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { entity_type: "entitlement", name: "name" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/components")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.components.createComponent({
                entity_type: "entitlement",
                name: "name",
            });
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("createComponent (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { entity_type: "entitlement", name: "name" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/components")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.components.createComponent({
                entity_type: "entitlement",
                name: "name",
            });
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("createComponent (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { entity_type: "entitlement", name: "name" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/components")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.components.createComponent({
                entity_type: "entitlement",
                name: "name",
            });
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("createComponent (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { entity_type: "entitlement", name: "name" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/components")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.components.createComponent({
                entity_type: "entitlement",
                name: "name",
            });
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("createComponent (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { entity_type: "entitlement", name: "name" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/components")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.components.createComponent({
                entity_type: "entitlement",
                name: "name",
            });
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("getComponent (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                ast: { key: 1.1 },
                created_at: "2024-01-15T09:30:00Z",
                id: "id",
                name: "name",
                state: "state",
                type: "type",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .get("/components/component_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.components.getComponent("component_id");
        expect(response).toEqual({
            data: {
                ast: {
                    key: 1.1,
                },
                created_at: "2024-01-15T09:30:00Z",
                id: "id",
                name: "name",
                state: "state",
                type: "type",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("getComponent (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/components/component_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.components.getComponent("component_id");
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("getComponent (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/components/component_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.components.getComponent("component_id");
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("getComponent (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/components/component_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.components.getComponent("component_id");
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("getComponent (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/components/component_id")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.components.getComponent("component_id");
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("updateComponent (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            data: {
                ast: { key: 1.1 },
                created_at: "2024-01-15T09:30:00Z",
                id: "id",
                name: "name",
                state: "state",
                type: "type",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .put("/components/component_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.components.updateComponent("component_id");
        expect(response).toEqual({
            data: {
                ast: {
                    key: 1.1,
                },
                created_at: "2024-01-15T09:30:00Z",
                id: "id",
                name: "name",
                state: "state",
                type: "type",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("updateComponent (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/components/component_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.components.updateComponent("component_id");
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("updateComponent (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/components/component_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.components.updateComponent("component_id");
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("updateComponent (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/components/component_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.components.updateComponent("component_id");
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("updateComponent (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/components/component_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.components.updateComponent("component_id");
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("updateComponent (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/components/component_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.components.updateComponent("component_id");
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("deleteComponent (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { data: { deleted: true }, params: { key: "value" } };
        server
            .mockEndpoint()
            .delete("/components/component_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.components.deleteComponent("component_id");
        expect(response).toEqual({
            data: {
                deleted: true,
            },
            params: {
                key: "value",
            },
        });
    });

    test("deleteComponent (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .delete("/components/component_id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.components.deleteComponent("component_id");
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("deleteComponent (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .delete("/components/component_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.components.deleteComponent("component_id");
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("deleteComponent (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .delete("/components/component_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.components.deleteComponent("component_id");
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("deleteComponent (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .delete("/components/component_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.components.deleteComponent("component_id");
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("deleteComponent (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .delete("/components/component_id")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.components.deleteComponent("component_id");
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("countComponents (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { data: { count: 1 }, params: { limit: 1, offset: 1, q: "q" } };
        server.mockEndpoint().get("/components/count").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.components.countComponents({
            q: "q",
            limit: 1,
            offset: 1,
        });
        expect(response).toEqual({
            data: {
                count: 1,
            },
            params: {
                limit: 1,
                offset: 1,
                q: "q",
            },
        });
    });

    test("countComponents (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/components/count").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.components.countComponents();
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("countComponents (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/components/count").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.components.countComponents();
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("countComponents (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/components/count").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.components.countComponents();
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("countComponents (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/components/count").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.components.countComponents();
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("countComponents (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/components/count").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.components.countComponents();
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("previewComponentData (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                active_add_ons: [
                    {
                        charge_type: "charge_type",
                        company_can_trial: true,
                        company_count: 1,
                        compatible_plan_ids: ["compatible_plan_ids"],
                        controlled_by: "controlled_by",
                        created_at: "2024-01-15T09:30:00Z",
                        current: true,
                        custom: true,
                        description: "description",
                        entitlements: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                feature_id: "feature_id",
                                id: "id",
                                plan_id: "plan_id",
                                rule_id: "rule_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                value_type: "value_type",
                            },
                        ],
                        features: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                description: "description",
                                feature_type: "feature_type",
                                flags: [
                                    {
                                        created_at: "2024-01-15T09:30:00Z",
                                        default_value: true,
                                        description: "description",
                                        flag_type: "flag_type",
                                        id: "id",
                                        key: "key",
                                        name: "name",
                                        rules: [
                                            {
                                                condition_groups: [
                                                    {
                                                        conditions: [
                                                            {
                                                                condition_type: "condition_type",
                                                                created_at: "2024-01-15T09:30:00Z",
                                                                environment_id: "environment_id",
                                                                id: "id",
                                                                operator: "operator",
                                                                resource_ids: ["resource_ids"],
                                                                resources: [{ id: "id", name: "name" }],
                                                                rule_id: "rule_id",
                                                                trait_value: "trait_value",
                                                                updated_at: "2024-01-15T09:30:00Z",
                                                            },
                                                        ],
                                                        created_at: "2024-01-15T09:30:00Z",
                                                        environment_id: "environment_id",
                                                        id: "id",
                                                        rule_id: "rule_id",
                                                        updated_at: "2024-01-15T09:30:00Z",
                                                    },
                                                ],
                                                conditions: [
                                                    {
                                                        condition_type: "condition_type",
                                                        created_at: "2024-01-15T09:30:00Z",
                                                        environment_id: "environment_id",
                                                        id: "id",
                                                        operator: "operator",
                                                        resource_ids: ["resource_ids"],
                                                        resources: [{ id: "id", name: "name" }],
                                                        rule_id: "rule_id",
                                                        trait_value: "trait_value",
                                                        updated_at: "2024-01-15T09:30:00Z",
                                                    },
                                                ],
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                name: "name",
                                                priority: 1,
                                                rule_type: "rule_type",
                                                updated_at: "2024-01-15T09:30:00Z",
                                                value: true,
                                            },
                                        ],
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                ],
                                icon: "icon",
                                id: "id",
                                name: "name",
                                plans: [{ id: "id", name: "name" }],
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        icon: "icon",
                        id: "id",
                        included_credit_grants: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                credit_amount: 1,
                                credit_description: "credit_description",
                                credit_id: "credit_id",
                                credit_name: "credit_name",
                                id: "id",
                                plan_id: "plan_id",
                                plan_name: "plan_name",
                                reset_cadence: "reset_cadence",
                                reset_start: "reset_start",
                                reset_type: "reset_type",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        is_custom: true,
                        is_default: true,
                        is_free: true,
                        is_trialable: true,
                        name: "name",
                        plan_type: "plan_type",
                        updated_at: "2024-01-15T09:30:00Z",
                        usage_violations: [
                            {
                                access: true,
                                allocation_type: "boolean",
                                entitlement_id: "entitlement_id",
                                entitlement_type: "entitlement_type",
                            },
                        ],
                        valid: true,
                    },
                ],
                active_plans: [
                    {
                        charge_type: "charge_type",
                        company_can_trial: true,
                        company_count: 1,
                        compatible_plan_ids: ["compatible_plan_ids"],
                        controlled_by: "controlled_by",
                        created_at: "2024-01-15T09:30:00Z",
                        current: true,
                        custom: true,
                        description: "description",
                        entitlements: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                feature_id: "feature_id",
                                id: "id",
                                plan_id: "plan_id",
                                rule_id: "rule_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                value_type: "value_type",
                            },
                        ],
                        features: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                description: "description",
                                feature_type: "feature_type",
                                flags: [
                                    {
                                        created_at: "2024-01-15T09:30:00Z",
                                        default_value: true,
                                        description: "description",
                                        flag_type: "flag_type",
                                        id: "id",
                                        key: "key",
                                        name: "name",
                                        rules: [
                                            {
                                                condition_groups: [
                                                    {
                                                        conditions: [
                                                            {
                                                                condition_type: "condition_type",
                                                                created_at: "2024-01-15T09:30:00Z",
                                                                environment_id: "environment_id",
                                                                id: "id",
                                                                operator: "operator",
                                                                resource_ids: ["resource_ids"],
                                                                resources: [{ id: "id", name: "name" }],
                                                                rule_id: "rule_id",
                                                                trait_value: "trait_value",
                                                                updated_at: "2024-01-15T09:30:00Z",
                                                            },
                                                        ],
                                                        created_at: "2024-01-15T09:30:00Z",
                                                        environment_id: "environment_id",
                                                        id: "id",
                                                        rule_id: "rule_id",
                                                        updated_at: "2024-01-15T09:30:00Z",
                                                    },
                                                ],
                                                conditions: [
                                                    {
                                                        condition_type: "condition_type",
                                                        created_at: "2024-01-15T09:30:00Z",
                                                        environment_id: "environment_id",
                                                        id: "id",
                                                        operator: "operator",
                                                        resource_ids: ["resource_ids"],
                                                        resources: [{ id: "id", name: "name" }],
                                                        rule_id: "rule_id",
                                                        trait_value: "trait_value",
                                                        updated_at: "2024-01-15T09:30:00Z",
                                                    },
                                                ],
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                name: "name",
                                                priority: 1,
                                                rule_type: "rule_type",
                                                updated_at: "2024-01-15T09:30:00Z",
                                                value: true,
                                            },
                                        ],
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                ],
                                icon: "icon",
                                id: "id",
                                name: "name",
                                plans: [{ id: "id", name: "name" }],
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        icon: "icon",
                        id: "id",
                        included_credit_grants: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                credit_amount: 1,
                                credit_description: "credit_description",
                                credit_id: "credit_id",
                                credit_name: "credit_name",
                                id: "id",
                                plan_id: "plan_id",
                                plan_name: "plan_name",
                                reset_cadence: "reset_cadence",
                                reset_start: "reset_start",
                                reset_type: "reset_type",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        is_custom: true,
                        is_default: true,
                        is_free: true,
                        is_trialable: true,
                        name: "name",
                        plan_type: "plan_type",
                        updated_at: "2024-01-15T09:30:00Z",
                        usage_violations: [
                            {
                                access: true,
                                allocation_type: "boolean",
                                entitlement_id: "entitlement_id",
                                entitlement_type: "entitlement_type",
                            },
                        ],
                        valid: true,
                    },
                ],
                active_usage_based_entitlements: [{ feature_id: "feature_id", value_type: "value_type" }],
                add_on_compatibilities: [
                    { compatible_plan_ids: ["compatible_plan_ids"], source_plan_id: "source_plan_id" },
                ],
                capabilities: { badge_visibility: true, checkout: true },
                checkout_settings: {
                    collect_address: true,
                    collect_email: true,
                    collect_phone: true,
                    tax_collection_enabled: true,
                },
                company: {
                    add_ons: [{ id: "id", name: "name" }],
                    billing_credit_balances: { key: 1.1 },
                    billing_subscription: {
                        cancel_at_period_end: true,
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        discounts: [
                            {
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                is_active: true,
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        id: "id",
                        interval: "interval",
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                    },
                    billing_subscriptions: [
                        {
                            cancel_at_period_end: true,
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            customer_external_id: "customer_external_id",
                            discounts: [
                                {
                                    coupon_id: "coupon_id",
                                    coupon_name: "coupon_name",
                                    discount_external_id: "discount_external_id",
                                    duration: "duration",
                                    is_active: true,
                                    started_at: "2024-01-15T09:30:00Z",
                                    subscription_external_id: "subscription_external_id",
                                },
                            ],
                            id: "id",
                            interval: "interval",
                            period_end: 1,
                            period_start: 1,
                            products: [
                                {
                                    billing_scheme: "billing_scheme",
                                    created_at: "2024-01-15T09:30:00Z",
                                    currency: "currency",
                                    environment_id: "environment_id",
                                    external_id: "external_id",
                                    id: "id",
                                    interval: "interval",
                                    name: "name",
                                    package_size: 1,
                                    price: 1,
                                    price_external_id: "price_external_id",
                                    price_id: "price_id",
                                    price_tier: [{}],
                                    quantity: 1.1,
                                    subscription_id: "subscription_id",
                                    updated_at: "2024-01-15T09:30:00Z",
                                    usage_type: "usage_type",
                                },
                            ],
                            status: "status",
                            subscription_external_id: "subscription_external_id",
                            total_price: 1,
                        },
                    ],
                    created_at: "2024-01-15T09:30:00Z",
                    default_payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    entity_traits: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            environment_id: "environment_id",
                            id: "id",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    environment_id: "environment_id",
                    id: "id",
                    keys: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            entity_id: "entity_id",
                            entity_type: "entity_type",
                            environment_id: "environment_id",
                            id: "id",
                            key: "key",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    last_seen_at: "2024-01-15T09:30:00Z",
                    logo_url: "logo_url",
                    metrics: [
                        {
                            account_id: "account_id",
                            captured_at_max: "2024-01-15T09:30:00Z",
                            captured_at_min: "2024-01-15T09:30:00Z",
                            company_id: "company_id",
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            event_subtype: "event_subtype",
                            month_reset: "month_reset",
                            period: "period",
                            value: 1,
                        },
                    ],
                    name: "name",
                    payment_methods: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            customer_external_id: "customer_external_id",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            payment_method_type: "payment_method_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    plan: { id: "id", name: "name" },
                    plans: [{ id: "id", name: "name" }],
                    rules: [
                        {
                            account_id: "account_id",
                            condition_groups: [
                                {
                                    conditions: [
                                        {
                                            account_id: "account_id",
                                            condition_type: "condition_type",
                                            environment_id: "environment_id",
                                            id: "id",
                                            operator: "operator",
                                            resource_ids: ["resource_ids"],
                                            trait_value: "trait_value",
                                        },
                                    ],
                                },
                            ],
                            conditions: [
                                {
                                    account_id: "account_id",
                                    condition_type: "condition_type",
                                    environment_id: "environment_id",
                                    id: "id",
                                    operator: "operator",
                                    resource_ids: ["resource_ids"],
                                    trait_value: "trait_value",
                                },
                            ],
                            environment_id: "environment_id",
                            id: "id",
                            name: "name",
                            priority: 1,
                            rule_type: "rule_type",
                            value: true,
                        },
                    ],
                    traits: { key: "value" },
                    updated_at: "2024-01-15T09:30:00Z",
                    user_count: 1,
                },
                component: {
                    ast: { key: 1.1 },
                    created_at: "2024-01-15T09:30:00Z",
                    id: "id",
                    name: "name",
                    state: "state",
                    type: "type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                credit_bundles: [
                    {
                        bundle_type: "bundle_type",
                        created_at: "2024-01-15T09:30:00Z",
                        credit_id: "credit_id",
                        credit_name: "credit_name",
                        expiry_type: "expiry_type",
                        expiry_unit: "expiry_unit",
                        has_grants: true,
                        id: "id",
                        name: "name",
                        status: "status",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                credit_grants: [
                    {
                        billing_credit_id: "billing_credit_id",
                        company_id: "company_id",
                        company_name: "company_name",
                        created_at: "2024-01-15T09:30:00Z",
                        credit_description: "credit_description",
                        credit_name: "credit_name",
                        grant_reason: "grant_reason",
                        id: "id",
                        quantity: 1,
                        quantity_remaining: 1.1,
                        quantity_used: 1.1,
                        source_label: "source_label",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                default_plan: {
                    audience_type: "audience_type",
                    billing_product: {
                        account_id: "account_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        is_active: true,
                        name: "name",
                        price: 1.1,
                        prices: [
                            {
                                currency: "currency",
                                external_price_id: "external_price_id",
                                id: "id",
                                interval: "interval",
                                price: 1,
                                scheme: "scheme",
                            },
                        ],
                        product_id: "product_id",
                        quantity: 1.1,
                        subscription_count: 1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    charge_type: "charge_type",
                    company_count: 1,
                    controlled_by: "controlled_by",
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    features: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            description: "description",
                            feature_type: "feature_type",
                            flags: [
                                {
                                    created_at: "2024-01-15T09:30:00Z",
                                    default_value: true,
                                    description: "description",
                                    flag_type: "flag_type",
                                    id: "id",
                                    key: "key",
                                    name: "name",
                                    rules: [
                                        {
                                            condition_groups: [
                                                {
                                                    conditions: [
                                                        {
                                                            condition_type: "condition_type",
                                                            created_at: "2024-01-15T09:30:00Z",
                                                            environment_id: "environment_id",
                                                            id: "id",
                                                            operator: "operator",
                                                            resource_ids: ["resource_ids"],
                                                            resources: [{ id: "id", name: "name" }],
                                                            rule_id: "rule_id",
                                                            trait_value: "trait_value",
                                                            updated_at: "2024-01-15T09:30:00Z",
                                                        },
                                                    ],
                                                    created_at: "2024-01-15T09:30:00Z",
                                                    environment_id: "environment_id",
                                                    id: "id",
                                                    rule_id: "rule_id",
                                                    updated_at: "2024-01-15T09:30:00Z",
                                                },
                                            ],
                                            conditions: [
                                                {
                                                    condition_type: "condition_type",
                                                    created_at: "2024-01-15T09:30:00Z",
                                                    environment_id: "environment_id",
                                                    id: "id",
                                                    operator: "operator",
                                                    resource_ids: ["resource_ids"],
                                                    resources: [{ id: "id", name: "name" }],
                                                    rule_id: "rule_id",
                                                    trait_value: "trait_value",
                                                    updated_at: "2024-01-15T09:30:00Z",
                                                },
                                            ],
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            name: "name",
                                            priority: 1,
                                            rule_type: "rule_type",
                                            updated_at: "2024-01-15T09:30:00Z",
                                            value: true,
                                        },
                                    ],
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                            ],
                            icon: "icon",
                            id: "id",
                            name: "name",
                            plans: [{ id: "id", name: "name" }],
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    icon: "icon",
                    id: "id",
                    included_credit_grants: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            credit_amount: 1,
                            credit_id: "credit_id",
                            credit_name: "credit_name",
                            id: "id",
                            plan_id: "plan_id",
                            plan_name: "plan_name",
                            reset_cadence: "reset_cadence",
                            reset_start: "reset_start",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    is_default: true,
                    is_free: true,
                    is_trialable: true,
                    monthly_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    name: "name",
                    one_time_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    plan_type: "plan_type",
                    trial_days: 1,
                    updated_at: "2024-01-15T09:30:00Z",
                    yearly_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                },
                feature_usage: {
                    features: [
                        {
                            access: true,
                            allocation_type: "boolean",
                            entitlement_id: "entitlement_id",
                            entitlement_type: "entitlement_type",
                        },
                    ],
                },
                invoices: [
                    {
                        amount_due: 1,
                        amount_paid: 1,
                        amount_remaining: 1,
                        collection_method: "collection_method",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        id: "id",
                        subtotal: 1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                post_trial_plan: {
                    audience_type: "audience_type",
                    billing_product: {
                        account_id: "account_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        is_active: true,
                        name: "name",
                        price: 1.1,
                        prices: [
                            {
                                currency: "currency",
                                external_price_id: "external_price_id",
                                id: "id",
                                interval: "interval",
                                price: 1,
                                scheme: "scheme",
                            },
                        ],
                        product_id: "product_id",
                        quantity: 1.1,
                        subscription_count: 1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    charge_type: "charge_type",
                    company_count: 1,
                    controlled_by: "controlled_by",
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    features: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            description: "description",
                            feature_type: "feature_type",
                            flags: [
                                {
                                    created_at: "2024-01-15T09:30:00Z",
                                    default_value: true,
                                    description: "description",
                                    flag_type: "flag_type",
                                    id: "id",
                                    key: "key",
                                    name: "name",
                                    rules: [
                                        {
                                            condition_groups: [
                                                {
                                                    conditions: [
                                                        {
                                                            condition_type: "condition_type",
                                                            created_at: "2024-01-15T09:30:00Z",
                                                            environment_id: "environment_id",
                                                            id: "id",
                                                            operator: "operator",
                                                            resource_ids: ["resource_ids"],
                                                            resources: [{ id: "id", name: "name" }],
                                                            rule_id: "rule_id",
                                                            trait_value: "trait_value",
                                                            updated_at: "2024-01-15T09:30:00Z",
                                                        },
                                                    ],
                                                    created_at: "2024-01-15T09:30:00Z",
                                                    environment_id: "environment_id",
                                                    id: "id",
                                                    rule_id: "rule_id",
                                                    updated_at: "2024-01-15T09:30:00Z",
                                                },
                                            ],
                                            conditions: [
                                                {
                                                    condition_type: "condition_type",
                                                    created_at: "2024-01-15T09:30:00Z",
                                                    environment_id: "environment_id",
                                                    id: "id",
                                                    operator: "operator",
                                                    resource_ids: ["resource_ids"],
                                                    resources: [{ id: "id", name: "name" }],
                                                    rule_id: "rule_id",
                                                    trait_value: "trait_value",
                                                    updated_at: "2024-01-15T09:30:00Z",
                                                },
                                            ],
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            name: "name",
                                            priority: 1,
                                            rule_type: "rule_type",
                                            updated_at: "2024-01-15T09:30:00Z",
                                            value: true,
                                        },
                                    ],
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                            ],
                            icon: "icon",
                            id: "id",
                            name: "name",
                            plans: [{ id: "id", name: "name" }],
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    icon: "icon",
                    id: "id",
                    included_credit_grants: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            credit_amount: 1,
                            credit_id: "credit_id",
                            credit_name: "credit_name",
                            id: "id",
                            plan_id: "plan_id",
                            plan_name: "plan_name",
                            reset_cadence: "reset_cadence",
                            reset_start: "reset_start",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    is_default: true,
                    is_free: true,
                    is_trialable: true,
                    monthly_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    name: "name",
                    one_time_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    plan_type: "plan_type",
                    trial_days: 1,
                    updated_at: "2024-01-15T09:30:00Z",
                    yearly_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                },
                show_credits: true,
                show_period_toggle: true,
                show_zero_price_as_free: true,
                stripe_embed: {
                    account_id: "account_id",
                    publishable_key: "publishable_key",
                    schematic_publishable_key: "schematic_publishable_key",
                    setup_intent_client_secret: "setup_intent_client_secret",
                },
                subscription: {
                    cancel_at: "2024-01-15T09:30:00Z",
                    cancel_at_period_end: true,
                    currency: "currency",
                    customer_external_id: "customer_external_id",
                    discounts: [
                        {
                            coupon_id: "coupon_id",
                            coupon_name: "coupon_name",
                            discount_external_id: "discount_external_id",
                            duration: "duration",
                            is_active: true,
                            started_at: "2024-01-15T09:30:00Z",
                            subscription_external_id: "subscription_external_id",
                        },
                    ],
                    expired_at: "2024-01-15T09:30:00Z",
                    interval: "interval",
                    latest_invoice: {
                        amount_due: 1,
                        amount_paid: 1,
                        amount_remaining: 1,
                        collection_method: "collection_method",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        id: "id",
                        subtotal: 1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    products: [
                        {
                            billing_scheme: "billing_scheme",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            interval: "interval",
                            name: "name",
                            package_size: 1,
                            price: 1,
                            price_external_id: "price_external_id",
                            price_id: "price_id",
                            price_tier: [{}],
                            quantity: 1.1,
                            subscription_id: "subscription_id",
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_type: "usage_type",
                        },
                    ],
                    status: "status",
                    subscription_external_id: "subscription_external_id",
                    total_price: 1,
                    trial_end: "2024-01-15T09:30:00Z",
                },
                trial_payment_method_required: true,
                upcoming_invoice: {
                    amount_due: 1,
                    amount_paid: 1,
                    amount_remaining: 1,
                    collection_method: "collection_method",
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    customer_external_id: "customer_external_id",
                    due_date: "2024-01-15T09:30:00Z",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    id: "id",
                    payment_method_external_id: "payment_method_external_id",
                    subscription_external_id: "subscription_external_id",
                    subtotal: 1,
                    updated_at: "2024-01-15T09:30:00Z",
                    url: "url",
                },
            },
            params: { company_id: "company_id", component_id: "component_id" },
        };
        server
            .mockEndpoint()
            .get("/components/preview-data")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.components.previewComponentData({
            company_id: "company_id",
            component_id: "component_id",
        });
        expect(response).toEqual({
            data: {
                active_add_ons: [
                    {
                        charge_type: "charge_type",
                        company_can_trial: true,
                        company_count: 1,
                        compatible_plan_ids: ["compatible_plan_ids"],
                        controlled_by: "controlled_by",
                        created_at: "2024-01-15T09:30:00Z",
                        current: true,
                        custom: true,
                        description: "description",
                        entitlements: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                feature_id: "feature_id",
                                id: "id",
                                plan_id: "plan_id",
                                rule_id: "rule_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                value_type: "value_type",
                            },
                        ],
                        features: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                description: "description",
                                feature_type: "feature_type",
                                flags: [
                                    {
                                        created_at: "2024-01-15T09:30:00Z",
                                        default_value: true,
                                        description: "description",
                                        flag_type: "flag_type",
                                        id: "id",
                                        key: "key",
                                        name: "name",
                                        rules: [
                                            {
                                                condition_groups: [
                                                    {
                                                        conditions: [
                                                            {
                                                                condition_type: "condition_type",
                                                                created_at: "2024-01-15T09:30:00Z",
                                                                environment_id: "environment_id",
                                                                id: "id",
                                                                operator: "operator",
                                                                resource_ids: ["resource_ids"],
                                                                resources: [
                                                                    {
                                                                        id: "id",
                                                                        name: "name",
                                                                    },
                                                                ],
                                                                rule_id: "rule_id",
                                                                trait_value: "trait_value",
                                                                updated_at: "2024-01-15T09:30:00Z",
                                                            },
                                                        ],
                                                        created_at: "2024-01-15T09:30:00Z",
                                                        environment_id: "environment_id",
                                                        id: "id",
                                                        rule_id: "rule_id",
                                                        updated_at: "2024-01-15T09:30:00Z",
                                                    },
                                                ],
                                                conditions: [
                                                    {
                                                        condition_type: "condition_type",
                                                        created_at: "2024-01-15T09:30:00Z",
                                                        environment_id: "environment_id",
                                                        id: "id",
                                                        operator: "operator",
                                                        resource_ids: ["resource_ids"],
                                                        resources: [
                                                            {
                                                                id: "id",
                                                                name: "name",
                                                            },
                                                        ],
                                                        rule_id: "rule_id",
                                                        trait_value: "trait_value",
                                                        updated_at: "2024-01-15T09:30:00Z",
                                                    },
                                                ],
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                name: "name",
                                                priority: 1,
                                                rule_type: "rule_type",
                                                updated_at: "2024-01-15T09:30:00Z",
                                                value: true,
                                            },
                                        ],
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                ],
                                icon: "icon",
                                id: "id",
                                name: "name",
                                plans: [
                                    {
                                        id: "id",
                                        name: "name",
                                    },
                                ],
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        icon: "icon",
                        id: "id",
                        included_credit_grants: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                credit_amount: 1,
                                credit_description: "credit_description",
                                credit_id: "credit_id",
                                credit_name: "credit_name",
                                id: "id",
                                plan_id: "plan_id",
                                plan_name: "plan_name",
                                reset_cadence: "reset_cadence",
                                reset_start: "reset_start",
                                reset_type: "reset_type",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        is_custom: true,
                        is_default: true,
                        is_free: true,
                        is_trialable: true,
                        name: "name",
                        plan_type: "plan_type",
                        updated_at: "2024-01-15T09:30:00Z",
                        usage_violations: [
                            {
                                access: true,
                                allocation_type: "boolean",
                                entitlement_id: "entitlement_id",
                                entitlement_type: "entitlement_type",
                            },
                        ],
                        valid: true,
                    },
                ],
                active_plans: [
                    {
                        charge_type: "charge_type",
                        company_can_trial: true,
                        company_count: 1,
                        compatible_plan_ids: ["compatible_plan_ids"],
                        controlled_by: "controlled_by",
                        created_at: "2024-01-15T09:30:00Z",
                        current: true,
                        custom: true,
                        description: "description",
                        entitlements: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                environment_id: "environment_id",
                                feature_id: "feature_id",
                                id: "id",
                                plan_id: "plan_id",
                                rule_id: "rule_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                value_type: "value_type",
                            },
                        ],
                        features: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                description: "description",
                                feature_type: "feature_type",
                                flags: [
                                    {
                                        created_at: "2024-01-15T09:30:00Z",
                                        default_value: true,
                                        description: "description",
                                        flag_type: "flag_type",
                                        id: "id",
                                        key: "key",
                                        name: "name",
                                        rules: [
                                            {
                                                condition_groups: [
                                                    {
                                                        conditions: [
                                                            {
                                                                condition_type: "condition_type",
                                                                created_at: "2024-01-15T09:30:00Z",
                                                                environment_id: "environment_id",
                                                                id: "id",
                                                                operator: "operator",
                                                                resource_ids: ["resource_ids"],
                                                                resources: [
                                                                    {
                                                                        id: "id",
                                                                        name: "name",
                                                                    },
                                                                ],
                                                                rule_id: "rule_id",
                                                                trait_value: "trait_value",
                                                                updated_at: "2024-01-15T09:30:00Z",
                                                            },
                                                        ],
                                                        created_at: "2024-01-15T09:30:00Z",
                                                        environment_id: "environment_id",
                                                        id: "id",
                                                        rule_id: "rule_id",
                                                        updated_at: "2024-01-15T09:30:00Z",
                                                    },
                                                ],
                                                conditions: [
                                                    {
                                                        condition_type: "condition_type",
                                                        created_at: "2024-01-15T09:30:00Z",
                                                        environment_id: "environment_id",
                                                        id: "id",
                                                        operator: "operator",
                                                        resource_ids: ["resource_ids"],
                                                        resources: [
                                                            {
                                                                id: "id",
                                                                name: "name",
                                                            },
                                                        ],
                                                        rule_id: "rule_id",
                                                        trait_value: "trait_value",
                                                        updated_at: "2024-01-15T09:30:00Z",
                                                    },
                                                ],
                                                created_at: "2024-01-15T09:30:00Z",
                                                environment_id: "environment_id",
                                                id: "id",
                                                name: "name",
                                                priority: 1,
                                                rule_type: "rule_type",
                                                updated_at: "2024-01-15T09:30:00Z",
                                                value: true,
                                            },
                                        ],
                                        updated_at: "2024-01-15T09:30:00Z",
                                    },
                                ],
                                icon: "icon",
                                id: "id",
                                name: "name",
                                plans: [
                                    {
                                        id: "id",
                                        name: "name",
                                    },
                                ],
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        icon: "icon",
                        id: "id",
                        included_credit_grants: [
                            {
                                created_at: "2024-01-15T09:30:00Z",
                                credit_amount: 1,
                                credit_description: "credit_description",
                                credit_id: "credit_id",
                                credit_name: "credit_name",
                                id: "id",
                                plan_id: "plan_id",
                                plan_name: "plan_name",
                                reset_cadence: "reset_cadence",
                                reset_start: "reset_start",
                                reset_type: "reset_type",
                                updated_at: "2024-01-15T09:30:00Z",
                            },
                        ],
                        is_custom: true,
                        is_default: true,
                        is_free: true,
                        is_trialable: true,
                        name: "name",
                        plan_type: "plan_type",
                        updated_at: "2024-01-15T09:30:00Z",
                        usage_violations: [
                            {
                                access: true,
                                allocation_type: "boolean",
                                entitlement_id: "entitlement_id",
                                entitlement_type: "entitlement_type",
                            },
                        ],
                        valid: true,
                    },
                ],
                active_usage_based_entitlements: [
                    {
                        feature_id: "feature_id",
                        value_type: "value_type",
                    },
                ],
                add_on_compatibilities: [
                    {
                        compatible_plan_ids: ["compatible_plan_ids"],
                        source_plan_id: "source_plan_id",
                    },
                ],
                capabilities: {
                    badge_visibility: true,
                    checkout: true,
                },
                checkout_settings: {
                    collect_address: true,
                    collect_email: true,
                    collect_phone: true,
                    tax_collection_enabled: true,
                },
                company: {
                    add_ons: [
                        {
                            id: "id",
                            name: "name",
                        },
                    ],
                    billing_credit_balances: {
                        key: 1.1,
                    },
                    billing_subscription: {
                        cancel_at_period_end: true,
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        discounts: [
                            {
                                coupon_id: "coupon_id",
                                coupon_name: "coupon_name",
                                discount_external_id: "discount_external_id",
                                duration: "duration",
                                is_active: true,
                                started_at: "2024-01-15T09:30:00Z",
                                subscription_external_id: "subscription_external_id",
                            },
                        ],
                        id: "id",
                        interval: "interval",
                        period_end: 1,
                        period_start: 1,
                        products: [
                            {
                                billing_scheme: "billing_scheme",
                                created_at: "2024-01-15T09:30:00Z",
                                currency: "currency",
                                environment_id: "environment_id",
                                external_id: "external_id",
                                id: "id",
                                interval: "interval",
                                name: "name",
                                package_size: 1,
                                price: 1,
                                price_external_id: "price_external_id",
                                price_id: "price_id",
                                price_tier: [{}],
                                quantity: 1.1,
                                subscription_id: "subscription_id",
                                updated_at: "2024-01-15T09:30:00Z",
                                usage_type: "usage_type",
                            },
                        ],
                        status: "status",
                        subscription_external_id: "subscription_external_id",
                        total_price: 1,
                    },
                    billing_subscriptions: [
                        {
                            cancel_at_period_end: true,
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            customer_external_id: "customer_external_id",
                            discounts: [
                                {
                                    coupon_id: "coupon_id",
                                    coupon_name: "coupon_name",
                                    discount_external_id: "discount_external_id",
                                    duration: "duration",
                                    is_active: true,
                                    started_at: "2024-01-15T09:30:00Z",
                                    subscription_external_id: "subscription_external_id",
                                },
                            ],
                            id: "id",
                            interval: "interval",
                            period_end: 1,
                            period_start: 1,
                            products: [
                                {
                                    billing_scheme: "billing_scheme",
                                    created_at: "2024-01-15T09:30:00Z",
                                    currency: "currency",
                                    environment_id: "environment_id",
                                    external_id: "external_id",
                                    id: "id",
                                    interval: "interval",
                                    name: "name",
                                    package_size: 1,
                                    price: 1,
                                    price_external_id: "price_external_id",
                                    price_id: "price_id",
                                    price_tier: [{}],
                                    quantity: 1.1,
                                    subscription_id: "subscription_id",
                                    updated_at: "2024-01-15T09:30:00Z",
                                    usage_type: "usage_type",
                                },
                            ],
                            status: "status",
                            subscription_external_id: "subscription_external_id",
                            total_price: 1,
                        },
                    ],
                    created_at: "2024-01-15T09:30:00Z",
                    default_payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    entity_traits: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            environment_id: "environment_id",
                            id: "id",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    environment_id: "environment_id",
                    id: "id",
                    keys: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            definition_id: "definition_id",
                            entity_id: "entity_id",
                            entity_type: "entity_type",
                            environment_id: "environment_id",
                            id: "id",
                            key: "key",
                            updated_at: "2024-01-15T09:30:00Z",
                            value: "value",
                        },
                    ],
                    last_seen_at: "2024-01-15T09:30:00Z",
                    logo_url: "logo_url",
                    metrics: [
                        {
                            account_id: "account_id",
                            captured_at_max: "2024-01-15T09:30:00Z",
                            captured_at_min: "2024-01-15T09:30:00Z",
                            company_id: "company_id",
                            created_at: "2024-01-15T09:30:00Z",
                            environment_id: "environment_id",
                            event_subtype: "event_subtype",
                            month_reset: "month_reset",
                            period: "period",
                            value: 1,
                        },
                    ],
                    name: "name",
                    payment_methods: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            customer_external_id: "customer_external_id",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            payment_method_type: "payment_method_type",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    plan: {
                        id: "id",
                        name: "name",
                    },
                    plans: [
                        {
                            id: "id",
                            name: "name",
                        },
                    ],
                    rules: [
                        {
                            account_id: "account_id",
                            condition_groups: [
                                {
                                    conditions: [
                                        {
                                            account_id: "account_id",
                                            condition_type: "condition_type",
                                            environment_id: "environment_id",
                                            id: "id",
                                            operator: "operator",
                                            resource_ids: ["resource_ids"],
                                            trait_value: "trait_value",
                                        },
                                    ],
                                },
                            ],
                            conditions: [
                                {
                                    account_id: "account_id",
                                    condition_type: "condition_type",
                                    environment_id: "environment_id",
                                    id: "id",
                                    operator: "operator",
                                    resource_ids: ["resource_ids"],
                                    trait_value: "trait_value",
                                },
                            ],
                            environment_id: "environment_id",
                            id: "id",
                            name: "name",
                            priority: 1,
                            rule_type: "rule_type",
                            value: true,
                        },
                    ],
                    traits: {
                        key: "value",
                    },
                    updated_at: "2024-01-15T09:30:00Z",
                    user_count: 1,
                },
                component: {
                    ast: {
                        key: 1.1,
                    },
                    created_at: "2024-01-15T09:30:00Z",
                    id: "id",
                    name: "name",
                    state: "state",
                    type: "type",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                credit_bundles: [
                    {
                        bundle_type: "bundle_type",
                        created_at: "2024-01-15T09:30:00Z",
                        credit_id: "credit_id",
                        credit_name: "credit_name",
                        expiry_type: "expiry_type",
                        expiry_unit: "expiry_unit",
                        has_grants: true,
                        id: "id",
                        name: "name",
                        status: "status",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                credit_grants: [
                    {
                        billing_credit_id: "billing_credit_id",
                        company_id: "company_id",
                        company_name: "company_name",
                        created_at: "2024-01-15T09:30:00Z",
                        credit_description: "credit_description",
                        credit_name: "credit_name",
                        grant_reason: "grant_reason",
                        id: "id",
                        quantity: 1,
                        quantity_remaining: 1.1,
                        quantity_used: 1.1,
                        source_label: "source_label",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                default_plan: {
                    audience_type: "audience_type",
                    billing_product: {
                        account_id: "account_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        is_active: true,
                        name: "name",
                        price: 1.1,
                        prices: [
                            {
                                currency: "currency",
                                external_price_id: "external_price_id",
                                id: "id",
                                interval: "interval",
                                price: 1,
                                scheme: "scheme",
                            },
                        ],
                        product_id: "product_id",
                        quantity: 1.1,
                        subscription_count: 1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    charge_type: "charge_type",
                    company_count: 1,
                    controlled_by: "controlled_by",
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    features: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            description: "description",
                            feature_type: "feature_type",
                            flags: [
                                {
                                    created_at: "2024-01-15T09:30:00Z",
                                    default_value: true,
                                    description: "description",
                                    flag_type: "flag_type",
                                    id: "id",
                                    key: "key",
                                    name: "name",
                                    rules: [
                                        {
                                            condition_groups: [
                                                {
                                                    conditions: [
                                                        {
                                                            condition_type: "condition_type",
                                                            created_at: "2024-01-15T09:30:00Z",
                                                            environment_id: "environment_id",
                                                            id: "id",
                                                            operator: "operator",
                                                            resource_ids: ["resource_ids"],
                                                            resources: [
                                                                {
                                                                    id: "id",
                                                                    name: "name",
                                                                },
                                                            ],
                                                            rule_id: "rule_id",
                                                            trait_value: "trait_value",
                                                            updated_at: "2024-01-15T09:30:00Z",
                                                        },
                                                    ],
                                                    created_at: "2024-01-15T09:30:00Z",
                                                    environment_id: "environment_id",
                                                    id: "id",
                                                    rule_id: "rule_id",
                                                    updated_at: "2024-01-15T09:30:00Z",
                                                },
                                            ],
                                            conditions: [
                                                {
                                                    condition_type: "condition_type",
                                                    created_at: "2024-01-15T09:30:00Z",
                                                    environment_id: "environment_id",
                                                    id: "id",
                                                    operator: "operator",
                                                    resource_ids: ["resource_ids"],
                                                    resources: [
                                                        {
                                                            id: "id",
                                                            name: "name",
                                                        },
                                                    ],
                                                    rule_id: "rule_id",
                                                    trait_value: "trait_value",
                                                    updated_at: "2024-01-15T09:30:00Z",
                                                },
                                            ],
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            name: "name",
                                            priority: 1,
                                            rule_type: "rule_type",
                                            updated_at: "2024-01-15T09:30:00Z",
                                            value: true,
                                        },
                                    ],
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                            ],
                            icon: "icon",
                            id: "id",
                            name: "name",
                            plans: [
                                {
                                    id: "id",
                                    name: "name",
                                },
                            ],
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    icon: "icon",
                    id: "id",
                    included_credit_grants: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            credit_amount: 1,
                            credit_id: "credit_id",
                            credit_name: "credit_name",
                            id: "id",
                            plan_id: "plan_id",
                            plan_name: "plan_name",
                            reset_cadence: "reset_cadence",
                            reset_start: "reset_start",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    is_default: true,
                    is_free: true,
                    is_trialable: true,
                    monthly_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    name: "name",
                    one_time_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    plan_type: "plan_type",
                    trial_days: 1,
                    updated_at: "2024-01-15T09:30:00Z",
                    yearly_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                },
                feature_usage: {
                    features: [
                        {
                            access: true,
                            allocation_type: "boolean",
                            entitlement_id: "entitlement_id",
                            entitlement_type: "entitlement_type",
                        },
                    ],
                },
                invoices: [
                    {
                        amount_due: 1,
                        amount_paid: 1,
                        amount_remaining: 1,
                        collection_method: "collection_method",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        id: "id",
                        subtotal: 1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                post_trial_plan: {
                    audience_type: "audience_type",
                    billing_product: {
                        account_id: "account_id",
                        created_at: "2024-01-15T09:30:00Z",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        is_active: true,
                        name: "name",
                        price: 1.1,
                        prices: [
                            {
                                currency: "currency",
                                external_price_id: "external_price_id",
                                id: "id",
                                interval: "interval",
                                price: 1,
                                scheme: "scheme",
                            },
                        ],
                        product_id: "product_id",
                        quantity: 1.1,
                        subscription_count: 1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    charge_type: "charge_type",
                    company_count: 1,
                    controlled_by: "controlled_by",
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    features: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            description: "description",
                            feature_type: "feature_type",
                            flags: [
                                {
                                    created_at: "2024-01-15T09:30:00Z",
                                    default_value: true,
                                    description: "description",
                                    flag_type: "flag_type",
                                    id: "id",
                                    key: "key",
                                    name: "name",
                                    rules: [
                                        {
                                            condition_groups: [
                                                {
                                                    conditions: [
                                                        {
                                                            condition_type: "condition_type",
                                                            created_at: "2024-01-15T09:30:00Z",
                                                            environment_id: "environment_id",
                                                            id: "id",
                                                            operator: "operator",
                                                            resource_ids: ["resource_ids"],
                                                            resources: [
                                                                {
                                                                    id: "id",
                                                                    name: "name",
                                                                },
                                                            ],
                                                            rule_id: "rule_id",
                                                            trait_value: "trait_value",
                                                            updated_at: "2024-01-15T09:30:00Z",
                                                        },
                                                    ],
                                                    created_at: "2024-01-15T09:30:00Z",
                                                    environment_id: "environment_id",
                                                    id: "id",
                                                    rule_id: "rule_id",
                                                    updated_at: "2024-01-15T09:30:00Z",
                                                },
                                            ],
                                            conditions: [
                                                {
                                                    condition_type: "condition_type",
                                                    created_at: "2024-01-15T09:30:00Z",
                                                    environment_id: "environment_id",
                                                    id: "id",
                                                    operator: "operator",
                                                    resource_ids: ["resource_ids"],
                                                    resources: [
                                                        {
                                                            id: "id",
                                                            name: "name",
                                                        },
                                                    ],
                                                    rule_id: "rule_id",
                                                    trait_value: "trait_value",
                                                    updated_at: "2024-01-15T09:30:00Z",
                                                },
                                            ],
                                            created_at: "2024-01-15T09:30:00Z",
                                            environment_id: "environment_id",
                                            id: "id",
                                            name: "name",
                                            priority: 1,
                                            rule_type: "rule_type",
                                            updated_at: "2024-01-15T09:30:00Z",
                                            value: true,
                                        },
                                    ],
                                    updated_at: "2024-01-15T09:30:00Z",
                                },
                            ],
                            icon: "icon",
                            id: "id",
                            name: "name",
                            plans: [
                                {
                                    id: "id",
                                    name: "name",
                                },
                            ],
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    icon: "icon",
                    id: "id",
                    included_credit_grants: [
                        {
                            created_at: "2024-01-15T09:30:00Z",
                            credit_amount: 1,
                            credit_id: "credit_id",
                            credit_name: "credit_name",
                            id: "id",
                            plan_id: "plan_id",
                            plan_name: "plan_name",
                            reset_cadence: "reset_cadence",
                            reset_start: "reset_start",
                            updated_at: "2024-01-15T09:30:00Z",
                        },
                    ],
                    is_default: true,
                    is_free: true,
                    is_trialable: true,
                    monthly_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    name: "name",
                    one_time_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                    plan_type: "plan_type",
                    trial_days: 1,
                    updated_at: "2024-01-15T09:30:00Z",
                    yearly_price: {
                        currency: "currency",
                        external_price_id: "external_price_id",
                        id: "id",
                        interval: "interval",
                        price: 1,
                        scheme: "scheme",
                    },
                },
                show_credits: true,
                show_period_toggle: true,
                show_zero_price_as_free: true,
                stripe_embed: {
                    account_id: "account_id",
                    publishable_key: "publishable_key",
                    schematic_publishable_key: "schematic_publishable_key",
                    setup_intent_client_secret: "setup_intent_client_secret",
                },
                subscription: {
                    cancel_at: "2024-01-15T09:30:00Z",
                    cancel_at_period_end: true,
                    currency: "currency",
                    customer_external_id: "customer_external_id",
                    discounts: [
                        {
                            coupon_id: "coupon_id",
                            coupon_name: "coupon_name",
                            discount_external_id: "discount_external_id",
                            duration: "duration",
                            is_active: true,
                            started_at: "2024-01-15T09:30:00Z",
                            subscription_external_id: "subscription_external_id",
                        },
                    ],
                    expired_at: "2024-01-15T09:30:00Z",
                    interval: "interval",
                    latest_invoice: {
                        amount_due: 1,
                        amount_paid: 1,
                        amount_remaining: 1,
                        collection_method: "collection_method",
                        created_at: "2024-01-15T09:30:00Z",
                        currency: "currency",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        id: "id",
                        subtotal: 1,
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    payment_method: {
                        created_at: "2024-01-15T09:30:00Z",
                        customer_external_id: "customer_external_id",
                        environment_id: "environment_id",
                        external_id: "external_id",
                        id: "id",
                        payment_method_type: "payment_method_type",
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                    products: [
                        {
                            billing_scheme: "billing_scheme",
                            created_at: "2024-01-15T09:30:00Z",
                            currency: "currency",
                            environment_id: "environment_id",
                            external_id: "external_id",
                            id: "id",
                            interval: "interval",
                            name: "name",
                            package_size: 1,
                            price: 1,
                            price_external_id: "price_external_id",
                            price_id: "price_id",
                            price_tier: [{}],
                            quantity: 1.1,
                            subscription_id: "subscription_id",
                            updated_at: "2024-01-15T09:30:00Z",
                            usage_type: "usage_type",
                        },
                    ],
                    status: "status",
                    subscription_external_id: "subscription_external_id",
                    total_price: 1,
                    trial_end: "2024-01-15T09:30:00Z",
                },
                trial_payment_method_required: true,
                upcoming_invoice: {
                    amount_due: 1,
                    amount_paid: 1,
                    amount_remaining: 1,
                    collection_method: "collection_method",
                    company_id: "company_id",
                    created_at: "2024-01-15T09:30:00Z",
                    currency: "currency",
                    customer_external_id: "customer_external_id",
                    due_date: "2024-01-15T09:30:00Z",
                    environment_id: "environment_id",
                    external_id: "external_id",
                    id: "id",
                    payment_method_external_id: "payment_method_external_id",
                    subscription_external_id: "subscription_external_id",
                    subtotal: 1,
                    updated_at: "2024-01-15T09:30:00Z",
                    url: "url",
                },
            },
            params: {
                company_id: "company_id",
                component_id: "component_id",
            },
        });
    });

    test("previewComponentData (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/components/preview-data")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.components.previewComponentData();
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("previewComponentData (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/components/preview-data")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.components.previewComponentData();
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("previewComponentData (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/components/preview-data")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.components.previewComponentData();
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("previewComponentData (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/components/preview-data")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.components.previewComponentData();
        }).rejects.toThrow(Schematic.InternalServerError);
    });
});
