/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SchematicClient } from "../../src/Client";

describe("Accounts", () => {
    test("listApiKeys", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    environment_id: "environment_id",
                    id: "id",
                    last_used_at: "2024-01-15T09:30:00Z",
                    name: "name",
                    scopes: ["scopes"],
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: { environment_id: "environment_id", limit: 1, offset: 1, require_environment: true },
        };
        server.mockEndpoint().get("/api-keys").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.accounts.listApiKeys({
            require_environment: true,
        });
        expect(response).toEqual({
            data: [
                {
                    created_at: "2024-01-15T09:30:00Z",
                    description: "description",
                    environment_id: "environment_id",
                    id: "id",
                    last_used_at: "2024-01-15T09:30:00Z",
                    name: "name",
                    scopes: ["scopes"],
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: {
                environment_id: "environment_id",
                limit: 1,
                offset: 1,
                require_environment: true,
            },
        });
    });

    test("createApiKey", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name" };
        const rawResponseBody = {
            data: {
                created_at: "2024-01-15T09:30:00Z",
                description: "description",
                environment_id: "environment_id",
                id: "id",
                last_used_at: "2024-01-15T09:30:00Z",
                name: "name",
                scopes: ["scopes"],
                secret: "secret",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/api-keys")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounts.createApiKey({
            name: "name",
        });
        expect(response).toEqual({
            data: {
                created_at: "2024-01-15T09:30:00Z",
                description: "description",
                environment_id: "environment_id",
                id: "id",
                last_used_at: "2024-01-15T09:30:00Z",
                name: "name",
                scopes: ["scopes"],
                secret: "secret",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("getApiKey", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                created_at: "2024-01-15T09:30:00Z",
                description: "description",
                environment_id: "environment_id",
                id: "id",
                last_used_at: "2024-01-15T09:30:00Z",
                name: "name",
                scopes: ["scopes"],
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .get("/api-keys/api_key_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounts.getApiKey("api_key_id");
        expect(response).toEqual({
            data: {
                created_at: "2024-01-15T09:30:00Z",
                description: "description",
                environment_id: "environment_id",
                id: "id",
                last_used_at: "2024-01-15T09:30:00Z",
                name: "name",
                scopes: ["scopes"],
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("updateApiKey", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            data: {
                created_at: "2024-01-15T09:30:00Z",
                description: "description",
                environment_id: "environment_id",
                id: "id",
                last_used_at: "2024-01-15T09:30:00Z",
                name: "name",
                scopes: ["scopes"],
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .put("/api-keys/api_key_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounts.updateApiKey("api_key_id");
        expect(response).toEqual({
            data: {
                created_at: "2024-01-15T09:30:00Z",
                description: "description",
                environment_id: "environment_id",
                id: "id",
                last_used_at: "2024-01-15T09:30:00Z",
                name: "name",
                scopes: ["scopes"],
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("deleteApiKey", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { data: { deleted: true }, params: { key: "value" } };
        server
            .mockEndpoint()
            .delete("/api-keys/api_key_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounts.deleteApiKey("api_key_id");
        expect(response).toEqual({
            data: {
                deleted: true,
            },
            params: {
                key: "value",
            },
        });
    });

    test("countApiKeys", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: { count: 1 },
            params: { environment_id: "environment_id", limit: 1, offset: 1, require_environment: true },
        };
        server.mockEndpoint().get("/api-keys/count").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.accounts.countApiKeys({
            require_environment: true,
        });
        expect(response).toEqual({
            data: {
                count: 1,
            },
            params: {
                environment_id: "environment_id",
                limit: 1,
                offset: 1,
                require_environment: true,
            },
        });
    });

    test("listApiRequests", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    api_key_id: "api_key_id",
                    ended_at: "2024-01-15T09:30:00Z",
                    environment_id: "environment_id",
                    id: "id",
                    method: "method",
                    req_body: "req_body",
                    request_type: "request_type",
                    resource_id: 1,
                    resource_id_string: "resource_id_string",
                    resource_name: "resource_name",
                    resource_type: "resource_type",
                    resp_code: 1,
                    secondary_resource: "secondary_resource",
                    started_at: "2024-01-15T09:30:00Z",
                    url: "url",
                    user_name: "user_name",
                },
            ],
            params: { environment_id: "environment_id", limit: 1, offset: 1, q: "q", request_type: "request_type" },
        };
        server.mockEndpoint().get("/api-requests").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.accounts.listApiRequests();
        expect(response).toEqual({
            data: [
                {
                    api_key_id: "api_key_id",
                    ended_at: "2024-01-15T09:30:00Z",
                    environment_id: "environment_id",
                    id: "id",
                    method: "method",
                    req_body: "req_body",
                    request_type: "request_type",
                    resource_id: 1,
                    resource_id_string: "resource_id_string",
                    resource_name: "resource_name",
                    resource_type: "resource_type",
                    resp_code: 1,
                    secondary_resource: "secondary_resource",
                    started_at: "2024-01-15T09:30:00Z",
                    url: "url",
                    user_name: "user_name",
                },
            ],
            params: {
                environment_id: "environment_id",
                limit: 1,
                offset: 1,
                q: "q",
                request_type: "request_type",
            },
        });
    });

    test("getApiRequest", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                api_key_id: "api_key_id",
                ended_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                id: "id",
                method: "method",
                req_body: "req_body",
                request_type: "request_type",
                resource_id: 1,
                resource_id_string: "resource_id_string",
                resource_name: "resource_name",
                resource_type: "resource_type",
                resp_body: "resp_body",
                resp_code: 1,
                secondary_resource: "secondary_resource",
                started_at: "2024-01-15T09:30:00Z",
                url: "url",
                user_agent: "user_agent",
                user_id: "user_id",
                user_name: "user_name",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .get("/api-requests/api_request_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounts.getApiRequest("api_request_id");
        expect(response).toEqual({
            data: {
                api_key_id: "api_key_id",
                ended_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                id: "id",
                method: "method",
                req_body: "req_body",
                request_type: "request_type",
                resource_id: 1,
                resource_id_string: "resource_id_string",
                resource_name: "resource_name",
                resource_type: "resource_type",
                resp_body: "resp_body",
                resp_code: 1,
                secondary_resource: "secondary_resource",
                started_at: "2024-01-15T09:30:00Z",
                url: "url",
                user_agent: "user_agent",
                user_id: "user_id",
                user_name: "user_name",
            },
            params: {
                key: "value",
            },
        });
    });

    test("countApiRequests", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: { count: 1 },
            params: { environment_id: "environment_id", limit: 1, offset: 1, q: "q", request_type: "request_type" },
        };
        server
            .mockEndpoint()
            .get("/api-requests/count")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounts.countApiRequests();
        expect(response).toEqual({
            data: {
                count: 1,
            },
            params: {
                environment_id: "environment_id",
                limit: 1,
                offset: 1,
                q: "q",
                request_type: "request_type",
            },
        });
    });

    test("listEnvironments", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    created_at: "2024-01-15T09:30:00Z",
                    environment_type: "environment_type",
                    id: "id",
                    name: "name",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: { ids: ["ids"], limit: 1, offset: 1 },
        };
        server.mockEndpoint().get("/environments").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.accounts.listEnvironments();
        expect(response).toEqual({
            data: [
                {
                    created_at: "2024-01-15T09:30:00Z",
                    environment_type: "environment_type",
                    id: "id",
                    name: "name",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            params: {
                ids: ["ids"],
                limit: 1,
                offset: 1,
            },
        });
    });

    test("createEnvironment", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { environment_type: "development", name: "name" };
        const rawResponseBody = {
            data: {
                api_keys: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        id: "id",
                        name: "name",
                        scopes: ["scopes"],
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                environment_type: "environment_type",
                id: "id",
                name: "name",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/environments")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounts.createEnvironment({
            environment_type: "development",
            name: "name",
        });
        expect(response).toEqual({
            data: {
                api_keys: [
                    {
                        created_at: "2024-01-15T09:30:00Z",
                        id: "id",
                        name: "name",
                        scopes: ["scopes"],
                        updated_at: "2024-01-15T09:30:00Z",
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                environment_type: "environment_type",
                id: "id",
                name: "name",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("getEnvironment", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                created_at: "2024-01-15T09:30:00Z",
                environment_type: "environment_type",
                id: "id",
                name: "name",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .get("/environments/environment_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounts.getEnvironment("environment_id");
        expect(response).toEqual({
            data: {
                created_at: "2024-01-15T09:30:00Z",
                environment_type: "environment_type",
                id: "id",
                name: "name",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("updateEnvironment", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            data: {
                created_at: "2024-01-15T09:30:00Z",
                environment_type: "environment_type",
                id: "id",
                name: "name",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .put("/environments/environment_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounts.updateEnvironment("environment_id");
        expect(response).toEqual({
            data: {
                created_at: "2024-01-15T09:30:00Z",
                environment_type: "environment_type",
                id: "id",
                name: "name",
                updated_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("deleteEnvironment", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { data: { deleted: true }, params: { key: "value" } };
        server
            .mockEndpoint()
            .delete("/environments/environment_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounts.deleteEnvironment("environment_id");
        expect(response).toEqual({
            data: {
                deleted: true,
            },
            params: {
                key: "value",
            },
        });
    });

    test("quickstart", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { data: { ok: true }, params: { key: "value" } };
        server.mockEndpoint().post("/quickstart").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.accounts.quickstart();
        expect(response).toEqual({
            data: {
                ok: true,
            },
            params: {
                key: "value",
            },
        });
    });
});
