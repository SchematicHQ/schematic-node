// This file was auto-generated by Fern from our API Definition.

import * as Schematic from "../../src/api/index";
import { SchematicClient } from "../../src/Client";
import { mockServerPool } from "../mock-server/MockServerPool";

describe("Events", () => {
    test("createEventBatch (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { events: [{ event_type: "identify" }] };
        const rawResponseBody = {
            data: {
                events: [
                    {
                        captured_at: "2024-01-15T09:30:00Z",
                        remote_addr: "remote_addr",
                        remote_ip: "remote_ip",
                        user_agent: "user_agent",
                    },
                ],
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/event-batch")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.events.createEventBatch({
            events: [
                {
                    event_type: "identify",
                },
            ],
        });
        expect(response).toEqual({
            data: {
                events: [
                    {
                        captured_at: "2024-01-15T09:30:00Z",
                        remote_addr: "remote_addr",
                        remote_ip: "remote_ip",
                        user_agent: "user_agent",
                    },
                ],
            },
            params: {
                key: "value",
            },
        });
    });

    test("createEventBatch (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { events: [{ event_type: "identify" }, { event_type: "identify" }] };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/event-batch")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.events.createEventBatch({
                events: [
                    {
                        event_type: "identify",
                    },
                    {
                        event_type: "identify",
                    },
                ],
            });
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("createEventBatch (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { events: [{ event_type: "identify" }, { event_type: "identify" }] };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/event-batch")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.events.createEventBatch({
                events: [
                    {
                        event_type: "identify",
                    },
                    {
                        event_type: "identify",
                    },
                ],
            });
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("createEventBatch (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { events: [{ event_type: "identify" }, { event_type: "identify" }] };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/event-batch")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.events.createEventBatch({
                events: [
                    {
                        event_type: "identify",
                    },
                    {
                        event_type: "identify",
                    },
                ],
            });
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("createEventBatch (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { events: [{ event_type: "identify" }, { event_type: "identify" }] };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/event-batch")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.events.createEventBatch({
                events: [
                    {
                        event_type: "identify",
                    },
                    {
                        event_type: "identify",
                    },
                ],
            });
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("createEventBatch (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { events: [{ event_type: "identify" }, { event_type: "identify" }] };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/event-batch")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.events.createEventBatch({
                events: [
                    {
                        event_type: "identify",
                    },
                    {
                        event_type: "identify",
                    },
                ],
            });
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("getEventSummaries (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    company_count: 1,
                    environment_id: "environment_id",
                    event_count: 1,
                    event_subtype: "event_subtype",
                    last_seen_at: "2024-01-15T09:30:00Z",
                    user_count: 1,
                },
            ],
            params: { event_subtypes: ["event_subtypes"], limit: 1, offset: 1, q: "q" },
        };
        server.mockEndpoint().get("/event-types").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.events.getEventSummaries({
            q: "q",
            limit: 1,
            offset: 1,
        });
        expect(response).toEqual({
            data: [
                {
                    company_count: 1,
                    environment_id: "environment_id",
                    event_count: 1,
                    event_subtype: "event_subtype",
                    last_seen_at: "2024-01-15T09:30:00Z",
                    user_count: 1,
                },
            ],
            params: {
                event_subtypes: ["event_subtypes"],
                limit: 1,
                offset: 1,
                q: "q",
            },
        });
    });

    test("getEventSummaries (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/event-types").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.events.getEventSummaries();
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("getEventSummaries (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/event-types").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.events.getEventSummaries();
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("getEventSummaries (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/event-types").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.events.getEventSummaries();
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("getEventSummaries (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/event-types").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.events.getEventSummaries();
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("getEventSummaries (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/event-types").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.events.getEventSummaries();
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("listEvents (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: [
                {
                    api_key: "api_key",
                    body: { key: "value" },
                    body_preview: "body_preview",
                    captured_at: "2024-01-15T09:30:00Z",
                    company: { id: "id", name: "name" },
                    company_id: "company_id",
                    enriched_at: "2024-01-15T09:30:00Z",
                    environment_id: "environment_id",
                    error_message: "error_message",
                    feature_ids: ["feature_ids"],
                    features: [{ id: "id", name: "name" }],
                    id: "id",
                    loaded_at: "2024-01-15T09:30:00Z",
                    processed_at: "2024-01-15T09:30:00Z",
                    quantity: 1,
                    sent_at: "2024-01-15T09:30:00Z",
                    status: "status",
                    subtype: "subtype",
                    type: "type",
                    updated_at: "2024-01-15T09:30:00Z",
                    user: { id: "id", name: "name" },
                    user_id: "user_id",
                },
            ],
            params: {
                company_id: "company_id",
                event_subtype: "event_subtype",
                event_types: ["identify"],
                flag_id: "flag_id",
                limit: 1,
                offset: 1,
                user_id: "user_id",
            },
        };
        server.mockEndpoint().get("/events").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.events.listEvents({
            company_id: "company_id",
            event_subtype: "event_subtype",
            flag_id: "flag_id",
            user_id: "user_id",
            limit: 1,
            offset: 1,
        });
        expect(response).toEqual({
            data: [
                {
                    api_key: "api_key",
                    body: {
                        key: "value",
                    },
                    body_preview: "body_preview",
                    captured_at: "2024-01-15T09:30:00Z",
                    company: {
                        id: "id",
                        name: "name",
                    },
                    company_id: "company_id",
                    enriched_at: "2024-01-15T09:30:00Z",
                    environment_id: "environment_id",
                    error_message: "error_message",
                    feature_ids: ["feature_ids"],
                    features: [
                        {
                            id: "id",
                            name: "name",
                        },
                    ],
                    id: "id",
                    loaded_at: "2024-01-15T09:30:00Z",
                    processed_at: "2024-01-15T09:30:00Z",
                    quantity: 1,
                    sent_at: "2024-01-15T09:30:00Z",
                    status: "status",
                    subtype: "subtype",
                    type: "type",
                    updated_at: "2024-01-15T09:30:00Z",
                    user: {
                        id: "id",
                        name: "name",
                    },
                    user_id: "user_id",
                },
            ],
            params: {
                company_id: "company_id",
                event_subtype: "event_subtype",
                event_types: ["identify"],
                flag_id: "flag_id",
                limit: 1,
                offset: 1,
                user_id: "user_id",
            },
        });
    });

    test("listEvents (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/events").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.events.listEvents();
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("listEvents (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/events").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.events.listEvents();
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("listEvents (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/events").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.events.listEvents();
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("listEvents (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/events").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.events.listEvents();
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("listEvents (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/events").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.events.listEvents();
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("createEvent (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { event_type: "identify" };
        const rawResponseBody = {
            data: {
                captured_at: "2024-01-15T09:30:00Z",
                event_id: "event_id",
                remote_addr: "remote_addr",
                remote_ip: "remote_ip",
                user_agent: "user_agent",
            },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/events")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.events.createEvent({
            event_type: "identify",
        });
        expect(response).toEqual({
            data: {
                captured_at: "2024-01-15T09:30:00Z",
                event_id: "event_id",
                remote_addr: "remote_addr",
                remote_ip: "remote_ip",
                user_agent: "user_agent",
            },
            params: {
                key: "value",
            },
        });
    });

    test("createEvent (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { event_type: "identify" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/events")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.events.createEvent({
                event_type: "identify",
            });
        }).rejects.toThrow(Schematic.BadRequestError);
    });

    test("createEvent (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { event_type: "identify" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/events")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.events.createEvent({
                event_type: "identify",
            });
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("createEvent (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { event_type: "identify" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/events")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.events.createEvent({
                event_type: "identify",
            });
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("createEvent (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { event_type: "identify" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/events")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.events.createEvent({
                event_type: "identify",
            });
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("createEvent (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { event_type: "identify" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/events")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.events.createEvent({
                event_type: "identify",
            });
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("getEvent (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: {
                api_key: "api_key",
                body: { key: "value" },
                body_preview: "body_preview",
                captured_at: "2024-01-15T09:30:00Z",
                company: { description: "description", id: "id", image_url: "image_url", name: "name" },
                company_id: "company_id",
                enriched_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                error_message: "error_message",
                feature_ids: ["feature_ids"],
                features: [{ id: "id", name: "name" }],
                id: "id",
                loaded_at: "2024-01-15T09:30:00Z",
                processed_at: "2024-01-15T09:30:00Z",
                quantity: 1,
                sent_at: "2024-01-15T09:30:00Z",
                status: "status",
                subtype: "subtype",
                type: "type",
                updated_at: "2024-01-15T09:30:00Z",
                user: { description: "description", id: "id", image_url: "image_url", name: "name" },
                user_id: "user_id",
            },
            params: { key: "value" },
        };
        server.mockEndpoint().get("/events/event_id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.events.getEvent("event_id");
        expect(response).toEqual({
            data: {
                api_key: "api_key",
                body: {
                    key: "value",
                },
                body_preview: "body_preview",
                captured_at: "2024-01-15T09:30:00Z",
                company: {
                    description: "description",
                    id: "id",
                    image_url: "image_url",
                    name: "name",
                },
                company_id: "company_id",
                enriched_at: "2024-01-15T09:30:00Z",
                environment_id: "environment_id",
                error_message: "error_message",
                feature_ids: ["feature_ids"],
                features: [
                    {
                        id: "id",
                        name: "name",
                    },
                ],
                id: "id",
                loaded_at: "2024-01-15T09:30:00Z",
                processed_at: "2024-01-15T09:30:00Z",
                quantity: 1,
                sent_at: "2024-01-15T09:30:00Z",
                status: "status",
                subtype: "subtype",
                type: "type",
                updated_at: "2024-01-15T09:30:00Z",
                user: {
                    description: "description",
                    id: "id",
                    image_url: "image_url",
                    name: "name",
                },
                user_id: "user_id",
            },
            params: {
                key: "value",
            },
        });
    });

    test("getEvent (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/events/event_id").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.events.getEvent("event_id");
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("getEvent (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/events/event_id").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.events.getEvent("event_id");
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("getEvent (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/events/event_id").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.events.getEvent("event_id");
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("getEvent (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/events/event_id").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.events.getEvent("event_id");
        }).rejects.toThrow(Schematic.InternalServerError);
    });

    test("getSegmentIntegrationStatus (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            data: { connected: true, environment_id: "environment_id", last_event_at: "2024-01-15T09:30:00Z" },
            params: { key: "value" },
        };
        server
            .mockEndpoint()
            .get("/segment-integration")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.events.getSegmentIntegrationStatus();
        expect(response).toEqual({
            data: {
                connected: true,
                environment_id: "environment_id",
                last_event_at: "2024-01-15T09:30:00Z",
            },
            params: {
                key: "value",
            },
        });
    });

    test("getSegmentIntegrationStatus (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/segment-integration")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.events.getSegmentIntegrationStatus();
        }).rejects.toThrow(Schematic.UnauthorizedError);
    });

    test("getSegmentIntegrationStatus (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/segment-integration")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.events.getSegmentIntegrationStatus();
        }).rejects.toThrow(Schematic.ForbiddenError);
    });

    test("getSegmentIntegrationStatus (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/segment-integration")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.events.getSegmentIntegrationStatus();
        }).rejects.toThrow(Schematic.NotFoundError);
    });

    test("getSegmentIntegrationStatus (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new SchematicClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/segment-integration")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.events.getSegmentIntegrationStatus();
        }).rejects.toThrow(Schematic.InternalServerError);
    });
});
